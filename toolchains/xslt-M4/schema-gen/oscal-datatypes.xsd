<?xml version="1.0" encoding="utf-8"?>
<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:m="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
  
  targetNamespace="http://csrc.nist.gov/ns/oscal/datatypes/1.0"
  elementFormDefault="qualified">

  <xs:annotation id="built-in-types">
    <xs:documentation>Copies of simpleType declarations for querying by
    routines that need to know about XSD simple types we may use. Any simpleType
    we support should be listed here for propagation in tools e.g. Metaschema Schematron.</xs:documentation>
    <xs:appinfo>
      <xs:simpleType name="boolean"/>
      <xs:simpleType name="base64Binary"/>
      <!--<xs:simpleType name="string"/>-->
      <xs:simpleType name="NCName"/>
      <!--<xs:simpleType name="NMTOKENS"/>-->
      <xs:simpleType name="decimal"/>
      <!-- Not supporting float or double -->
      <!--<xs:simpleType name="float"/>
          <xs:simpleType name="double"/>-->
      <xs:simpleType name="integer"/>
      <xs:simpleType name="nonNegativeInteger"/>
      <xs:simpleType name="positiveInteger"/>
      <!--<xs:simpleType name="ID"/>-->
      <!--<xs:simpleType name="IDREF"/>-->
      <!--<xs:simpleType name="IDREFS"/>-->
      <xs:simpleType name="date"/>
      <xs:simpleType name="dateTime"/>
    </xs:appinfo>
  </xs:annotation>

  <xs:simpleType name="non-negative-integer">
    <xs:annotation>
      <xs:documentation>OSCAL reference for native type</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:nonNegativeInteger"/>
  </xs:simpleType>
  
  <xs:simpleType name="positive-integer">
    <xs:annotation>
      <xs:documentation>OSCAL reference for native type</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:positiveInteger"/>
  </xs:simpleType>
  
  <xs:simpleType name="date-time">
    <xs:annotation>
      <xs:documentation>OSCAL reference for native type</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:dateTime"/>
  </xs:simpleType>
  
  <xs:simpleType name="base64">
    <xs:annotation>
      <xs:documentation>OSCAL reference for native type</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:base64Binary"/>
  </xs:simpleType>
  
  <!-- The OSCAL 'string' datatype restricts the XSD type by prohibiting leading and trailing whitespace, and something
     (not only whitespace) is required. -->
  <xs:simpleType name="string">
    <xs:annotation>
      <xs:documentation>A string, but not empty and not whitespace-only (whitespace is U+9, U+10, U+32 or [ \n\t]+ )</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <xs:pattern value="\S(.*\S)?"><!-- same pattern as JSON Schema -->
        <xs:annotation>
          <xs:documentation>A trimmed string, at least one character with no leading or trailing whitespace.</xs:documentation>
        </xs:annotation>
      </xs:pattern>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="ip-v4-address">
    <xs:annotation>
      <xs:documentation>The ip-v4-address type specifies an IPv4 address in dot decimal notation.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value="((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ip-v6-address">
    <xs:annotation>
      <xs:documentation>The ip-v6-address type specifies an IPv6 address represented in 8 hextets separated by colons.</xs:documentation>
      <xs:documentation>This is based on the pattern provided here: https://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses with some customizations.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value="(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|[fF][eE]80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::([fF]{4}(:0{1,4}){0,1}:){0,1}((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="dateTime-with-timezone">
    <xs:annotation>
      <xs:documentation>The xs:dateTime with a required timezone.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:dateTime"><!-- restricts both lexical form and value space -->
      <xs:pattern value=".+T.+(Z|[+-].+)"/>
      <!-- JSON pattern does not support Leap Days <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$"/>-->
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="date-time-with-timezone">
    <!-- alias for dateTime-with-timezone -->
    <xs:annotation>
      <xs:documentation>The xs:dateTime with a required timezone.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:dateTime"><!-- restricts both lexical form and value space -->
      <xs:pattern value=".+T.+(Z|[+-].+)"/>
      <!-- JSON pattern does not support Leap Days <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$"/>-->
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="date-with-timezone">
    <xs:annotation>
      <xs:documentation>The xs:date with a required timezone.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:date"><!-- restricts both lexical form and value space -->
      <xs:pattern value=".+[:Z].*"/>
      <!-- JSON pattern does not support Leap Days <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})$"/>-->
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="email">
    <xs:annotation>
      <xs:documentation>An email address</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value=".+@.+"/><!-- XSD regexes implicitly anchored -->
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="email-address">
    <!-- alias for email -->
    <xs:annotation>
      <xs:documentation>An email address</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value=".+@.+"/><!-- XSD regexes implicitly anchored -->
    </xs:restriction>
  </xs:simpleType>
  
  
  <xs:simpleType name="hostname">
    <xs:annotation>
      <xs:documentation>A host name</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"><!-- JSON has format: idn-hostname -->
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value=".+"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="uri">
    <xs:annotation>
      <xs:documentation>A URI</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI"><!-- JSON format: uri -->
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value="\p{L}[\p{L}\d+\-\.]*:.+"><!-- JSON Schema has ^[a-zA-Z][a-zA-Z0-9+\-.]+:.+$ -->
        <xs:annotation>
          <xs:documentation>Requires a scheme with colon per RFC 3986</xs:documentation>
        </xs:annotation>
      </xs:pattern>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="uri-reference">
    <xs:annotation>
      <xs:documentation>A URI reference, such as a relative URL</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI"><!-- JSON format: uri-reference -->
      <xs:whiteSpace value="collapse"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="uuid">
    <xs:annotation>
      <xs:documentation>A Type 4 or 5 'random' or 'pseudorandom' UUID per RFC 4122</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse"/>
      <xs:pattern value="[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"><!-- allowing v4 and v5 -->
        <xs:annotation>
          <xs:documentation>A v4 or v5 UUID: a sequence of 8-4-4-4-12 hex digits, with extra constraints in the 13th and 17-18th places</xs:documentation>
        </xs:annotation>
      </xs:pattern>
    </xs:restriction>
  </xs:simpleType>

  <!-- This could be renamed 'ncname-token' if we wish to loosen 'token', as this is pretty strict. -->
  <xs:simpleType name="token">
    <xs:annotation>
      <xs:documentation>A string token intended for use as a controlled (enumerated) value</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <xs:pattern value="(\p{L}|_)(\p{L}|\p{N}|[.\-_])*">
        <xs:annotation>
          <xs:documentation>A single token may not contain whitespace or begin with a numeral.</xs:documentation>
        </xs:annotation>
      </xs:pattern>
    </xs:restriction>
  </xs:simpleType>
  
  
<!-- Following are all the types as currently defined in metaschema-v090-datatypes.json
     Except where they replicate (replace) an older type definition, in which case
     the handmade definition above has been modified to align (when necessary) and this one has been commented out.
     
     Note the machine-generated types have not been touched up - they all say whitespace="preserve" and give patterns,
     and they all restrict strings. Additionally their regexes are typically wrong for XSD, showing anchors ^ and $.
  -->
  
  <xs:simpleType name="Base64Datatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <xs:pattern value="^[0-9A-Fa-f]+$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="BooleanDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: boolean -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DateDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DateWithTimezoneDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DateTimeDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})?$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DateTimeWithTimezoneDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <!-- format: date-time -->
      <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DayTimeDurationDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <!-- format: duration -->
      <xs:pattern value="^[-+]?P([-+]?[0-9]+D)?(T([-+]?[0-9]+H)?([-+]?[0-9]+M)?([-+]?[0-9]+([.,][0-9]{0,9})?S)?)?$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DecimalDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: number -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="EmailAddressDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <!-- format: email -->
      <xs:pattern value="^.+@.+$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="HostnameDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- $ref: #/definitions/StringDatatype -->
      <!-- format: idn-hostname -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="IntegerDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: integer -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="IPV4AddressDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <!-- format: ipv4 -->
      <xs:pattern value="^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="IPV6AddressDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <!-- format: ipv6 -->
      <xs:pattern value="^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|[fF][eE]80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::([fF]{4}(:0{1,4}){0,1}:){0,1}((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MarkupLineDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <xs:pattern value="^[^&#xA;]+$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MarkupMultilineDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NonNegativeIntegerDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- $ref: #/definitions/IntegerDatatype -->
      <!-- minimum: 0 -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PositiveIntegerDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- $ref: #/definitions/IntegerDatatype -->
      <!-- minimum: 1 -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="StringDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <xs:pattern value="^\S(.*\S)?$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TokenDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <xs:pattern value="^(\p{L}|_)(\p{L}|\p{N}|[.\-_])*$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="URIDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <!-- format: uri -->
      <xs:pattern value="^[a-zA-Z][a-zA-Z0-9+\-.]+:.+$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="URIReferenceDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <!-- format: uri-reference -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="UUIDDatatype">
    <xs:annotation>
      <xs:documentation>A type 4 or 5 ('random' or 'pseudorandom') or type 5 UUID per RFC 4122.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <xs:pattern value="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="YearMonthDurationDatatype">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-- type: string -->
      <!-- format: duration -->
      <xs:pattern value="^[-+]?P([-+]?[0-9]+Y)?([-+]?[0-9]+M)?([-+]?[0-9]+W)?([-+]?[0-9]+D)?$"/>
    </xs:restriction>
  </xs:simpleType>
  
  <!--Following type definitions extracted from JSON Schema are silenced in favor of their handmade
  versions, above. -->
  <!--<xs:simpleType name="decimal"><!-\- bound to native XSD type -\-> 
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: number -\->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="date"><!-\- bound to native XSD type -\->
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="dateTime"><!-\- bound to native XSD type -\->
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})?$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="date-with-timezone">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="dateTime-with-timezone">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <!-\- format: date-time -\->
      <xs:pattern value="^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-][0-9]{2}:[0-9]{2})$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="email">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <!-\- format: email -\->
      <xs:pattern value="^.+@.+$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="ip-v4-address">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <!-\- format: ipv4 -\->
      <xs:pattern value="^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="ip-v6-address">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <!-\- format: ipv6 -\->
      <xs:pattern value="^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|[fF][eE]80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::([fF]{4}(:0{1,4}){0,1}:){0,1}((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="hostname">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- $ref: #/definitions/StringDatatype -\->
      <!-\- format: idn-hostname -\->
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="uri">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <!-\- format: uri -\->
      <xs:pattern value="^[a-zA-Z][a-zA-Z0-9+\-.]+:.+$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="uri-reference">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <!-\- format: uri-reference -\->
    </xs:restriction>-->
  <!--</xs:simpleType>-->
  <!--<xs:simpleType name="uuid">
    <xs:annotation>
      <xs:documentation>A type 4 ('random' or 'pseudorandom') or type 5 UUID per RFC 4122.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <xs:pattern value="^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="token">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <xs:pattern value="^(\p{L}|_)(\p{L}|\p{N}|[.\-_])*$"/>
    </xs:restriction>
  </xs:simpleType>-->
  <!--<xs:simpleType name="string">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="preserve"/>
      <!-\- type: string -\->
      <xs:pattern value="^\S(.*\S)?$"/>
    </xs:restriction>
  </xs:simpleType>-->
  
</xs:schema>

