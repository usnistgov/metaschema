<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
  targetNamespace="http://csrc.nist.gov/ns/oscal/1.0" xmlns="http://csrc.nist.gov/ns/oscal/1.0">

  <xs:complexType name="markupLineType" mixed="true">
    <xs:group ref="mixedInlineMarkupGroup"/>
  </xs:complexType>

  <xs:complexType name="markupMultilineType">
    <xs:group ref="blockElementGroup"/>
  </xs:complexType>

  <xs:group name="blockElementGroup">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="h1"    type="blockElementType"/>
        <xs:element name="h2"    type="blockElementType"/>
        <xs:element name="h3"    type="blockElementType"/>
        <xs:element name="h4"    type="blockElementType"/>
        <xs:element name="h5"    type="blockElementType"/>
        <xs:element name="h6"    type="blockElementType"/>
        <xs:element name="p"     type="blockElementType"/>
        <xs:element name="ul"    type="listType"/>
        <xs:element name="ol"    type="listType"/>
        <xs:element name="pre"   type="preformattedType"/>
        <xs:element name="table" type="tableType"/>
        <!-- TODO: need to add support for blockquote, which can contain block elements. usnistgov/metaschema#70 -->
      </xs:choice>
    </xs:sequence>
  </xs:group>

  <!--
    headers: phrase inline markup, a, insert (phrase)
    p: phrase inline markup, a, insert, img (phrase+img)
    li: phrase inline markup, a, insert, img (phrase+img)
    pre: phrase inline markup, a, insert (phrase)
    td th: phrase inline markup, a, insert, img (phrase+img)
  -->


  <xs:complexType name="blockElementType" mixed="true">
    <xs:group ref="phraseInlineMarkupGroup"/>
  </xs:complexType>

  <xs:complexType name="headingType" mixed="true">
    <xs:complexContent>
      <xs:extension base="blockElementType">
        <xs:annotation>
          <xs:documentation>The content model is the same as blockElementType, but line endings need
            to be preserved, since this is preformatted.</xs:documentation>
        </xs:annotation>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="preformattedType" mixed="true">
    <xs:complexContent>
      <xs:extension base="blockElementType">
        <xs:annotation>
          <xs:documentation>The content model is the same as blockElementType, but line endings need
            to be preserved, since this is preformatted.</xs:documentation>
        </xs:annotation>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="listType">
    <xs:sequence>
      <xs:element name="li" type="listItemType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="listItemType" mixed="true">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:group ref="mixedInlineMarkupGroup"/>
      <xs:element name="ul" type="listType"/>
      <xs:element name="ol" type="listType"/>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="tableType">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="tr" type="tableRowType"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="tableRowType">
    <!-- QUESTION: Should we allow TH and TD to be mixed? -->
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="td" type="tableCellType" maxOccurs="unbounded"/>
      <xs:element name="th" type="tableCellType" maxOccurs="unbounded"/>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="tableCellType" mixed="true">
    <xs:group ref="mixedInlineMarkupGroup"/>
    <!-- TODO: consider adding a choice between the inline or paragraphs. We need to figure out what is supported in Markdown. -->
    <xs:attribute name="align" type="alignType" default="left"/>
    <!-- TODO: need to add support for alignment. usnistgov/metaschema#70 -->
  </xs:complexType>

  <xs:simpleType name="alignType">
    <xs:restriction base="xs:token">
      <xs:enumeration value="left"/>
      <xs:enumeration value="center"/>
      <xs:enumeration value="right"/>
    </xs:restriction>
  </xs:simpleType>

  <!-- note mix does not include anchors, which do not come for free -->
  <xs:group name="mixedInlineMarkupGroup">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="phraseInlineMarkupGroup"/>
        <xs:element name="img" type="imageType"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>

  <xs:group name="phraseInlineMarkupGroup">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="code" type="inlineMarkupType" minOccurs="1"/>
        <xs:element name="em" type="inlineMarkupType" minOccurs="1"/>
        <xs:element name="i" type="inlineMarkupType" minOccurs="1"/>
        <xs:element name="b" type="inlineMarkupType" minOccurs="1"/>
        <xs:element name="strong" type="inlineMarkupType" minOccurs="1"/>
        <xs:element name="sub" type="inlineMarkupType" minOccurs="1"/>
        <xs:element name="sup" type="inlineMarkupType" minOccurs="1"/>
        <xs:element name="q" type="inlineMarkupType" minOccurs="1"/>
        <xs:element name="insert" type="insertType"/>
        <xs:element name="a" type="anchorType"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>

  <xs:complexType name="inlineMarkupType" mixed="true">
    <xs:group ref="phraseInlineMarkupGroup"/>
  </xs:complexType>

  <xs:complexType name="imageType">
    <xs:attribute name="alt" type="xs:string"/>
    <xs:attribute name="src" use="required" type="xs:anyURI"/>
  </xs:complexType>

  <xs:complexType name="anchorType" mixed="true">
    <xs:group ref="phraseInlineMarkupGroup"/>
    <xs:attribute name="href" type="xs:anyURI"/>
  </xs:complexType>

  <!--
    A value to be assigned by responder via parameter
    (a parameter must be available)
  -->
  <xs:complexType name="insertType">
    <xs:attribute name="param-id" use="required" type="xs:NCName"/>
  </xs:complexType>

  <!--
    Within a selection, a choice - tbd
    unlike 'value', choice may have inline stuff as well as 'assign' elements
    choice = element choice { (assign | mix)* }
  -->
  <!--
    IDs are required everywhere for now
    idAttr      = attribute id { xsd:ID }
  -->
</xs:schema>
