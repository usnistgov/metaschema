<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
    xmlns:opr="http://csrc.nist.gov/ns/oscal/profile-resolution" xmlns:x="http://www.jenitennison.com/xslt/xspec"
    stylesheet="../../metaschema-collect.xsl">
    
<!-- metaschema-collect.xsl does two things:
    -  merges modular metaschemas into a single tree of metaschemas
       (intelligently refusing to revisit the same URI twice)
       annotating them a little
    -  relabels 'local' definitions with module identifiers to distinguish from homonyms
    
    -->
    <x:scenario label="Working metaschema">
        <!-- Mysteriously, sometimes select="*" makes XSpec problems go away, other times not. -->
        <x:context href="../working_metaschema.xml"/>
        <x:expect label="Modules collected, no loops" href="working_metaschema-COLLECTED.xml" select="/*"/>
    </x:scenario>

    <x:scenario label="Metaschema skeleton" pending="update">
        <!-- Mysteriously, sometimes select="*" makes XSpec problems go away, other times not. -->
        <x:context mode="acquire">
            <METASCHEMA>
                <short-name>test</short-name>
                <define-assembly name="root">
                    <root-name>root-assembly</root-name>
                    <flag ref="top-level-flag"/>
                    <define-flag name="local-flag">
                        <formal-name>Locally defined flag</formal-name>
                        <description>XXX</description>
                    </define-flag>
                    <model>
                        <field ref="top-level-global-field" max-occurs="unbounded">
                            <group-by name="top-level-global-field-sequence"/>
                        </field>
                        <field ref="top-level-local-field"/>
                        <define-field name="local-field">
                            <formal-name>Locally defined field</formal-name>
                            <description>XXX</description>
                        </define-field>
                    </model>
                </define-assembly>
                <define-field name="top-level-global-field"/>
                <define-field name="top-level-local-field" scope="local"/>
                <define-flag name="top-level-flag"/>                
            </METASCHEMA>
        </x:context>
        <x:expect label="Modules collected, no loops">
            <METASCHEMA src="..." module="test">
                <short-name>test</short-name>
                <define-assembly name="root" module="test" key-name="test:root" scope="global">
                    <root-name>root-assembly</root-name>
                    <flag ref="top-level-flag" required="no">
                        <use-name>tlf</use-name>
                    </flag>
                    <define-flag name="local-flag" as-type="string" required="no">
                        <formal-name>Locally defined flag</formal-name>
                        <description>XXX</description>
                    </define-flag>
                    <model>
                        <field ref="top-level-global-field" min-occurs="0" max-occurs="unbounded">
                            <group-by name="top-level-global-field-sequence"/>
                        </field>
                        <field ref="top-level-local-field" min-occurs="0" max-occurs="1"/>
                        <define-field name="local-field" as-type="string" min-occurs="0" max-occurs="1" collapsible="no">
                            <formal-name>Locally defined field</formal-name>
                            <description>XXX</description>
                        </define-field>
                    </model>
                </define-assembly>
                <define-field name="top-level-global-field" module="test" key-name="test:top-level-global-field" scope="global" as-type="string" collapsible="no"/>
                <define-field name="top-level-local-field" scope="local" module="test" key-name="test:top-level-local-field" as-type="string" collapsible="no"/>
                <define-flag name="top-level-flag" module="test" key-name="test:top-level-flag" scope="global" as-type="string"/>                
            </METASCHEMA>
            
        </x:expect>
    </x:scenario>
    <x:scenario label="Nested locals" pending="update">
        <!-- Mysteriously, sometimes select="*" makes XSpec problems go away, other times not. -->
        <x:context mode="acquire">
            <METASCHEMA>
                <short-name>test</short-name>
                <define-assembly name="root">
                    <root-name>root-assembly</root-name>
                    <flag ref="top-level-flag" required="no">
                        <use-name>tlf</use-name>
                    </flag>
                    <define-flag name="local-flag">
                        <formal-name>Locally defined flag</formal-name>
                        <description>XXX</description>
                    </define-flag>
                    <model>
                        <field ref="top-level-global-field"/>
                        <field ref="top-level-local-field"/>
                        <assembly ref="top-level-local-assembly"/>
                        <define-field name="local-field">
                            <formal-name>Locally defined field</formal-name>
                            <description>XXX</description>
                        </define-field>
                    </model>
                </define-assembly>
                <define-field name="top-level-global-field"/>
                <define-field name="top-level-local-field" scope="local">
                    <formal-name>Included twice</formal-name>
                </define-field>
                <define-assembly name="top-level-local-assembly" scope="local">
                    <model>
                        <field ref="top-level-local-field"/>
                        <assembly ref="top-level-local-assembly"/>
                    </model>
                </define-assembly>
                <define-flag name="top-level-flag"/>                
            </METASCHEMA>
        </x:context>
        <x:expect label="Local definitions preserved with amended names">
            <METASCHEMA src="..." module="test">
                <short-name>test</short-name>
                <define-assembly name="root" module="test" key-name="test:root" scope="global">
                    <root-name>root-assembly</root-name>
                    <flag ref="top-level-flag" required="no"/>
                    <define-flag name="local-flag" as-type="string" required="no">
                        <formal-name>Locally defined flag</formal-name>
                        <description>XXX</description>
                    </define-flag>
                    <model>
                        <field ref="top-level-global-field" min-occurs="0" max-occurs="1"/>
                        <field ref="top-level-local-field" min-occurs="0" max-occurs="1"/>
                        <assembly ref="top-level-local-assembly" min-occurs="0" max-occurs="1"/>
                        <define-field name="local-field" as-type="string" min-occurs="0" max-occurs="1" collapsible="no">
                            <formal-name>Locally defined field</formal-name>
                            <description>XXX</description>
                        </define-field>
                    </model>
                </define-assembly>
                <define-field name="top-level-global-field" module="test" key-name="test:top-level-global-field" scope="global" as-type="string" collapsible="no"/>
                <define-field name="top-level-local-field" scope="local" module="test" key-name="test:top-level-local-field" as-type="string" collapsible="no">
                    <formal-name>Included twice</formal-name>
                </define-field>
                <define-assembly name="top-level-local-assembly" scope="local" module="test" key-name="test:top-level-local-assembly">
                    <model>
                        <field ref="top-level-local-field" min-occurs="0" max-occurs="1"/>
                        <assembly ref="top-level-local-assembly" min-occurs="0" max-occurs="1"/>
                    </model>
                </define-assembly>
                <define-flag name="top-level-flag" module="test" key-name="test:top-level-flag" scope="global" as-type="string"/>                
            </METASCHEMA>
            
        </x:expect>
    </x:scenario>

    
</x:description>