<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Mon Mar 30, 2020 11:56 (UTC-04) by REx v5.49 which is Copyright (c) 1979-2019 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: xpath20.ebnf -backtrack -xslt -tree -name xpath20 -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="xpath20">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="11"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    51, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 4, 17, 18, 19, 20, 21, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
    22, 22, 22, 24, 4, 25, 4, 22, 4, 26, 27, 28, 29, 30, 31, 32, 33, 34, 22, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 22, 4, 49, 4, 4, 4
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214,
    214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 331, 370, 386, 423, 423, 423, 415, 354, 346, 354, 346,
    354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 440, 440, 440, 440, 440, 440, 440, 315, 354, 354, 354, 354, 354, 354, 354,
    354, 399, 423, 423, 424, 422, 423, 423, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 423, 423, 423, 423, 423,
    423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 353, 354, 354, 354,
    354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 423, 51, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 4, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 16, 4, 17, 18, 19, 20, 21, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 4, 22, 22, 22, 22, 22, 22, 22,
    22, 22, 22, 22, 22, 24, 4, 25, 4, 22, 22, 22, 22, 22, 22, 22, 4, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 4, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 22, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 22, 4, 49, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 22, 22, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 50, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 4, 22, 4, 22, 22, 4
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    2049, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 3335, 3328, 3351, 8476, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429,
    3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843,
    3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 6705, 3925,
    3934, 8476, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649,
    3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 5642, 5499, 3950, 8476, 3402, 3504, 3682, 3994, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494,
    3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553,
    3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 6194, 8476, 5711, 8476,
    3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909,
    3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4010, 7253, 4036, 8476, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609,
    3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874,
    3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 10161, 5543, 4080, 8476, 3402, 3504,
    3682, 4124, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698,
    3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 4140, 4152, 4168, 8476, 3402, 3504, 3811, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850,
    3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890,
    3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4212, 4222, 4238, 8476, 3402, 3504, 4725, 9050,
    3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452,
    3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 6680, 4280, 4295, 8476, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 4348, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581,
    3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 9911, 4372, 4387, 8476, 3402, 3504, 3682, 9050, 3395, 3712,
    3423, 3445, 3718, 4417, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773,
    3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 4309, 4323, 4332, 8476, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582,
    3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 7509, 4433, 4448, 8476, 7470, 6549, 9468, 8476, 7973, 9223, 9223, 5847,
    6389, 10304, 8476, 6430, 9223, 8196, 6389, 9638, 7976, 9223, 7806, 6389, 4567, 8500, 7805, 4478, 4496, 8019, 6390, 7468, 7806, 9172, 4516, 4560, 10616,
    4583, 4599, 6837, 7799, 7048, 7114, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 6194, 6254, 4658, 8476, 7470, 6549, 10111, 8476, 7973, 9223, 9223, 5847, 6389, 9283, 8476, 6430, 9223, 8196, 6389, 9638, 7976, 9223, 7806, 6389, 4567,
    9222, 7805, 6389, 10341, 9677, 6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 6194, 4701, 5711, 8476, 4717, 3504, 3682, 9050, 3395, 3712, 3423, 3445,
    3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827,
    3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    6194, 6499, 4741, 8476, 7470, 6549, 9737, 8476, 7973, 9223, 9223, 5847, 6389, 9402, 8476, 6430, 9223, 8196, 6389, 8874, 7976, 9223, 7806, 6389, 4567, 9222,
    7805, 6389, 10341, 9677, 6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4782, 7399, 4808, 8476, 4858, 4979, 5082, 9050, 4851, 5012, 4874, 4899, 4922,
    4938, 3468, 4969, 5002, 5152, 5307, 4906, 5028, 5057, 5071, 5098, 5125, 5141, 5178, 5292, 5168, 5194, 5207, 5223, 5325, 4986, 5262, 5341, 5357, 5386, 4883,
    5402, 5318, 5109, 5370, 5041, 5412, 5277, 5238, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 10531,
    5428, 5437, 5453, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657,
    3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 3478, 5471, 5480, 5496, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468,
    3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505,
    3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4020, 5515, 5524,
    5540, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673,
    3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4252, 5559, 5711, 8476, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525,
    3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866,
    3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 6194, 7627, 5580, 8476, 3402,
    3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905,
    3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 7277, 8476, 7470, 6549, 10029, 8476, 10479, 9223, 9223, 5610, 6389, 4480, 8476, 6430, 9223, 8196,
    6389, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 10341, 9677, 6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091,
    6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 7277, 8476, 7470, 6549,
    9587, 8476, 10479, 9223, 9223, 5610, 6389, 10959, 8476, 6430, 9223, 8196, 6389, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 10341, 9677, 6389,
    7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 6194, 5632, 5711, 8476, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521,
    3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565,
    3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4792, 5658, 5667, 8476, 3402, 3504, 3682,
    9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525, 3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407,
    3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866, 3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 7937, 7951, 5683, 7553, 5755, 5771, 5797, 8476, 10479, 9223, 9223, 5610, 6389, 4480, 5455, 6430, 9223, 5813, 6389, 7162, 5835,
    9427, 9151, 9631, 6761, 9222, 6752, 5853, 10341, 6917, 10683, 10766, 7149, 7076, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108,
    10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 7277, 8476, 7470, 6549, 10029,
    8476, 10479, 9223, 9223, 5610, 6389, 4480, 8476, 6430, 9223, 8196, 6389, 4565, 7976, 9223, 7806, 6389, 4567, 5869, 7828, 6389, 10341, 9677, 6389, 7468,
    7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7120, 5889, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8715, 5913, 5928, 8476, 7470, 5944, 7439, 6185, 3757, 5967, 9223, 5992, 6022, 4480, 8476, 6041, 6523, 9618, 9107, 4565,
    7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 6587, 6066, 7040, 9669, 6087, 6107, 10940, 8202, 9675, 6025, 7806, 7802, 6622, 6132, 7793, 6091, 6928,
    10790, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4264, 6156, 6171, 7598, 6210, 9703,
    10029, 6249, 6270, 9223, 6299, 6322, 8084, 6345, 8476, 6430, 9223, 8196, 6389, 4565, 4672, 9223, 6949, 6389, 4567, 9222, 6366, 10268, 10568, 9677, 6387,
    7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 6006, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 4094, 4108, 6406, 9537, 6448, 6464, 6480, 6496, 6420, 6515, 6539, 6572, 6611, 6638, 6696, 6721, 6737, 6786, 6809,
    6873, 4462, 6902, 6071, 8933, 4567, 10395, 8384, 6389, 9350, 6944, 10259, 6965, 6996, 7012, 4685, 7868, 6140, 9247, 7028, 7064, 7101, 7136, 7186, 6371,
    7211, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 8146, 7239, 8476, 4500,
    10897, 10029, 8476, 10479, 9223, 9223, 5610, 6389, 4480, 8476, 6430, 8036, 8196, 6389, 7269, 7976, 9223, 7806, 6389, 10208, 9222, 7293, 5951, 10341, 9677,
    6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 7298, 7314, 7342, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 9550, 7370, 7385, 8476, 7470, 6549, 10029, 8476, 10479, 9223, 9223, 5610, 6389, 4480, 8476, 6430, 9223,
    8196, 6389, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 10341, 9677, 6389, 7468, 7806, 8911, 7425, 7455, 8575, 6233, 7806, 7802, 7799, 7796, 7793,
    6091, 10802, 7486, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 4614, 8476,
    7525, 6223, 10029, 7549, 10479, 9223, 9947, 5610, 6389, 10201, 8476, 6430, 9223, 8196, 6389, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 10341,
    9677, 6389, 7468, 7806, 8911, 9676, 4480, 6595, 6793, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 9202, 7569, 7584, 7622, 7643, 10431, 10029, 8365, 4953, 9087, 9223, 7677, 8603, 8954, 5246, 6430,
    5873, 8196, 6389, 7712, 4755, 9223, 8767, 6389, 4567, 9222, 7805, 6389, 8567, 7736, 9827, 7765, 7787, 9498, 9676, 4480, 9675, 6025, 7806, 7195, 7822, 7796,
    10065, 7844, 6928, 8108, 7884, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 6886, 7907, 7922, 7967,
    7085, 10506, 10029, 8476, 10479, 8342, 10833, 5610, 7992, 8229, 8476, 8012, 8035, 8052, 8079, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 7720,
    8165, 6389, 7468, 7806, 9383, 6306, 6329, 9675, 6025, 7806, 7802, 7799, 10589, 7326, 8100, 10814, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 3365, 3379, 8124, 8476, 6116, 10778, 10029, 8476, 10479, 8162, 8181, 8218, 7996, 9771, 8245,
    8263, 9941, 8303, 10007, 9304, 4401, 9223, 8319, 6389, 8358, 9222, 7805, 6389, 10341, 9677, 6389, 7468, 7806, 8911, 9676, 4480, 9675, 5616, 9579, 8381,
    7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 3964, 3978,
    8400, 8430, 8446, 4544, 10234, 8476, 10479, 9223, 9223, 5610, 6389, 4480, 8475, 6430, 9223, 8196, 6389, 4565, 8492, 8536, 9460, 8610, 7749, 8516, 8552,
    8591, 7891, 9677, 8626, 8744, 8645, 8665, 8690, 8731, 8760, 8783, 7806, 10368, 9857, 10665, 7793, 8649, 7354, 8108, 10561, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4628, 4642, 8804, 4822, 4835, 8842, 8890, 8476, 10479, 9223, 6050, 5610, 6389, 8906,
    10705, 6430, 9223, 8927, 6389, 6671, 7976, 9977, 7806, 8949, 4567, 9222, 7805, 6389, 7170, 10085, 6389, 7468, 7806, 8911, 9676, 4480, 8970, 6025, 8986,
    6823, 7799, 7796, 7793, 6091, 6928, 8108, 9013, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715,
    8826, 9036, 8476, 7470, 6549, 10029, 8476, 10479, 8530, 9223, 9066, 6389, 5819, 8476, 6430, 9223, 8196, 6389, 6350, 7976, 9082, 7806, 9103, 4567, 7771,
    7805, 8866, 10341, 9677, 6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 7277, 9123, 9507, 7856, 10029, 8476, 10479, 9223, 9223, 5610,
    6389, 4480, 8476, 6430, 9223, 8196, 6389, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 10341, 9677, 6389, 7468, 7806, 8911, 9145, 9167, 9675, 6025,
    7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    5725, 5739, 9188, 10871, 9218, 9240, 9263, 8476, 10479, 5976, 7652, 5610, 9279, 9299, 8476, 9320, 9223, 9374, 9399, 4565, 9418, 7661, 7806, 8997, 4567,
    9222, 7805, 6389, 10341, 9677, 6389, 8334, 10674, 8911, 9676, 4480, 9675, 8629, 6980, 7802, 10442, 9451, 7793, 6091, 9484, 8108, 10334, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4182, 4196, 9523, 8138, 9566, 4766, 10029, 10472, 8414, 9603, 9223,
    9654, 9728, 4480, 8476, 6430, 9223, 8196, 6389, 4565, 9693, 10403, 9719, 10135, 8704, 5897, 9753, 8855, 10341, 9787, 9814, 7468, 7806, 6556, 7533, 6857,
    9675, 6025, 9843, 7802, 8063, 8788, 7223, 10627, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 5594, 9873, 9888, 9902, 9927, 6283, 10029, 9129, 9963, 6432, 9435, 9999, 9762, 10023, 5564, 10045, 10081, 10101, 10127, 7500, 6653, 9223,
    10059, 6389, 10151, 10177, 10224, 10250, 10284, 9677, 10300, 4531, 7696, 5781, 8459, 10753, 10320, 10357, 7806, 7802, 7799, 7687, 10384, 10419, 6928, 10635,
    10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 4050, 4064, 10458, 8476, 7470, 6549, 10029,
    8476, 10479, 9223, 9223, 5610, 6389, 4480, 6770, 10495, 9983, 9335, 6389, 10522, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 9020, 10724, 6389, 7468,
    7806, 8911, 9676, 4480, 10547, 10584, 7806, 7802, 7799, 7796, 10605, 6091, 9798, 10651, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 7277, 8476, 8674, 8275, 10029, 10699, 10479, 10721, 9223, 10740, 6389, 4480, 8818, 6430, 10830, 8196,
    6850, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 10341, 9677, 6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091,
    6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 7277, 8476, 7470, 6549,
    10029, 8476, 10479, 9223, 9223, 5610, 6389, 4480, 8476, 6430, 9223, 8196, 6389, 4565, 7976, 9223, 7806, 6389, 4567, 9358, 6662, 10849, 10341, 9677, 6389,
    7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 7277, 10865, 10887, 10189, 10029, 8476, 10479, 9223, 9224, 5610, 6389, 10920, 8476, 6430, 9223, 8196,
    6389, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 10341, 9677, 6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091,
    6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8715, 7606, 7277, 8476, 7470,
    10913, 8287, 8476, 10479, 9223, 9223, 5610, 6389, 4480, 8476, 6430, 9223, 8196, 6389, 4565, 7976, 10936, 7806, 10956, 4567, 9222, 7805, 6389, 10341, 9677,
    6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 7409, 10975, 10984, 8476, 3402, 3504, 3682, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525,
    3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866,
    3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 6194, 8476, 5697, 8476, 7470,
    6549, 10029, 8476, 7973, 9223, 9223, 5847, 6389, 4480, 8476, 6430, 9223, 8196, 6389, 4565, 7976, 9223, 7806, 6389, 4567, 9222, 7805, 6389, 10341, 9677,
    6389, 7468, 7806, 8911, 9676, 4480, 9675, 6025, 7806, 7802, 7799, 7796, 7793, 6091, 6928, 8108, 10334, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
    8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8247, 11000, 11009, 8476, 3402, 3504, 4356, 9050, 3395, 3712, 3423, 3445, 3718, 3429, 3468, 3494, 3525,
    3609, 3521, 3850, 3541, 3581, 3598, 3582, 3625, 3641, 3657, 3649, 3673, 3909, 3905, 3698, 3407, 3452, 3734, 3773, 3789, 3827, 3801, 3843, 3505, 3553, 3866,
    3874, 3565, 3890, 3749, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 11298, 11298, 11298, 11298,
    11298, 11298, 11298, 11298, 11298, 11298, 11298, 11298, 11298, 11298, 11298, 11298, 41, 11298, 11298, 11298, 11298, 11298, 11298, 11298, 11298, 0, 0, 0, 0,
    0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 46, 0, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 79, 97, 79, 97, 97, 97, 0, 208896,
    211968, 0, 0, 225280, 0, 0, 0, 0, 0, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 181248, 141312, 141312,
    186368, 141312, 141312, 204800, 205824, 141312, 141312, 208896, 141312, 211968, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 225280,
    141312, 141312, 141312, 136192, 0, 225280, 141312, 141312, 141312, 0, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0,
    0, 0, 200704, 179200, 173056, 141312, 0, 0, 0, 175104, 184320, 0, 0, 0, 0, 206848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 33792, 33792, 0, 141312,
    141312, 175104, 141312, 141312, 141312, 141312, 141312, 184320, 141312, 141312, 141312, 141312, 141312, 141312, 0, 141312, 141312, 141312, 141312, 141312,
    141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 194560, 141312, 141312, 141312, 141312, 206848, 141312, 141312, 141312,
    141312, 141312, 141312, 141312, 141312, 141312, 197632, 0, 0, 0, 0, 0, 0, 0, 178176, 141312, 141312, 178176, 141312, 141312, 141312, 141312, 141312, 141312,
    141312, 141312, 0, 141312, 141312, 185344, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 174080, 141312, 141312, 141312, 141312, 219136,
    174080, 141312, 141312, 187392, 141312, 141312, 141312, 141312, 197632, 141312, 141312, 203776, 141312, 209920, 141312, 141312, 141312, 141312, 141312,
    141312, 141312, 221184, 222208, 223232, 141312, 141312, 141312, 141312, 141312, 178176, 141312, 141312, 141312, 141312, 141312, 0, 141312, 175104, 141312,
    141312, 141312, 141312, 141312, 184320, 141312, 141312, 141312, 221184, 222208, 223232, 141312, 141312, 141312, 0, 0, 0, 0, 0, 0, 228352, 0, 226304, 0,
    141312, 141312, 141312, 180224, 141312, 141312, 141312, 141312, 141312, 190464, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
    141312, 141312, 226304, 141312, 228352, 141312, 141312, 141312, 180224, 141312, 141312, 141312, 228352, 0, 0, 191488, 0, 217088, 0, 0, 0, 141312, 141312,
    141312, 141312, 141312, 141312, 141312, 141312, 0, 135168, 176128, 199680, 210944, 0, 41, 41, 141312, 186368, 0, 0, 0, 0, 0, 141312, 141312, 141312, 181248,
    141312, 141312, 186368, 141312, 141312, 141312, 141312, 141312, 141312, 189440, 141312, 141312, 141312, 195584, 196608, 141312, 198656, 141312, 202752,
    141312, 204800, 205824, 141312, 141312, 208896, 179200, 141312, 141312, 141312, 141312, 200704, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
    141312, 173056, 141312, 141312, 141312, 141312, 141312, 141312, 216064, 216064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 243, 70, 70, 70, 179200, 141312,
    141312, 141312, 141312, 200704, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0, 201728, 218112, 141312, 177152, 141312, 141312, 141312,
    192512, 201728, 207872, 214016, 141312, 218112, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 227328, 141312, 182272, 141312, 141312, 141312,
    141312, 141312, 141312, 141312, 141312, 0, 135168, 176128, 199680, 210944, 0, 143471, 143471, 177152, 141312, 141312, 141312, 192512, 201728, 207872,
    214016, 141312, 218112, 141312, 141312, 141312, 0, 141312, 182272, 141312, 227328, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
    141312, 141312, 141312, 141312, 141312, 0, 137216, 224256, 0, 0, 187392, 0, 141312, 141312, 141312, 141312, 185344, 141312, 141312, 141312, 141312, 141312,
    141312, 220160, 141312, 141312, 188416, 141312, 141312, 141312, 141312, 220160, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 219136, 141312,
    193536, 215040, 141312, 141312, 193536, 215040, 141312, 183296, 141312, 183296, 141312, 141312, 141312, 141312, 141312, 191488, 141312, 141312, 141312,
    141312, 212992, 141312, 141312, 217088, 141312, 141312, 141312, 141312, 141312, 141312, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 0, 0, 0, 41, 41,
    41, 44, 45, 140288, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 7281, 45, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 46, 0, 59, 59, 59, 59, 59, 59, 59, 59,
    59, 59, 80, 98, 80, 98, 98, 98, 44, 0, 0, 0, 0, 0, 0, 189440, 0, 195584, 196608, 0, 0, 202752, 204800, 205824, 0, 14336, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 34867, 34867, 14336, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 46, 0, 64, 64,
    64, 64, 64, 64, 64, 64, 64, 64, 86, 104, 86, 104, 104, 104, 45, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 7282, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 46,
    47, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 74, 92, 74, 92, 92, 92, 0, 45, 0, 0, 0, 0, 0, 189440, 0, 195584, 196608, 0, 0, 202752, 204800, 205824, 35, 35,
    15395, 35, 35, 35, 35, 35, 35, 42, 35, 35, 35, 35, 35, 35, 15395, 35, 15395, 35, 15395, 15395, 35, 35, 35, 15395, 15395, 15395, 15395, 0, 0, 0, 0, 0, 0, 0,
    143471, 143471, 143471, 44, 45, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 46, 48, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 84, 102, 84, 102, 102, 102, 0,
    0, 0, 17408, 0, 0, 0, 0, 0, 41, 17408, 17408, 17408, 17408, 17408, 17408, 17408, 17408, 17408, 17408, 0, 0, 17408, 0, 0, 17408, 17408, 0, 0, 0, 0, 0, 0, 0,
    41, 41, 28672, 44, 45, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 37888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 46, 0, 53, 53, 18432, 18432, 19456, 18432,
    19456, 18432, 18432, 18432, 18432, 18432, 0, 8279, 18432, 8279, 8279, 8279, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
    22528, 0, 0, 0, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 22528, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 225280, 141312,
    141312, 141312, 0, 8192, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 0, 135168, 176128, 199680, 210944, 0, 0, 0, 20480,
    20480, 21504, 20480, 21504, 20480, 20480, 20480, 20480, 20480, 0, 0, 0, 0, 20480, 20480, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 70, 70, 70, 70, 70, 70, 408, 141312, 211968, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 225280, 141312, 141312, 141312,
    136192, 314, 23552, 23552, 23552, 23552, 23552, 23552, 23552, 23552, 23552, 23552, 0, 0, 0, 0, 23552, 23552, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 70, 70, 70, 70, 406, 407, 70, 88, 485, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 88, 0, 499, 0, 0, 0, 0, 0, 0,
    70, 70, 70, 70, 70, 70, 70, 158, 70, 70, 70, 70, 70, 581, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 592, 88, 0, 0, 0, 0, 0, 0, 70, 544, 70, 70, 70, 547,
    70, 70, 70, 70, 70, 180, 0, 88, 183, 88, 88, 88, 88, 88, 201, 88, 88, 88, 595, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
    88, 88, 88, 621, 88, 88, 622, 88, 88, 88, 88, 88, 0, 70, 629, 70, 70, 70, 70, 634, 70, 70, 70, 88, 638, 88, 88, 88, 88, 643, 88, 0, 0, 0, 0, 0, 0, 110, 41,
    41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 39, 0, 41, 0, 0, 46, 0, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 81, 99, 81, 99, 99, 99, 24681, 0, 0, 0, 0, 0, 0, 0,
    41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 70, 70, 405, 70, 70, 70, 70, 70, 70, 70, 585, 70, 70, 70, 70, 70, 70, 88, 593, 0, 0, 0, 0, 0, 26692,
    26692, 26692, 26692, 26692, 0, 0, 0, 0, 26692, 26692, 0, 0, 0, 27648, 0, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312, 141312,
    141312, 0, 135168, 176128, 199680, 210944, 0, 41, 0, 106, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 403, 70, 70, 70, 70,
    70, 70, 0, 88, 88, 88, 88, 88, 88, 88, 202, 88, 0, 0, 0, 0, 36, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 40960, 40960, 0, 0, 16384, 29696,
    0, 0, 0, 0, 143472, 16384, 143472, 44, 45, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 134, 0, 0, 0, 70, 70, 145, 148, 70, 154, 70, 70, 70, 164,
    167, 0, 208896, 211968, 0, 0, 225280, 0, 0, 0, 0, 0, 0, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452,
    204940, 205964, 141452, 141452, 209036, 141452, 212108, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 227468, 141494, 182454, 141494,
    141494, 141494, 141494, 141494, 141494, 225420, 141452, 141452, 141452, 0, 0, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 141494,
    141494, 0, 137216, 224256, 0, 0, 187392, 0, 189622, 141494, 141494, 141494, 195766, 196790, 141494, 198838, 141494, 202934, 141494, 204982, 206006, 141494,
    141494, 209078, 141494, 212150, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 225462, 141494, 141494, 141494, 136192, 0, 0, 0, 0, 0, 0,
    237, 0, 0, 0, 0, 242, 70, 70, 70, 247, 0, 141312, 141452, 175244, 141452, 141452, 141452, 141452, 141452, 184460, 141452, 141452, 141452, 141452, 141452,
    141452, 181, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 0, 0, 0, 200704, 179200, 173196, 141452, 141452, 194700, 141452,
    141452, 141452, 141452, 206988, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 189580, 141452, 141452, 141452, 195724, 196748,
    141452, 198796, 141452, 202892, 197632, 0, 0, 0, 0, 0, 0, 0, 178176, 141452, 141452, 178316, 141452, 141452, 141452, 141452, 220300, 141494, 141494, 188598,
    141494, 141494, 141494, 141494, 220342, 141452, 141452, 141452, 141452, 141452, 187532, 141452, 141452, 141452, 141452, 197772, 141452, 141452, 203916,
    141452, 210060, 141452, 141452, 141452, 141452, 221324, 222348, 223372, 141452, 141452, 141452, 141494, 141494, 178358, 141494, 141494, 141494, 141494,
    141494, 141494, 141494, 141494, 0, 135168, 176128, 199680, 210944, 0, 0, 143472, 187574, 141494, 141494, 141494, 141494, 197814, 141494, 141494, 203958,
    141494, 210102, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 0, 141452, 141452, 185484, 141452, 141452, 141452, 141452, 141494, 221366,
    222390, 223414, 141494, 141494, 141494, 0, 0, 0, 0, 0, 0, 228352, 0, 226304, 0, 141452, 141452, 141452, 180364, 141452, 141452, 141452, 141452, 141452,
    190604, 141452, 141452, 141452, 141452, 141452, 0, 141494, 175286, 141494, 141494, 141494, 141494, 141494, 184502, 141494, 141494, 228534, 0, 0, 191488, 0,
    217088, 0, 0, 0, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 226444, 141452, 228492, 141494, 141494, 141494, 180406, 141494, 141494, 141494,
    141452, 191628, 141452, 141452, 141452, 141452, 213132, 141452, 141452, 217228, 141452, 141452, 141452, 141494, 141494, 141494, 141494, 141494, 191670,
    141494, 141494, 141494, 141494, 213174, 141494, 141494, 217270, 141494, 141494, 141494, 186368, 0, 0, 0, 0, 0, 141452, 141452, 141452, 181388, 141452,
    141452, 186508, 141452, 141452, 141494, 141452, 141494, 141452, 141494, 216204, 216246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 179340, 141452,
    141452, 141452, 141452, 200844, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 173238, 141494, 141494, 141494, 219318, 141452, 193676,
    215180, 141452, 141494, 193718, 215222, 141494, 183436, 141452, 183478, 141494, 141494, 190646, 141494, 141494, 141494, 141494, 141494, 141494, 141494,
    141494, 141494, 141494, 141494, 226486, 141494, 141494, 141494, 141494, 141494, 194742, 141494, 141494, 141494, 141494, 207030, 141494, 141494, 141494,
    141494, 141494, 0, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141494, 141494, 141494, 181430, 141494, 141494, 186550, 141494,
    179382, 141494, 141494, 141494, 141494, 200886, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 141494, 0, 201728, 218112, 141452, 177292, 141452,
    141452, 141452, 192652, 201868, 208012, 214156, 141452, 218252, 141452, 141452, 141452, 141494, 141494, 185526, 141494, 141494, 141494, 141494, 141494,
    141494, 220160, 141452, 141452, 188556, 141452, 177334, 141494, 141494, 141494, 192694, 201910, 208054, 214198, 141494, 218294, 141494, 141494, 141494, 0,
    141452, 182412, 141494, 227510, 0, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141452, 141494, 141494, 141494, 141494, 141494, 141494,
    174220, 141452, 141452, 141452, 141452, 219276, 174262, 141494, 30770, 30770, 30770, 30770, 30770, 30770, 30770, 30770, 30770, 30770, 0, 0, 0, 0, 0, 0, 0,
    41, 41, 41, 44, 45, 140288, 0, 0, 0, 31744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 0, 33792, 33792, 33792, 33792, 33792, 33792, 33792, 33792, 33792,
    33792, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 13312, 32768, 35840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 34867, 34867, 34867,
    34867, 34867, 34867, 34867, 34867, 34867, 34867, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 0, 0, 36864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    45, 45, 45, 0, 0, 37888, 37888, 37888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 0, 328, 38912, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 0,
    0, 0, 0, 0, 0, 40, 41, 0, 0, 46, 0, 63, 63, 70, 70, 70, 70, 8470, 242, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 627, 70, 70, 0, 0, 0, 0, 0,
    39936, 39936, 39936, 39936, 39936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 44, 0, 0, 0, 40960, 40960, 40960, 40960, 40960, 40960, 40960, 40960, 40960, 40960,
    0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0,
    0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 46, 0, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 83, 101, 83, 101, 101,
    101, 0, 0, 138, 0, 139, 70, 70, 143, 70, 70, 70, 70, 70, 70, 70, 165, 70, 169, 70, 172, 70, 70, 0, 88, 88, 185, 88, 88, 88, 88, 88, 88, 88, 88, 574, 0, 576,
    0, 0, 0, 70, 70, 88, 207, 88, 211, 88, 214, 88, 88, 0, 0, 0, 0, 0, 0, 41, 41, 70, 70, 358, 70, 70, 8470, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
    312, 88, 0, 0, 0, 0, 0, 0, 0, 399, 0, 401, 401, 70, 70, 404, 70, 70, 70, 70, 0, 0, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 496, 88, 88, 457, 70,
    459, 460, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 353, 70, 70, 88, 88, 88, 679, 680, 88, 682, 88, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 469, 70, 0, 67, 0, 67, 0, 69, 69, 69, 69, 69, 72, 90, 72, 90, 90, 90, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 116, 70, 70, 70, 173, 70, 70,
    0, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 495, 88, 88, 88, 70, 70, 70, 251, 70, 70, 70, 70, 256, 70, 70, 70, 70, 70, 70, 70, 70, 70, 258, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 8470, 242, 279, 88, 88, 88, 88, 88, 88, 287, 88, 88, 0, 70, 70, 649, 70, 70, 70, 70, 70, 70, 88, 88, 658, 88, 88, 88, 292,
    88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 70, 70, 0, 242, 70, 70, 70, 70, 70, 70, 335, 70, 70, 70, 70, 70, 70, 70, 70, 70, 268, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 513, 70, 70, 70, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 430, 431, 88, 433, 70, 551, 552, 70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88,
    88, 88, 70, 70, 70, 70, 88, 88, 567, 568, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0, 70, 70, 70, 70, 150, 70, 70, 70, 70, 70, 70, 88, 88, 678, 88, 88, 88, 88, 88,
    0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 615, 70, 88, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 73, 91, 73, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 41, 41,
    41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 157, 70, 70, 70,
    70, 70, 70, 0, 88, 88, 186, 88, 88, 88, 88, 88, 88, 88, 88, 623, 88, 88, 88, 88, 0, 70, 70, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24681,
    24681, 24681, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 244, 70, 70, 70, 70, 70, 70, 0, 88, 184, 88, 88, 88, 88, 198, 203, 205, 70, 70, 70, 263, 70, 70, 265,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 590, 70, 88, 88, 70, 70, 70, 70, 8470, 242, 280, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 604, 88, 0,
    0, 301, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0, 0, 394, 70, 472, 70, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 88, 88, 70,
    714, 70, 70, 88, 525, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 536, 92, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0,
    0, 0, 0, 239, 0, 0, 242, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 261, 70, 0, 0, 0, 0, 0, 70, 70, 70, 146, 70, 70, 155, 70, 162, 70, 166, 70,
    70, 171, 174, 176, 70, 0, 88, 88, 88, 188, 88, 88, 197, 88, 204, 88, 208, 88, 88, 213, 216, 218, 88, 0, 224, 0, 0, 0, 225, 41, 41, 0, 0, 226, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 106, 106, 106, 70, 70, 70, 70, 252, 70, 70, 255, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 350, 351, 70, 70, 70, 70, 262, 70, 70, 70,
    70, 70, 70, 70, 70, 267, 70, 70, 70, 70, 70, 70, 0, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 577, 0, 0, 70, 70, 70, 275, 70, 70, 8470, 242, 88, 88, 88, 88,
    88, 88, 88, 88, 288, 88, 0, 0, 0, 0, 0, 0, 502, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 616, 88, 88, 291, 88, 88, 88, 88, 88, 88, 88, 88,
    298, 88, 88, 88, 88, 88, 0, 70, 70, 70, 669, 70, 70, 70, 70, 70, 88, 88, 88, 88, 303, 88, 88, 88, 88, 88, 88, 88, 311, 88, 88, 224, 0, 0, 0, 0, 0, 0, 400,
    0, 0, 70, 70, 70, 70, 70, 70, 70, 477, 70, 88, 88, 88, 88, 88, 88, 88, 88, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 18432, 18432, 0, 0, 318, 0, 0,
    319, 320, 0, 322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 49, 49, 0, 242, 330, 70, 70, 70, 70, 70, 70, 70, 70, 70, 338, 70, 70, 341, 70, 70, 70, 70, 345,
    70, 70, 347, 348, 349, 70, 70, 70, 70, 354, 70, 70, 70, 70, 70, 476, 70, 70, 70, 88, 88, 88, 88, 88, 88, 88, 0, 451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
    0, 0, 0, 0, 356, 70, 70, 359, 70, 8470, 361, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 626, 0, 70, 70, 369, 88, 88, 372, 88, 88, 88, 88, 376, 88, 88,
    378, 379, 380, 88, 88, 0, 70, 648, 70, 70, 70, 70, 70, 70, 70, 88, 657, 88, 88, 0, 647, 70, 70, 70, 70, 70, 70, 70, 70, 656, 88, 88, 88, 88, 88, 88, 374,
    88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 602, 88, 88, 88, 0, 0, 88, 88, 385, 88, 387, 88, 88, 390, 88, 0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 46,
    0, 57, 57, 409, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 418, 419, 70, 70, 70, 70, 70, 515, 70, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 70,
    70, 70, 70, 70, 70, 88, 88, 70, 70, 70, 70, 514, 70, 70, 70, 70, 70, 70, 70, 70, 88, 88, 88, 429, 88, 88, 88, 88, 88, 0, 538, 0, 540, 541, 542, 70, 70, 545,
    70, 70, 70, 70, 548, 70, 70, 70, 70, 70, 635, 70, 70, 637, 88, 88, 88, 88, 88, 88, 644, 550, 70, 70, 70, 70, 555, 557, 70, 88, 88, 561, 88, 88, 88, 88, 564,
    88, 566, 88, 88, 88, 88, 571, 573, 88, 0, 0, 0, 0, 0, 70, 579, 70, 631, 70, 70, 70, 70, 70, 70, 88, 88, 88, 640, 88, 88, 88, 88, 88, 88, 88, 530, 88, 88,
    88, 88, 88, 88, 88, 88, 0, 70, 686, 70, 70, 70, 70, 70, 88, 88, 646, 70, 70, 70, 70, 70, 70, 70, 70, 655, 88, 88, 88, 88, 88, 88, 88, 572, 88, 0, 0, 0, 0,
    0, 70, 70, 70, 70, 149, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 664, 0, 70, 70, 668, 70, 70, 70, 70, 70, 70, 88, 694, 88, 88, 88, 88, 88, 88, 88, 0, 70, 70,
    70, 70, 670, 671, 70, 673, 70, 88, 88, 677, 88, 88, 88, 88, 88, 88, 0, 685, 70, 70, 687, 70, 70, 70, 70, 70, 70, 556, 70, 88, 88, 88, 88, 562, 88, 88, 88,
    88, 88, 88, 389, 88, 88, 0, 0, 0, 0, 0, 0, 0, 0, 504, 70, 70, 70, 70, 70, 70, 70, 70, 693, 88, 88, 695, 88, 88, 88, 88, 88, 0, 70, 70, 70, 70, 651, 652,
    653, 654, 70, 88, 88, 88, 88, 70, 718, 88, 720, 88, 88, 88, 724, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 698, 88, 88, 0, 70, 702, 70, 70, 93, 0, 0,
    0, 0, 0, 109, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 14336, 0, 0, 0, 0, 14336, 14336, 14336, 88, 88, 88, 386, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0,
    0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 70, 70, 70, 70, 475, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 88, 88, 713, 70, 70, 70, 70, 70, 719, 88, 88, 88, 88, 88,
    70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 696, 697, 88, 88, 88, 0, 701, 70, 70, 70, 88, 88, 88, 88, 733, 70, 70, 70, 735, 88, 88, 88, 70, 70, 88, 88, 721,
    722, 88, 88, 70, 70, 70, 70, 70, 70, 88, 88, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 76, 94, 76, 94, 94, 94, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0,
    0, 0, 0, 0, 0, 0, 36, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 98304, 98304, 70, 70, 70, 70, 583, 70, 70, 70, 586, 70, 70, 70, 70, 70, 88, 88, 88,
    88, 88, 215, 88, 88, 0, 0, 0, 0, 0, 0, 41, 41, 88, 88, 88, 88, 597, 88, 88, 88, 600, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 730, 731, 88, 88, 70, 70, 70, 70, 88, 88, 88, 88, 70, 70, 88, 88, 88, 88, 88, 388, 88, 88, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 23552,
    23552, 0, 0, 0, 0, 0, 70, 70, 144, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 588, 70, 70, 70, 88, 88, 0, 0, 0, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    133, 0, 0, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 77, 95, 77, 95, 95, 95, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 70, 88, 70, 88, 88, 88, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38912, 38912, 38912, 0, 0, 0, 0, 0, 70, 70, 70, 147,
    70, 70, 70, 70, 70, 70, 70, 70, 266, 70, 70, 70, 70, 70, 70, 70, 70, 415, 70, 70, 70, 70, 70, 70, 420, 70, 70, 70, 277, 8470, 242, 88, 88, 88, 283, 88, 88,
    88, 88, 88, 88, 88, 88, 684, 70, 70, 70, 70, 70, 70, 70, 558, 88, 560, 88, 88, 88, 563, 88, 88, 88, 384, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0, 0, 0,
    503, 70, 70, 506, 70, 70, 70, 70, 70, 70, 512, 70, 70, 70, 70, 516, 70, 70, 518, 70, 520, 88, 88, 88, 88, 88, 88, 449, 450, 0, 0, 0, 454, 0, 0, 456, 0, 537,
    0, 0, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 470, 70, 70, 70, 70, 554, 70, 70, 70, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 88, 88, 660, 661, 662, 663, 88, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 88, 479, 480, 88, 88, 88, 88,
    704, 70, 70, 70, 88, 88, 88, 709, 710, 88, 88, 88, 70, 70, 70, 70, 70, 70, 0, 88, 88, 88, 88, 193, 88, 88, 88, 88, 88, 88, 88, 599, 88, 88, 88, 88, 88, 88,
    606, 0, 739, 740, 70, 88, 70, 88, 70, 88, 0, 0, 0, 0, 0, 0, 0, 0, 70, 70, 70, 70, 70, 509, 70, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 78, 96, 78, 96, 96,
    96, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 115, 0, 0, 0, 0, 0, 37, 0, 0, 0, 41, 0, 0, 46, 0, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 71, 89, 71, 89,
    89, 89, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 88, 88, 88, 293, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
    88, 88, 300, 88, 0, 242, 70, 70, 70, 70, 333, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 519, 70, 88, 88, 88, 342, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 355, 70, 70, 70, 70, 70, 8470, 88, 88, 88, 88, 364, 88, 88, 88, 88, 88, 0, 666, 70, 70, 70, 70, 70, 70, 70, 70, 675, 88, 88, 88, 88,
    373, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 299, 88, 88, 70, 70, 70, 70, 707, 88, 88, 88, 88, 88, 88, 88, 70, 70, 70, 70, 88, 88, 88, 88, 70,
    70, 88, 88, 97, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 93, 75, 93, 93, 93, 248, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 88, 88, 523, 70, 70, 70, 70, 264, 70, 70, 70, 70, 70, 70, 70, 70, 70, 273, 70, 70, 70, 70, 70, 8470, 88,
    88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 605, 0, 0, 70, 70, 70, 70, 8470, 242, 88, 88, 88, 88, 284, 88, 88, 88, 88, 88, 88, 88, 308, 88, 88, 88, 88,
    88, 88, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3072, 3072, 0, 242, 70, 70, 70, 70, 70, 334, 70, 70, 70, 337, 70, 70, 70, 70, 70, 70, 0, 88,
    88, 88, 88, 194, 88, 88, 88, 88, 88, 88, 221, 88, 0, 0, 0, 0, 0, 0, 41, 41, 70, 70, 70, 70, 70, 8470, 88, 88, 88, 88, 88, 365, 88, 88, 88, 368, 70, 422, 70,
    70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 432, 88, 0, 0, 0, 0, 0, 0, 543, 70, 70, 70, 70, 70, 70, 70, 70, 70, 257, 70, 70, 70, 70, 70, 70, 446, 88, 88,
    88, 88, 88, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 645, 88, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 483, 98, 0, 0, 0,
    0, 108, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 238, 0, 240, 241, 242, 70, 70, 246, 70, 0, 0, 0, 117, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 135,
    136, 0, 0, 0, 0, 70, 141, 70, 70, 70, 70, 70, 159, 70, 70, 70, 70, 70, 70, 584, 70, 70, 70, 70, 589, 70, 70, 88, 88, 316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70, 465, 70, 70, 70, 70, 70, 70, 0, 70, 70, 70, 70, 461, 462, 70, 464, 70, 70, 70,
    70, 468, 70, 70, 70, 70, 70, 254, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 417, 70, 70, 70, 70, 70, 70, 474, 70, 70, 70, 70, 70, 88, 88, 88, 88, 481,
    482, 88, 0, 0, 0, 0, 0, 501, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 613, 70, 70, 70, 70, 88, 484, 88, 88, 88, 88, 488, 88, 88, 88, 88, 88, 494, 88, 88,
    88, 88, 88, 88, 295, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 441, 88, 88, 88, 88, 88, 88, 526, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0,
    628, 70, 70, 70, 70, 553, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 88, 88, 70, 70, 715, 716, 565, 88, 88, 88, 569, 88, 88, 88, 88, 0, 0, 0, 0, 0, 70, 70, 70,
    70, 152, 70, 70, 70, 70, 70, 70, 70, 580, 70, 70, 70, 70, 70, 70, 70, 587, 70, 70, 70, 70, 88, 88, 88, 88, 88, 448, 88, 0, 0, 0, 453, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 41, 0, 0, 46, 0, 0, 0, 88, 594, 88, 88, 88, 88, 88, 88, 88, 601, 88, 88, 88, 88, 0, 0, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70, 549, 0, 70, 70, 70,
    609, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 88, 427, 88, 88, 88, 88, 88, 88, 88, 88, 619, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 70, 70, 70, 70, 70,
    70, 690, 99, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 100, 82, 100, 100, 100, 70, 70, 70,
    175, 177, 70, 0, 88, 88, 187, 190, 88, 196, 88, 88, 88, 88, 88, 88, 489, 88, 88, 88, 493, 88, 88, 88, 88, 88, 88, 88, 490, 88, 88, 88, 88, 88, 88, 88, 88,
    88, 315, 315, 0, 0, 0, 0, 0, 206, 209, 88, 88, 88, 217, 219, 88, 0, 0, 0, 0, 0, 0, 41, 41, 88, 88, 88, 304, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0,
    0, 0, 70, 70, 70, 70, 70, 70, 360, 8470, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 442, 443, 88, 88, 88, 88, 88, 88, 437, 88, 88, 88, 88, 88, 88, 88,
    88, 88, 88, 88, 88, 88, 313, 0, 0, 0, 607, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 617, 630, 70, 70, 70, 70, 70, 70, 70, 88, 88, 639, 88, 88,
    88, 88, 88, 88, 88, 439, 88, 88, 88, 88, 88, 88, 444, 88, 70, 88, 741, 742, 70, 88, 70, 88, 0, 0, 0, 0, 0, 0, 0, 0, 70, 505, 70, 70, 70, 70, 70, 100, 0, 0,
    0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 0, 189440, 0, 195584, 196608, 0, 0, 202752, 204800, 205824, 70, 70, 276, 70, 8470, 242, 88, 88, 88,
    88, 88, 88, 88, 88, 88, 290, 70, 70, 70, 70, 412, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 259, 70, 70, 70, 88, 88, 88, 436, 88, 88, 88, 88, 88, 88,
    88, 88, 88, 88, 88, 88, 88, 88, 381, 382, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233, 0, 0, 0, 70, 70, 70, 582, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 88, 88, 428, 88, 88, 88, 88, 88, 88, 88, 88, 596, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0, 578, 70, 101, 0, 0, 0, 0, 0, 0, 0, 41,
    41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 38, 0, 0, 41, 0, 0, 46, 0, 56, 65, 0, 137, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    274, 168, 170, 70, 70, 178, 70, 0, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 625, 88, 0, 70, 70, 88, 88, 210, 212, 88, 88, 220, 88, 0, 0, 0, 0, 0, 0, 41,
    41, 88, 88, 88, 294, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 136192, 0, 88, 88, 302, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0, 0,
    393, 0, 0, 0, 242, 70, 70, 331, 70, 70, 70, 70, 70, 70, 70, 70, 70, 340, 70, 70, 70, 70, 70, 8470, 88, 88, 88, 88, 88, 88, 88, 88, 367, 88, 0, 0, 0, 500, 0,
    0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 467, 70, 70, 70, 70, 70, 70, 70, 70, 8470, 88, 88, 362, 88, 88, 88, 88, 88, 88, 88, 88, 88, 575, 0, 0,
    0, 0, 70, 70, 88, 88, 371, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 223, 315, 0, 395, 396, 0, 0, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 414,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 269, 270, 70, 70, 70, 70, 676, 88, 88, 88, 88, 88, 88, 88, 0, 70, 70, 70, 70, 70, 70, 70, 425, 88, 88, 88, 88, 88,
    88, 88, 88, 0, 135168, 0, 0, 0, 0, 41, 41, 717, 70, 88, 88, 88, 88, 723, 88, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 570, 88, 88, 88, 0, 0, 0, 0, 0, 70,
    70, 70, 70, 151, 70, 70, 70, 70, 70, 70, 102, 0, 0, 0, 107, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 122, 0, 127, 0, 130, 0, 132, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 41, 0, 0, 46, 0, 55, 55, 126, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 160, 70, 70, 70, 70, 70, 70, 636, 70, 88, 88, 88, 88, 88, 88, 88, 88, 0,
    224, 0, 0, 0, 0, 41, 41, 70, 249, 70, 70, 253, 70, 70, 70, 70, 70, 70, 70, 70, 70, 260, 70, 70, 70, 70, 70, 8470, 88, 88, 88, 88, 88, 88, 366, 88, 88, 88,
    88, 88, 88, 438, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 137216, 0, 0, 0, 0, 0, 70, 70, 70, 70, 8470, 242, 88, 88, 282, 88, 88, 285, 88, 88, 289, 88, 0, 0,
    539, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 88, 88, 88, 0, 0, 0, 397, 0, 0, 0, 0, 0, 402, 70, 70, 70, 70, 70, 70, 0, 88, 88, 88,
    88, 88, 88, 88, 199, 88, 421, 70, 70, 70, 70, 70, 424, 70, 426, 88, 88, 88, 88, 88, 88, 88, 88, 296, 88, 88, 88, 88, 88, 88, 88, 88, 223, 106, 0, 0, 0, 0,
    41, 41, 70, 70, 473, 70, 70, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 88, 88, 297, 88, 88, 88, 88, 88, 88, 88, 88, 309, 88, 88, 88, 88, 88, 0, 0, 511, 70,
    70, 70, 70, 70, 70, 70, 517, 70, 70, 70, 70, 88, 88, 88, 88, 88, 88, 70, 70, 70, 70, 728, 70, 88, 88, 88, 88, 88, 88, 528, 88, 88, 88, 88, 88, 88, 88, 534,
    88, 88, 88, 88, 88, 88, 529, 88, 88, 88, 88, 533, 88, 88, 535, 88, 70, 70, 632, 633, 70, 70, 70, 70, 88, 88, 88, 88, 641, 642, 88, 88, 88, 88, 88, 665, 70,
    70, 70, 70, 70, 70, 672, 70, 674, 88, 66, 66, 63, 66, 63, 66, 66, 66, 66, 66, 85, 103, 85, 103, 103, 103, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0,
    0, 0, 0, 0, 123, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 20480, 20480, 0, 0, 0, 0, 0, 70, 142, 70, 70, 70, 70, 156, 161, 163, 70, 70, 70, 70, 70,
    346, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 271, 70, 70, 70, 0, 0, 0, 235, 236, 0, 0, 233, 0, 0, 0, 242, 70, 245, 70, 70, 70, 70, 70, 413, 70, 70,
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 352, 70, 70, 70, 70, 70, 70, 70, 8470, 242, 88, 281, 88, 88, 88, 88, 88, 88, 88, 88, 88, 377, 88, 88, 88, 88, 88,
    88, 88, 88, 88, 88, 305, 306, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0, 0, 41, 41, 329, 242, 70, 70, 70, 332, 70, 70, 70, 70, 70, 70, 70, 339, 70, 70,
    70, 70, 70, 423, 70, 70, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 70, 70, 70, 703, 70, 70, 70, 344, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 521,
    88, 88, 70, 357, 70, 70, 70, 8470, 88, 88, 88, 363, 88, 88, 88, 88, 88, 88, 88, 88, 25600, 135391, 0, 0, 0, 0, 41, 41, 88, 370, 88, 88, 88, 88, 88, 375, 88,
    88, 88, 88, 88, 88, 88, 88, 88, 440, 88, 88, 88, 88, 88, 445, 88, 88, 88, 88, 447, 88, 88, 0, 0, 452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 45, 0, 0, 0, 0,
    458, 70, 70, 70, 70, 70, 70, 70, 70, 70, 466, 70, 70, 70, 70, 70, 70, 0, 88, 88, 88, 88, 195, 88, 88, 88, 88, 88, 88, 307, 88, 88, 88, 88, 88, 88, 88, 0, 0,
    0, 0, 0, 455, 0, 0, 0, 471, 70, 70, 70, 70, 70, 70, 70, 70, 478, 88, 88, 88, 88, 88, 88, 88, 222, 0, 0, 0, 0, 0, 0, 41, 41, 88, 88, 88, 486, 88, 88, 88, 88,
    491, 88, 88, 88, 88, 88, 88, 88, 88, 531, 88, 88, 88, 88, 88, 88, 88, 88, 88, 492, 88, 88, 88, 88, 88, 88, 88, 498, 0, 0, 0, 0, 0, 0, 0, 70, 70, 70, 507,
    70, 70, 510, 524, 88, 88, 527, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 136192, 314, 0, 70, 70, 608, 70, 70, 70, 70, 70, 70, 70, 70, 614, 70,
    70, 88, 70, 88, 70, 88, 70, 88, 0, 0, 0, 0, 0, 0, 0, 0, 70, 70, 70, 70, 70, 70, 70, 88, 618, 88, 88, 88, 88, 88, 88, 88, 88, 624, 88, 88, 0, 70, 70, 70,
    650, 70, 70, 70, 70, 70, 88, 88, 88, 659, 70, 692, 88, 88, 88, 88, 88, 88, 88, 88, 700, 0, 70, 70, 70, 70, 70, 70, 463, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 416, 70, 70, 70, 70, 70, 70, 705, 706, 70, 88, 88, 88, 88, 88, 711, 712, 88, 70, 70, 70, 70, 70, 70, 0, 88, 88, 88, 189, 88, 88, 88, 88, 88, 0, 70, 667,
    70, 70, 70, 70, 70, 70, 70, 88, 104, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 46, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 70, 70, 70,
    70, 0, 242, 70, 70, 70, 70, 70, 70, 70, 70, 336, 70, 70, 70, 70, 70, 70, 0, 88, 88, 88, 88, 191, 88, 88, 88, 88, 383, 88, 88, 88, 88, 88, 88, 88, 88, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 30770, 30770, 0, 70, 70, 70, 70, 610, 70, 70, 70, 70, 70, 70, 70, 70, 70, 88, 70, 88, 743, 744, 70, 88, 0, 0, 0, 0, 0,
    0, 0, 0, 70, 70, 70, 70, 508, 70, 70, 88, 88, 88, 620, 88, 88, 88, 88, 88, 88, 88, 88, 88, 0, 70, 70, 70, 70, 688, 689, 70, 691, 70, 88, 88, 88, 88, 88, 88,
    88, 699, 88, 0, 70, 70, 70, 70, 70, 611, 70, 70, 612, 70, 70, 70, 70, 70, 88, 708, 88, 88, 88, 88, 88, 88, 70, 70, 70, 70, 88, 88, 88, 88, 70, 737, 88, 738,
    88, 88, 732, 88, 70, 70, 70, 70, 88, 88, 88, 88, 70, 70, 88, 88, 88, 88, 88, 681, 88, 683, 0, 70, 70, 70, 70, 70, 70, 70, 70, 559, 88, 88, 88, 88, 88, 88,
    88, 88, 88, 532, 88, 88, 88, 88, 88, 88, 0, 0, 0, 0, 0, 229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0, 0, 70, 70, 250, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 70, 88, 522, 88, 70, 70, 70, 70, 8470, 242, 88, 88, 88, 88, 88, 88, 286, 88, 88, 88, 88, 88, 88, 598, 88, 88, 88, 88, 603, 88, 88, 0, 0, 0,
    0, 0, 0, 70, 70, 70, 70, 546, 70, 70, 70, 70, 70, 70, 0, 88, 88, 88, 88, 192, 88, 88, 88, 88, 70, 70, 70, 734, 88, 88, 88, 736, 70, 70, 88, 88, 88, 88, 88,
    88, 70, 70, 726, 727, 70, 70, 88, 88, 88, 88, 88, 88, 70, 725, 70, 70, 70, 70, 88, 729, 70, 70, 343, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    272, 70, 70, 88, 88, 88, 88, 487, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 497, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 70, 70, 70, 70, 153, 70, 70, 70, 70, 70, 70, 0, 88, 88, 88, 88, 88, 88, 88, 200, 88, 70, 70, 70, 70, 179, 70, 0, 88, 88, 88, 88, 88, 88, 88, 88,
    88, 310, 88, 88, 88, 88, 0, 0, 70, 70, 410, 411, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 591, 88, 88, 88, 434, 435, 88, 88, 88, 88, 88, 88, 88,
    88, 88, 88, 88, 88, 88, 88, 224, 0, 98304, 98304, 98304, 98304, 98304, 98304, 98304, 98304, 98304, 98304, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 44, 45, 140288,
    0, 0, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140288, 0, 0
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    279, 283, 286, 290, 294, 300, 308, 309, 662, 345, 346, 668, 668, 315, 319, 309, 309, 343, 345, 345, 345, 345, 347, 668, 668, 668, 668, 324, 309, 309, 344,
    345, 345, 345, 367, 668, 668, 668, 668, 328, 309, 344, 345, 345, 345, 668, 668, 668, 375, 309, 344, 345, 345, 374, 668, 668, 334, 344, 345, 358, 668, 668,
    341, 345, 345, 668, 668, 351, 345, 665, 668, 669, 344, 357, 668, 376, 345, 668, 365, 666, 376, 357, 668, 344, 667, 377, 666, 355, 667, 665, 355, 362, 371,
    509, 695, 381, 384, 388, 528, 393, 309, 397, 401, 309, 400, 309, 389, 676, 405, 309, 412, 416, 424, 309, 309, 639, 415, 423, 309, 309, 309, 428, 407, 435,
    439, 447, 309, 296, 437, 445, 309, 309, 529, 407, 452, 456, 309, 309, 466, 441, 309, 472, 481, 476, 497, 309, 502, 497, 309, 480, 489, 470, 500, 468, 309,
    486, 490, 309, 494, 471, 408, 506, 330, 506, 309, 520, 482, 521, 704, 526, 525, 535, 605, 595, 533, 537, 536, 606, 625, 625, 596, 597, 598, 613, 615, 309,
    320, 431, 541, 544, 548, 558, 448, 553, 557, 304, 563, 303, 562, 549, 702, 588, 567, 527, 309, 311, 572, 577, 582, 309, 310, 571, 576, 581, 586, 592, 309,
    309, 514, 630, 419, 309, 512, 516, 417, 602, 610, 309, 512, 619, 655, 309, 459, 629, 418, 634, 309, 336, 648, 638, 336, 648, 643, 309, 337, 622, 335, 647,
    692, 309, 462, 309, 652, 659, 336, 673, 336, 680, 684, 689, 685, 699, 729, 716, 708, 714, 722, 734, 710, 709, 715, 723, 714, 727, 733, 717, 718, 738, 742,
    750, 746, 748, 749, 752, 754, 756, 759, 758, 761, 763, 765, 767, 769, 771, 773, 780, 776, 776, 776, 847, 941, 793, 879, 776, 776, 776, 938, 943, 844, 776,
    776, 776, 776, 778, 976, 808, 776, 776, 856, 794, 776, 776, 776, 783, 806, 806, 806, 810, 804, 790, 776, 776, 776, 859, 800, 776, 776, 776, 786, 965, 962,
    800, 776, 776, 801, 802, 802, 802, 802, 799, 806, 800, 776, 776, 802, 806, 806, 802, 802, 802, 803, 806, 806, 806, 802, 806, 801, 802, 802, 798, 806, 803,
    803, 803, 803, 806, 806, 806, 800, 802, 802, 813, 815, 817, 818, 820, 821, 822, 824, 776, 775, 776, 776, 776, 837, 952, 845, 776, 850, 861, 839, 841, 898,
    776, 776, 885, 887, 776, 776, 776, 862, 859, 862, 861, 843, 881, 864, 866, 980, 895, 908, 934, 776, 895, 897, 886, 776, 776, 828, 851, 872, 785, 776, 830,
    925, 861, 847, 860, 882, 865, 902, 905, 896, 827, 776, 905, 896, 892, 776, 776, 776, 791, 889, 860, 882, 901, 903, 906, 826, 776, 776, 777, 877, 852, 875,
    973, 859, 881, 864, 902, 921, 827, 776, 776, 776, 828, 858, 849, 882, 901, 828, 825, 776, 776, 776, 801, 828, 776, 776, 858, 849, 864, 902, 891, 859, 863,
    901, 920, 896, 827, 776, 776, 846, 849, 882, 901, 900, 911, 827, 776, 776, 855, 776, 776, 776, 959, 878, 833, 961, 853, 801, 914, 911, 827, 776, 916, 911,
    781, 776, 776, 776, 829, 884, 911, 781, 776, 801, 875, 912, 776, 776, 927, 926, 926, 927, 929, 929, 929, 931, 776, 782, 784, 776, 939, 857, 866, 933, 936,
    776, 776, 776, 830, 943, 945, 835, 947, 776, 940, 951, 954, 975, 976, 795, 797, 774, 849, 849, 957, 866, 980, 895, 895, 955, 974, 776, 776, 785, 873, 776,
    777, 789, 796, 832, 866, 948, 781, 776, 776, 918, 781, 776, 918, 934, 825, 830, 776, 776, 918, 911, 781, 964, 866, 948, 781, 776, 923, 776, 854, 854, 878,
    848, 962, 871, 979, 909, 776, 776, 918, 912, 967, 961, 853, 866, 980, 873, 969, 971, 949, 934, 776, 776, 776, 843, 934, 873, 969, 876, 965, 962, 871, 979,
    908, 786, 965, 853, 979, 981, 907, 974, 893, 978, 787, 776, 825, 801, 802, 802, 802, 806, 806, 806, 806, 776, 853, 902, 983, 776, 829, 834, 894, 853, 902,
    983, 831, 867, 776, 776, 788, 852, 852, 875, 903, 909, 831, 876, 776, 788, 828, 812, 875, 903, 893, 776, 830, 776, 776, 776, 916, 983, 873, 776, 776, 869,
    903, 869, 903, 776, 776, 868, 919, 776, 869, 868, 919, 904, 776, 776, 869, 903, 776, 868, 919, 983, 919, 776, 868, 919, 873, 776, 869, 874, 874, 870, 870,
    870, 870, 50176, 99328, 268469248, 33792, 33792, 41984, 33792, 134252544, 2196480, 99328, 99648, 99328, -529165308, -529820668, -529820668, -529148924,
    -429157372, -429140988, -160721916, -429132796, -160705532, 34304, 34432, 230912, 25224952, 130606840, 130672376, -504760580, 1024, 2048, 0, 0, 1, 2, 32768,
    268435456, 0, 4, 8192, 67108864, 0, 8, 0, 16, 32, 0, 49, 134219776, 64, 64, 128, 256, 512, 128, 640, 0, 512, 512, 640, 32, 640, 640, 16777264, 56, 48, 32,
    -985135985, -985135985, -985119601, -985135969, -985119585, -985135969, -985111345, -985111345, -2304, -2304, -2272, -2272, -2129, 0, 67108864, 402653184,
    0, 2097152, 0, 4194304, 16, 512, 1024, 524288, 32505856, 12, 1024, 5888, 122880, 1966080, 132120576, 1792, 4096, -1073741824, 0, 768, 1024, 4096, 16384, 0,
    1024, 196608, 262144, 0, 2048, 2048, 16384, 768, 4096, 24576, 0, 16384, 65536, 393216, 524288, 1048576, 0, 131072, 262144, 262144, 524288, 4194304, 0,
    262144, 1048576, 8, 16, 64, 256, 24576, 32768, 65536, 4194304, 67108864, 1073741824, -2147483648, 0, 24576, 768, 8388608, 402653184, 536870912, 4194304,
    16777216, 33554432, 67108864, 939524096, -1073741824, 16384, 393216, 1048576, 2097152, 4194304, 4194304, 8388608, 33554432, 268435456, 536870912, 0,
    1048576, 8388608, 268435456, 4096, 393216, 512, 393216, 512, 262144, 2097152, 8388608, 67108864, 262144, 268435456, -937931855, -937931847, -669496391,
    -669496391, 2080366587, 2080366587, -67117061, 0, 134217728, 1073741824, 0, 57, 402653184, 123, 384, 512, 2048, 34816, 512, 7168, 16384, 491520, 973078528,
    1073741824, 8, 268435456, 16384, 524288, 88080384, 1048576, 134217728, 268435456, 32768, 458752, 1, 8, 4096, 32768, 196608, 1, 16, 1024, 64, 1024, 16,
    524288, 1048576, 1073741824, 6291456, 536870912, 1073741824, 24, 32, 16, 1048576, 6291456, 8388608, 16777216, 4194304, 536870912
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'EOF',
    'IntegerLiteral',
    'DecimalLiteral',
    'DoubleLiteral',
    'StringLiteral',
    'Wildcard',
    'NCName',
    'QName',
    'S',
    'CommentContents',
    &quot;'!='&quot;,
    &quot;'$'&quot;,
    &quot;'('&quot;,
    &quot;'(:'&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*'&quot;,
    &quot;'+'&quot;,
    &quot;'+'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'..'&quot;,
    &quot;'/'&quot;,
    &quot;'//'&quot;,
    &quot;':)'&quot;,
    &quot;'::'&quot;,
    &quot;'&lt;'&quot;,
    &quot;'&lt;&lt;'&quot;,
    &quot;'&lt;='&quot;,
    &quot;'='&quot;,
    &quot;'&gt;'&quot;,
    &quot;'&gt;='&quot;,
    &quot;'&gt;&gt;'&quot;,
    &quot;'?'&quot;,
    &quot;'@'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'ancestor'&quot;,
    &quot;'ancestor-or-self'&quot;,
    &quot;'and'&quot;,
    &quot;'as'&quot;,
    &quot;'attribute'&quot;,
    &quot;'cast'&quot;,
    &quot;'castable'&quot;,
    &quot;'child'&quot;,
    &quot;'comment'&quot;,
    &quot;'descendant'&quot;,
    &quot;'descendant-or-self'&quot;,
    &quot;'div'&quot;,
    &quot;'document-node'&quot;,
    &quot;'element'&quot;,
    &quot;'else'&quot;,
    &quot;'empty-sequence'&quot;,
    &quot;'eq'&quot;,
    &quot;'every'&quot;,
    &quot;'except'&quot;,
    &quot;'following'&quot;,
    &quot;'following-sibling'&quot;,
    &quot;'for'&quot;,
    &quot;'ge'&quot;,
    &quot;'gt'&quot;,
    &quot;'idiv'&quot;,
    &quot;'if'&quot;,
    &quot;'in'&quot;,
    &quot;'instance'&quot;,
    &quot;'intersect'&quot;,
    &quot;'is'&quot;,
    &quot;'item'&quot;,
    &quot;'le'&quot;,
    &quot;'lt'&quot;,
    &quot;'mod'&quot;,
    &quot;'namespace'&quot;,
    &quot;'ne'&quot;,
    &quot;'node'&quot;,
    &quot;'of'&quot;,
    &quot;'or'&quot;,
    &quot;'parent'&quot;,
    &quot;'preceding'&quot;,
    &quot;'preceding-sibling'&quot;,
    &quot;'processing-instruction'&quot;,
    &quot;'return'&quot;,
    &quot;'satisfies'&quot;,
    &quot;'schema-attribute'&quot;,
    &quot;'schema-element'&quot;,
    &quot;'self'&quot;,
    &quot;'some'&quot;,
    &quot;'text'&quot;,
    &quot;'then'&quot;,
    &quot;'to'&quot;,
    &quot;'treat'&quot;,
    &quot;'typeswitch'&quot;,
    &quot;'union'&quot;,
    &quot;'|'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 1024, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 1024"/>
        <xsl:variable name="end" select="$end - $result idiv 128"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 128 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 32"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 6)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="1024 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 16"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 1023) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 1024, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 2">
        <xsl:variable name="i0" select=". * 744 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 2"/>
        <xsl:variable name="i2" select="$i1 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 2 + $p:EXPECTED[$i1 mod 4 + $p:EXPECTED[$i2 + 1] + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[6 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[12 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production Comment (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-Comment-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>       <!-- CommentContents | ('(' ':') | (':' ')') -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 27">                                      <!-- (':' ')') -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 11">                                <!-- CommentContents -->
                  <xsl:variable name="state" select="p:consumeT(11, $input, $state)"/> <!-- CommentContents -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-Comment($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-Comment-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing Comment.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-Comment" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(15, $input, $state)"/>            <!-- ('(' ':') -->
    <xsl:variable name="state" select="p:try-Comment-1($input, $state)"/>
    <xsl:variable name="state" select="p:consumeT(27, $input, $state)"/>            <!-- (':' ')') -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production WhiteSpace (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-WhiteSpace-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 10">                                    <!-- S^WhiteSpace -->
              <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>  <!-- S^WhiteSpace -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-Comment($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>       <!-- END | S^WhiteSpace | ('(' ':') -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 1">                                       <!-- END -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:try-WhiteSpace-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing WhiteSpace.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-WhiteSpace" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-WhiteSpace-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse NodeComp.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NodeComp" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 69">                                        <!-- 'is' -->
          <xsl:variable name="state" select="p:consume(69, $input, $state)"/>       <!-- 'is' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- '<<' -->
          <xsl:variable name="state" select="p:consume(30, $input, $state)"/>       <!-- '<<' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- '>>' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NodeComp', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse GeneralComp.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-GeneralComp" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- '=' -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- '=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- '!=' -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- '!=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 29">                                        <!-- '<' -->
          <xsl:variable name="state" select="p:consume(29, $input, $state)"/>       <!-- '<' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 31">                                        <!-- '<=' -->
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- '<=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- '>' -->
          <xsl:variable name="state" select="p:consume(33, $input, $state)"/>       <!-- '>' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- '>=' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'GeneralComp', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ValueComp.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ValueComp" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- 'eq' -->
          <xsl:variable name="state" select="p:consume(56, $input, $state)"/>       <!-- 'eq' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 75">                                        <!-- 'ne' -->
          <xsl:variable name="state" select="p:consume(75, $input, $state)"/>       <!-- 'ne' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 72">                                        <!-- 'lt' -->
          <xsl:variable name="state" select="p:consume(72, $input, $state)"/>       <!-- 'lt' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 71">                                        <!-- 'le' -->
          <xsl:variable name="state" select="p:consume(71, $input, $state)"/>       <!-- 'le' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'gt' -->
          <xsl:variable name="state" select="p:consume(63, $input, $state)"/>       <!-- 'gt' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(62, $input, $state)"/>       <!-- 'ge' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ValueComp', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse OccurrenceIndicator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-OccurrenceIndicator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 36">                                        <!-- '?' -->
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- '?' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- '*' -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- '+' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'OccurrenceIndicator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ItemType.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ItemType" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (44,                                          (: 'attribute' :)
                                         48,                                          (: 'comment' :)
                                         52,                                          (: 'document-node' :)
                                         53,                                          (: 'element' :)
                                         70,                                          (: 'item' :)
                                         76,                                          (: 'node' :)
                                         82,                                          (: 'processing-instruction' :)
                                         85,                                          (: 'schema-attribute' :)
                                         86,                                          (: 'schema-element' :)
                                         89)">                                      <!-- 'text' -->
          <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ('(' ':') | ')' | '*' | '*' | '+' |
                                                                                         '+' | ',' | '-' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' |
                                                                                         ']' | 'and' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                                                         'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                                                                         'return' | 'satisfies' | 'to' | 'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 1836                                          (: 'attribute' '(' :)
                     or $state[$p:lk] = 1840                                          (: 'comment' '(' :)
                     or $state[$p:lk] = 1844                                          (: 'document-node' '(' :)
                     or $state[$p:lk] = 1845                                          (: 'element' '(' :)
                     or $state[$p:lk] = 1868                                          (: 'node' '(' :)
                     or $state[$p:lk] = 1874                                          (: 'processing-instruction' '(' :)
                     or $state[$p:lk] = 1877                                          (: 'schema-attribute' '(' :)
                     or $state[$p:lk] = 1878                                          (: 'schema-element' '(' :)
                     or $state[$p:lk] = 1881">                                      <!-- 'text' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-KindTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 1862">                                      <!-- 'item' '(' -->
          <xsl:variable name="state" select="p:consume(70, $input, $state)"/>       <!-- 'item' -->
          <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>    <!-- S^WhiteSpace | '(' | ('(' ':') -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- '(' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | ')' -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AtomicType($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ItemType', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse SequenceType.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-SequenceType" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 55">                                       <!-- 'empty-sequence' -->
          <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ('(' ':') | ')' | '*' | '*' | '+' |
                                                                                         '+' | ',' | '-' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' |
                                                                                         ']' | 'and' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                                                         'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                                                                         'return' | 'satisfies' | 'to' | 'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 1847">                                      <!-- 'empty-sequence' '(' -->
          <xsl:variable name="state" select="p:consume(55, $input, $state)"/>       <!-- 'empty-sequence' -->
          <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>    <!-- S^WhiteSpace | '(' | ('(' ':') -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- '(' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | ')' -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ItemType($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(18, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '*' | '+' | '+' |
                                                                                         ',' | '-' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' |
                                                                                         'and' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                                                         'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                                                                         'return' | 'satisfies' | 'to' | 'union' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 18                                      (: '*' :)
                           or $state[$p:l1] = 20                                      (: '+' :)
                           or $state[$p:l1] = 36">                                  <!-- '?' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-OccurrenceIndicator($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'SequenceType', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AtomicType.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AtomicType" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AtomicType', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse SingleType.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-SingleType" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-AtomicType($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(19, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'and' |
                                                                                         'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                                                         'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                                                                         'return' | 'satisfies' | 'to' | 'treat' | 'union' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 36">                                        <!-- '?' -->
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- '?' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'SingleType', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AbbrevForwardStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AbbrevForwardStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- '@' -->
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- '@' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/>         <!-- Wildcard | QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-NodeTest($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AbbrevForwardStep', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ForwardAxis.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ForwardAxis" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'child' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'child' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'descendant' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'descendant' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- 'attribute' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 87">                                        <!-- 'self' -->
          <xsl:variable name="state" select="p:consume(87, $input, $state)"/>       <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 50">                                        <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 60">                                        <!-- 'following-sibling' -->
          <xsl:variable name="state" select="p:consume(60, $input, $state)"/>       <!-- 'following-sibling' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 59">                                        <!-- 'following' -->
          <xsl:variable name="state" select="p:consume(59, $input, $state)"/>       <!-- 'following' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(74, $input, $state)"/>       <!-- 'namespace' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ForwardAxis', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ForwardStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ForwardStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 44">                                       <!-- 'attribute' -->
          <xsl:variable name="state" select="p:lookahead2W(25, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                                                         '-' | '/' | '//' | '::' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                                                         '[' | ']' | 'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' |
                                                                                         'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                                                                         'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' |
                                                                                         'treat' | 'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (47,                                          (: 'child' :)
                                         49,                                          (: 'descendant' :)
                                         50,                                          (: 'descendant-or-self' :)
                                         59,                                          (: 'following' :)
                                         60,                                          (: 'following-sibling' :)
                                         74,                                          (: 'namespace' :)
                                         87)">                                      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead2W(23, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '/' | '//' | '::' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                                                                         ']' | 'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' |
                                                                                         'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' |
                                                                                         'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' |
                                                                                         'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 3628                                          (: 'attribute' '::' :)
                     or $state[$p:lk] = 3631                                          (: 'child' '::' :)
                     or $state[$p:lk] = 3633                                          (: 'descendant' '::' :)
                     or $state[$p:lk] = 3634                                          (: 'descendant-or-self' '::' :)
                     or $state[$p:lk] = 3643                                          (: 'following' '::' :)
                     or $state[$p:lk] = 3644                                          (: 'following-sibling' '::' :)
                     or $state[$p:lk] = 3658                                          (: 'namespace' '::' :)
                     or $state[$p:lk] = 3671">                                      <!-- 'self' '::' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ForwardAxis($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/>   <!-- Wildcard | QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NodeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AbbrevForwardStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ForwardStep', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AbbrevReverseStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AbbrevReverseStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- '..' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AbbrevReverseStep', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse NameTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NameTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 7">                                         <!-- Wildcard -->
          <xsl:variable name="state" select="p:consume(7, $input, $state)"/>        <!-- Wildcard -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NameTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AnyKindTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AnyKindTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(76, $input, $state)"/>             <!-- 'node' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AnyKindTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse TextTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-TextTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(89, $input, $state)"/>             <!-- 'text' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'TextTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse CommentTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-CommentTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(48, $input, $state)"/>             <!-- 'comment' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'CommentTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse PITest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PITest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(82, $input, $state)"/>             <!-- 'processing-instruction' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- StringLiteral | NCName | S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 16">                                       <!-- ')' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- NCName -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- NCName -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- StringLiteral -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'PITest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AttributeDeclaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AttributeDeclaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-AttributeName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AttributeDeclaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse SchemaAttributeTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-SchemaAttributeTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(85, $input, $state)"/>             <!-- 'schema-attribute' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-AttributeDeclaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'SchemaAttributeTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AttributeName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AttributeName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AttributeName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AttribNameOrWildcard.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AttribNameOrWildcard" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- '*' -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AttributeName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AttribNameOrWildcard', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AttributeTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AttributeTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(44, $input, $state)"/>             <!-- 'attribute' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(28, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ('(' ':') | ')' | '*' | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 16">                                       <!-- ')' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AttribNameOrWildcard($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/>   <!-- S^WhiteSpace | ('(' ':') | ')' | ',' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 21">                                  <!-- ',' -->
                <xsl:variable name="state" select="p:consume(21, $input, $state)"/> <!-- ',' -->
                <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/> <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                             'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                             'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                             'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                             'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                                                                             'ge' | 'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' |
                                                                                             'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' |
                                                                                             'parent' | 'preceding' | 'preceding-sibling' |
                                                                                             'processing-instruction' | 'return' | 'satisfies' |
                                                                                             'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' |
                                                                                             'to' | 'treat' | 'typeswitch' | 'union' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-TypeName($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AttributeTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ElementDeclaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ElementDeclaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ElementName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ElementDeclaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse SchemaElementTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-SchemaElementTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(86, $input, $state)"/>             <!-- 'schema-element' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ElementDeclaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'SchemaElementTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse TypeName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-TypeName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'TypeName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ElementName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ElementName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ElementName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ElementNameOrWildcard.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ElementNameOrWildcard" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- '*' -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ElementName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ElementNameOrWildcard', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ElementTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ElementTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(53, $input, $state)"/>             <!-- 'element' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(28, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ('(' ':') | ')' | '*' | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 16">                                       <!-- ')' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ElementNameOrWildcard($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/>   <!-- S^WhiteSpace | ('(' ':') | ')' | ',' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 21">                                  <!-- ',' -->
                <xsl:variable name="state" select="p:consume(21, $input, $state)"/> <!-- ',' -->
                <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/> <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                             'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                             'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                             'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                             'every' | 'except' | 'following' | 'following-sibling' | 'for' |
                                                                                             'ge' | 'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' |
                                                                                             'item' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' |
                                                                                             'parent' | 'preceding' | 'preceding-sibling' |
                                                                                             'processing-instruction' | 'return' | 'satisfies' |
                                                                                             'schema-attribute' | 'schema-element' | 'self' | 'some' | 'text' |
                                                                                             'to' | 'treat' | 'typeswitch' | 'union' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-TypeName($input, $state)
                "/>
                <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/> <!-- S^WhiteSpace | ('(' ':') | ')' | '?' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 36">                            <!-- '?' -->
                      <xsl:variable name="state" select="p:consume(36, $input, $state)"/> <!-- '?' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ElementTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse DocumentTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-DocumentTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- 'document-node' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(13, $input, $state)"/>         <!-- S^WhiteSpace | ('(' ':') | ')' | 'element' | 'schema-element' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 16">                                       <!-- ')' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 53">                                  <!-- 'element' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-ElementTest($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-SchemaElementTest($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | ')' -->
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'DocumentTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse KindTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-KindTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'document-node' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-DocumentTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- 'element' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ElementTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AttributeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 86">                                        <!-- 'schema-element' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-SchemaElementTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 85">                                        <!-- 'schema-attribute' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-SchemaAttributeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 82">                                        <!-- 'processing-instruction' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-PITest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'comment' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-CommentTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 89">                                        <!-- 'text' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-TextTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AnyKindTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'KindTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse NodeTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NodeTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (44,                                          (: 'attribute' :)
                                         48,                                          (: 'comment' :)
                                         52,                                          (: 'document-node' :)
                                         53,                                          (: 'element' :)
                                         76,                                          (: 'node' :)
                                         82,                                          (: 'processing-instruction' :)
                                         85,                                          (: 'schema-attribute' :)
                                         86,                                          (: 'schema-element' :)
                                         89)">                                      <!-- 'text' -->
          <xsl:variable name="state" select="p:lookahead2W(22, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                                                         '-' | '/' | '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                                                                         ']' | 'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' |
                                                                                         'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' |
                                                                                         'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' |
                                                                                         'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 1836                                          (: 'attribute' '(' :)
                     or $state[$p:lk] = 1840                                          (: 'comment' '(' :)
                     or $state[$p:lk] = 1844                                          (: 'document-node' '(' :)
                     or $state[$p:lk] = 1845                                          (: 'element' '(' :)
                     or $state[$p:lk] = 1868                                          (: 'node' '(' :)
                     or $state[$p:lk] = 1874                                          (: 'processing-instruction' '(' :)
                     or $state[$p:lk] = 1877                                          (: 'schema-attribute' '(' :)
                     or $state[$p:lk] = 1878                                          (: 'schema-element' '(' :)
                     or $state[$p:lk] = 1881">                                      <!-- 'text' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-KindTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NameTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NodeTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ReverseAxis.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ReverseAxis" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 79">                                        <!-- 'parent' -->
          <xsl:variable name="state" select="p:consume(79, $input, $state)"/>       <!-- 'parent' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- 'ancestor' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- 'ancestor' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 81">                                        <!-- 'preceding-sibling' -->
          <xsl:variable name="state" select="p:consume(81, $input, $state)"/>       <!-- 'preceding-sibling' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 80">                                        <!-- 'preceding' -->
          <xsl:variable name="state" select="p:consume(80, $input, $state)"/>       <!-- 'preceding' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(41, $input, $state)"/>       <!-- 'ancestor-or-self' -->
          <xsl:variable name="state" select="p:lookahead1W(4, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | '::' -->
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ReverseAxis', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ReverseStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ReverseStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 24">                                        <!-- '..' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AbbrevReverseStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ReverseAxis($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/>   <!-- Wildcard | QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NodeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ReverseStep', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AxisStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AxisStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (40,                                          (: 'ancestor' :)
                                         41,                                          (: 'ancestor-or-self' :)
                                         79,                                          (: 'parent' :)
                                         80,                                          (: 'preceding' :)
                                         81)">                                      <!-- 'preceding-sibling' -->
          <xsl:variable name="state" select="p:lookahead2W(23, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '/' | '//' | '::' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                                                                         ']' | 'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' |
                                                                                         'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' |
                                                                                         'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' |
                                                                                         'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 24                                            (: '..' :)
                     or $state[$p:lk] = 3624                                          (: 'ancestor' '::' :)
                     or $state[$p:lk] = 3625                                          (: 'ancestor-or-self' '::' :)
                     or $state[$p:lk] = 3663                                          (: 'parent' '::' :)
                     or $state[$p:lk] = 3664                                          (: 'preceding' '::' :)
                     or $state[$p:lk] = 3665">                                      <!-- 'preceding-sibling' '::' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ReverseStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ForwardStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '/' | '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                                                                         'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' |
                                                                                         'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                                                         'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' | 'union' |
                                                                                         '|' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-PredicateList($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AxisStep', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse Predicate.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Predicate" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(38, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Predicate', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production PredicateList (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PredicateList-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/>     <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '/' | '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                                                                         'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' |
                                                                                         'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                                                         'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' | 'union' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 38">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-Predicate($input, $state)
            "/>
            <xsl:sequence select="p:parse-PredicateList-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse PredicateList.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PredicateList" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-PredicateList-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'PredicateList', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production FunctionCall (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-FunctionCall-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 21">                                     <!-- ',' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(21, $input, $state)"/>     <!-- ',' -->
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ExprSingle($input, $state)
            "/>
            <xsl:sequence select="p:parse-FunctionCall-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse FunctionCall.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-FunctionCall" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-FunctionName($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(31, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | ')' |
                                                                                         '+' | '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 16">                                       <!-- ')' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ExprSingle($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-FunctionCall-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'FunctionCall', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ContextItemExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ContextItemExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(23, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ContextItemExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ParenthesizedExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ParenthesizedExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(31, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | ')' |
                                                                                         '+' | '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 16">                                       <!-- ')' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Expr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ParenthesizedExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse VarRef.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-VarRef" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- '$' -->
    <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'VarRef', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse NumericLiteral.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NumericLiteral" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- IntegerLiteral -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- IntegerLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- DecimalLiteral -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- DecimalLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- DoubleLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NumericLiteral', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse Literal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Literal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- StringLiteral -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- StringLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NumericLiteral($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Literal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse PrimaryExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PrimaryExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3                                             (: IntegerLiteral :)
                     or $state[$p:l1] = 4                                             (: DecimalLiteral :)
                     or $state[$p:l1] = 5                                             (: DoubleLiteral :)
                     or $state[$p:l1] = 6">                                         <!-- StringLiteral -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Literal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- '$' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-VarRef($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ParenthesizedExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ContextItemExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-FunctionCall($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'PrimaryExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse FilterExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-FilterExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-PrimaryExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '/' | '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                                                                         'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' |
                                                                                         'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' |
                                                                                         'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' | 'union' |
                                                                                         '|' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-PredicateList($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'FilterExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse StepExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-StepExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (40,                                          (: 'ancestor' :)
                                         41,                                          (: 'ancestor-or-self' :)
                                         47,                                          (: 'child' :)
                                         49,                                          (: 'descendant' :)
                                         50,                                          (: 'descendant-or-self' :)
                                         59,                                          (: 'following' :)
                                         60,                                          (: 'following-sibling' :)
                                         74,                                          (: 'namespace' :)
                                         79,                                          (: 'parent' :)
                                         80,                                          (: 'preceding' :)
                                         81,                                          (: 'preceding-sibling' :)
                                         87)">                                      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead2W(25, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                                                         '-' | '/' | '//' | '::' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                                                         '[' | ']' | 'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' |
                                                                                         'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                                                                         'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' |
                                                                                         'treat' | 'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (9,                                           (: QName^Token :)
                                         42,                                          (: 'and' :)
                                         45,                                          (: 'cast' :)
                                         46,                                          (: 'castable' :)
                                         51,                                          (: 'div' :)
                                         54,                                          (: 'else' :)
                                         56,                                          (: 'eq' :)
                                         57,                                          (: 'every' :)
                                         58,                                          (: 'except' :)
                                         61,                                          (: 'for' :)
                                         62,                                          (: 'ge' :)
                                         63,                                          (: 'gt' :)
                                         64,                                          (: 'idiv' :)
                                         67,                                          (: 'instance' :)
                                         68,                                          (: 'intersect' :)
                                         69,                                          (: 'is' :)
                                         71,                                          (: 'le' :)
                                         72,                                          (: 'lt' :)
                                         73,                                          (: 'mod' :)
                                         75,                                          (: 'ne' :)
                                         78,                                          (: 'or' :)
                                         83,                                          (: 'return' :)
                                         84,                                          (: 'satisfies' :)
                                         88,                                          (: 'some' :)
                                         91,                                          (: 'to' :)
                                         92,                                          (: 'treat' :)
                                         94)">                                      <!-- 'union' -->
          <xsl:variable name="state" select="p:lookahead2W(22, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                                                         '-' | '/' | '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                                                                         ']' | 'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' |
                                                                                         'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' |
                                                                                         'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' |
                                                                                         'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 3                                             (: IntegerLiteral :)
                     or $state[$p:lk] = 4                                             (: DecimalLiteral :)
                     or $state[$p:lk] = 5                                             (: DoubleLiteral :)
                     or $state[$p:lk] = 6                                             (: StringLiteral :)
                     or $state[$p:lk] = 13                                            (: '$' :)
                     or $state[$p:lk] = 14                                            (: '(' :)
                     or $state[$p:lk] = 23                                            (: '.' :)
                     or $state[$p:lk] = 1801                                          (: QName^Token '(' :)
                     or $state[$p:lk] = 1832                                          (: 'ancestor' '(' :)
                     or $state[$p:lk] = 1833                                          (: 'ancestor-or-self' '(' :)
                     or $state[$p:lk] = 1834                                          (: 'and' '(' :)
                     or $state[$p:lk] = 1837                                          (: 'cast' '(' :)
                     or $state[$p:lk] = 1838                                          (: 'castable' '(' :)
                     or $state[$p:lk] = 1839                                          (: 'child' '(' :)
                     or $state[$p:lk] = 1841                                          (: 'descendant' '(' :)
                     or $state[$p:lk] = 1842                                          (: 'descendant-or-self' '(' :)
                     or $state[$p:lk] = 1843                                          (: 'div' '(' :)
                     or $state[$p:lk] = 1846                                          (: 'else' '(' :)
                     or $state[$p:lk] = 1848                                          (: 'eq' '(' :)
                     or $state[$p:lk] = 1849                                          (: 'every' '(' :)
                     or $state[$p:lk] = 1850                                          (: 'except' '(' :)
                     or $state[$p:lk] = 1851                                          (: 'following' '(' :)
                     or $state[$p:lk] = 1852                                          (: 'following-sibling' '(' :)
                     or $state[$p:lk] = 1853                                          (: 'for' '(' :)
                     or $state[$p:lk] = 1854                                          (: 'ge' '(' :)
                     or $state[$p:lk] = 1855                                          (: 'gt' '(' :)
                     or $state[$p:lk] = 1856                                          (: 'idiv' '(' :)
                     or $state[$p:lk] = 1859                                          (: 'instance' '(' :)
                     or $state[$p:lk] = 1860                                          (: 'intersect' '(' :)
                     or $state[$p:lk] = 1861                                          (: 'is' '(' :)
                     or $state[$p:lk] = 1863                                          (: 'le' '(' :)
                     or $state[$p:lk] = 1864                                          (: 'lt' '(' :)
                     or $state[$p:lk] = 1865                                          (: 'mod' '(' :)
                     or $state[$p:lk] = 1866                                          (: 'namespace' '(' :)
                     or $state[$p:lk] = 1867                                          (: 'ne' '(' :)
                     or $state[$p:lk] = 1870                                          (: 'or' '(' :)
                     or $state[$p:lk] = 1871                                          (: 'parent' '(' :)
                     or $state[$p:lk] = 1872                                          (: 'preceding' '(' :)
                     or $state[$p:lk] = 1873                                          (: 'preceding-sibling' '(' :)
                     or $state[$p:lk] = 1875                                          (: 'return' '(' :)
                     or $state[$p:lk] = 1876                                          (: 'satisfies' '(' :)
                     or $state[$p:lk] = 1879                                          (: 'self' '(' :)
                     or $state[$p:lk] = 1880                                          (: 'some' '(' :)
                     or $state[$p:lk] = 1883                                          (: 'to' '(' :)
                     or $state[$p:lk] = 1884                                          (: 'treat' '(' :)
                     or $state[$p:lk] = 1886">                                      <!-- 'union' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-FilterExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AxisStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'StepExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production RelativePathExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-RelativePathExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 25                                         (: '/' :)
                      and $state[$p:l1] != 26">                                     <!-- '//' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 25">                                <!-- '/' -->
                  <xsl:variable name="state" select="p:consume(25, $input, $state)"/> <!-- '/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(26, $input, $state)"/> <!-- '//' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(29, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '.' |
                                                                                         '..' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' |
                                                                                         'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                                                                         'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                                                                         'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' |
                                                                                         'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-StepExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-RelativePathExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse RelativePathExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-RelativePathExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-StepExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-RelativePathExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'RelativePathExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse PathExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PathExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '/' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '/' -->
          <xsl:variable name="state" select="p:lookahead1W(32, $input, $state)"/>   <!-- EOF | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '!=' | '$' | '(' | ('(' ':') |
                                                                                         ')' | '*' | '+' | ',' | '-' | '.' | '..' | '<' | '<<' | '<=' | '=' |
                                                                                         '>' | '>=' | '>>' | '@' | ']' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 2                                       (: EOF :)
                           or $state[$p:l1] = 12                                      (: '!=' :)
                           or $state[$p:l1] = 16                                      (: ')' :)
                           or $state[$p:l1] = 17                                      (: '*' :)
                           or $state[$p:l1] = 19                                      (: '+' :)
                           or $state[$p:l1] = 21                                      (: ',' :)
                           or $state[$p:l1] = 22                                      (: '-' :)
                           or $state[$p:l1] = 29                                      (: '&lt;' :)
                           or $state[$p:l1] = 30                                      (: '&lt;&lt;' :)
                           or $state[$p:l1] = 31                                      (: '&lt;=' :)
                           or $state[$p:l1] = 32                                      (: '=' :)
                           or $state[$p:l1] = 33                                      (: '>' :)
                           or $state[$p:l1] = 34                                      (: '>=' :)
                           or $state[$p:l1] = 35                                      (: '>>' :)
                           or $state[$p:l1] = 39                                      (: ']' :)
                           or $state[$p:l1] = 95">                                  <!-- '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-RelativePathExpr($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 26">                                        <!-- '//' -->
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- '//' -->
          <xsl:variable name="state" select="p:lookahead1W(29, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '.' |
                                                                                         '..' | '@' | 'ancestor' | 'ancestor-or-self' | 'and' | 'attribute' |
                                                                                         'cast' | 'castable' | 'child' | 'comment' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' | 'else' |
                                                                                         'empty-sequence' | 'eq' | 'every' | 'except' | 'following' |
                                                                                         'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' | 'if' |
                                                                                         'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-RelativePathExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-RelativePathExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'PathExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ValueExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ValueExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-PathExpr($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ValueExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production UnaryExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-UnaryExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 19                                         (: '+' :)
                      and $state[$p:l1] != 22">                                     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- '-' -->
                  <xsl:variable name="state" select="p:consume(22, $input, $state)"/> <!-- '-' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(19, $input, $state)"/> <!-- '+' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-UnaryExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse UnaryExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-UnaryExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-UnaryExpr-1($input, $state)"/>
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ValueExpr($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'UnaryExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse CastExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-CastExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-UnaryExpr($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'cast' -->
          <xsl:variable name="state" select="p:consume(45, $input, $state)"/>       <!-- 'cast' -->
          <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | 'as' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'as' -->
          <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>   <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-SingleType($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'CastExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse CastableExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-CastableExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-CastExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' |
                                                                                         'castable' | 'div' | 'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                                                                         'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                                                                         'return' | 'satisfies' | 'to' | 'treat' | 'union' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'castable' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'castable' -->
          <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | 'as' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'as' -->
          <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>   <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-SingleType($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'CastableExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse TreatExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-TreatExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-CastableExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(16, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'div' |
                                                                                         'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                                                                         'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                                                                         'satisfies' | 'to' | 'treat' | 'union' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 92">                                        <!-- 'treat' -->
          <xsl:variable name="state" select="p:consume(92, $input, $state)"/>       <!-- 'treat' -->
          <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | 'as' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'as' -->
          <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>   <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-SequenceType($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'TreatExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse InstanceofExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-InstanceofExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-TreatExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'div' |
                                                                                         'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                                                                         'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' |
                                                                                         'satisfies' | 'to' | 'union' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 67">                                        <!-- 'instance' -->
          <xsl:variable name="state" select="p:consume(67, $input, $state)"/>       <!-- 'instance' -->
          <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/>    <!-- S^WhiteSpace | ('(' ':') | 'of' -->
          <xsl:variable name="state" select="p:consume(77, $input, $state)"/>       <!-- 'of' -->
          <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>   <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-SequenceType($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'InstanceofExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production IntersectExceptExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-IntersectExceptExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(14, $input, $state)"/>     <!-- EOF | S^WhiteSpace | '!=' | ('(' ':') | ')' | '*' | '+' | ',' | '-' |
                                                                                         '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'and' | 'div' |
                                                                                         'else' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'intersect' | 'is' |
                                                                                         'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' |
                                                                                         'union' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 58                                         (: 'except' :)
                      and $state[$p:l1] != 68">                                     <!-- 'intersect' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 68">                                <!-- 'intersect' -->
                  <xsl:variable name="state" select="p:consume(68, $input, $state)"/> <!-- 'intersect' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(58, $input, $state)"/> <!-- 'except' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-InstanceofExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-IntersectExceptExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse IntersectExceptExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-IntersectExceptExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-InstanceofExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-IntersectExceptExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'IntersectExceptExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production UnionExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-UnionExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 94                                         (: 'union' :)
                      and $state[$p:l1] != 95">                                     <!-- '|' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 94">                                <!-- 'union' -->
                  <xsl:variable name="state" select="p:consume(94, $input, $state)"/> <!-- 'union' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(95, $input, $state)"/> <!-- '|' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-IntersectExceptExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-UnionExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse UnionExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-UnionExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-IntersectExceptExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-UnionExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'UnionExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production MultiplicativeExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-MultiplicativeExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 17                                         (: '*' :)
                      and $state[$p:l1] != 51                                         (: 'div' :)
                      and $state[$p:l1] != 64                                         (: 'idiv' :)
                      and $state[$p:l1] != 73">                                     <!-- 'mod' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 17">                                <!-- '*' -->
                  <xsl:variable name="state" select="p:consume(17, $input, $state)"/> <!-- '*' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 51">                                <!-- 'div' -->
                  <xsl:variable name="state" select="p:consume(51, $input, $state)"/> <!-- 'div' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 64">                                <!-- 'idiv' -->
                  <xsl:variable name="state" select="p:consume(64, $input, $state)"/> <!-- 'idiv' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(73, $input, $state)"/> <!-- 'mod' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-UnionExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-MultiplicativeExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse MultiplicativeExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-MultiplicativeExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-UnionExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-MultiplicativeExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'MultiplicativeExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production AdditiveExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AdditiveExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 19                                         (: '+' :)
                      and $state[$p:l1] != 22">                                     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 19">                                <!-- '+' -->
                  <xsl:variable name="state" select="p:consume(19, $input, $state)"/> <!-- '+' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(22, $input, $state)"/> <!-- '-' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-MultiplicativeExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-AdditiveExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse AdditiveExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AdditiveExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-MultiplicativeExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-AdditiveExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AdditiveExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse RangeExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-RangeExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-AdditiveExpr($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 91">                                        <!-- 'to' -->
          <xsl:variable name="state" select="p:consume(91, $input, $state)"/>       <!-- 'to' -->
          <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AdditiveExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'RangeExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ComparisonExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ComparisonExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-RangeExpr($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 2                                            (: EOF :)
                    and $state[$p:l1] != 16                                           (: ')' :)
                    and $state[$p:l1] != 21                                           (: ',' :)
                    and $state[$p:l1] != 39                                           (: ']' :)
                    and $state[$p:l1] != 42                                           (: 'and' :)
                    and $state[$p:l1] != 54                                           (: 'else' :)
                    and $state[$p:l1] != 78                                           (: 'or' :)
                    and $state[$p:l1] != 83                                           (: 'return' :)
                    and $state[$p:l1] != 84">                                       <!-- 'satisfies' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 56                                      (: 'eq' :)
                           or $state[$p:l1] = 62                                      (: 'ge' :)
                           or $state[$p:l1] = 63                                      (: 'gt' :)
                           or $state[$p:l1] = 71                                      (: 'le' :)
                           or $state[$p:l1] = 72                                      (: 'lt' :)
                           or $state[$p:l1] = 75">                                  <!-- 'ne' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-ValueComp($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 30                                      (: '&lt;&lt;' :)
                           or $state[$p:l1] = 35                                      (: '>>' :)
                           or $state[$p:l1] = 69">                                  <!-- 'is' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-NodeComp($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-GeneralComp($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-RangeExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ComparisonExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production AndExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AndExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 42">                                     <!-- 'and' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(42, $input, $state)"/>     <!-- 'and' -->
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ComparisonExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-AndExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse AndExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AndExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ComparisonExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-AndExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AndExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production OrExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-OrExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 78">                                     <!-- 'or' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(78, $input, $state)"/>     <!-- 'or' -->
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-AndExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-OrExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse OrExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-OrExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-AndExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-OrExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'OrExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse IfExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-IfExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(65, $input, $state)"/>             <!-- 'if' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | '(' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(14, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(16, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | 'then' -->
    <xsl:variable name="state" select="p:consume(90, $input, $state)"/>             <!-- 'then' -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(54, $input, $state)"/>             <!-- 'else' -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'IfExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production QuantifiedExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-QuantifiedExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 21">                                     <!-- ',' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(21, $input, $state)"/>     <!-- ',' -->
            <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>  <!-- S^WhiteSpace | '$' | ('(' ':') -->
            <xsl:variable name="state" select="p:consume(13, $input, $state)"/>     <!-- '$' -->
            <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/> <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-VarName($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/>  <!-- S^WhiteSpace | ('(' ':') | 'in' -->
            <xsl:variable name="state" select="p:consume(66, $input, $state)"/>     <!-- 'in' -->
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ExprSingle($input, $state)
            "/>
            <xsl:sequence select="p:parse-QuantifiedExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse QuantifiedExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-QuantifiedExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 88">                                        <!-- 'some' -->
          <xsl:variable name="state" select="p:consume(88, $input, $state)"/>       <!-- 'some' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(57, $input, $state)"/>       <!-- 'every' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '$' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- '$' -->
    <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | 'in' -->
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- 'in' -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-QuantifiedExpr-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(84, $input, $state)"/>             <!-- 'satisfies' -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'QuantifiedExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse FunctionName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-FunctionName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 9">                                         <!-- QName^Token -->
          <xsl:variable name="state" select="p:consume(9, $input, $state)"/>        <!-- QName^Token -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- 'ancestor' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- 'ancestor' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 41">                                        <!-- 'ancestor-or-self' -->
          <xsl:variable name="state" select="p:consume(41, $input, $state)"/>       <!-- 'ancestor-or-self' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 42">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(42, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'cast' -->
          <xsl:variable name="state" select="p:consume(45, $input, $state)"/>       <!-- 'cast' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'castable' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'castable' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'child' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'child' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'descendant' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'descendant' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 50">                                        <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- 'descendant-or-self' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 51">                                        <!-- 'div' -->
          <xsl:variable name="state" select="p:consume(51, $input, $state)"/>       <!-- 'div' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- 'else' -->
          <xsl:variable name="state" select="p:consume(54, $input, $state)"/>       <!-- 'else' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 56">                                        <!-- 'eq' -->
          <xsl:variable name="state" select="p:consume(56, $input, $state)"/>       <!-- 'eq' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 57">                                        <!-- 'every' -->
          <xsl:variable name="state" select="p:consume(57, $input, $state)"/>       <!-- 'every' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 58">                                        <!-- 'except' -->
          <xsl:variable name="state" select="p:consume(58, $input, $state)"/>       <!-- 'except' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 59">                                        <!-- 'following' -->
          <xsl:variable name="state" select="p:consume(59, $input, $state)"/>       <!-- 'following' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 60">                                        <!-- 'following-sibling' -->
          <xsl:variable name="state" select="p:consume(60, $input, $state)"/>       <!-- 'following-sibling' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 61">                                        <!-- 'for' -->
          <xsl:variable name="state" select="p:consume(61, $input, $state)"/>       <!-- 'for' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 62">                                        <!-- 'ge' -->
          <xsl:variable name="state" select="p:consume(62, $input, $state)"/>       <!-- 'ge' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 63">                                        <!-- 'gt' -->
          <xsl:variable name="state" select="p:consume(63, $input, $state)"/>       <!-- 'gt' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 64">                                        <!-- 'idiv' -->
          <xsl:variable name="state" select="p:consume(64, $input, $state)"/>       <!-- 'idiv' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 67">                                        <!-- 'instance' -->
          <xsl:variable name="state" select="p:consume(67, $input, $state)"/>       <!-- 'instance' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 68">                                        <!-- 'intersect' -->
          <xsl:variable name="state" select="p:consume(68, $input, $state)"/>       <!-- 'intersect' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 69">                                        <!-- 'is' -->
          <xsl:variable name="state" select="p:consume(69, $input, $state)"/>       <!-- 'is' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 71">                                        <!-- 'le' -->
          <xsl:variable name="state" select="p:consume(71, $input, $state)"/>       <!-- 'le' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 72">                                        <!-- 'lt' -->
          <xsl:variable name="state" select="p:consume(72, $input, $state)"/>       <!-- 'lt' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 73">                                        <!-- 'mod' -->
          <xsl:variable name="state" select="p:consume(73, $input, $state)"/>       <!-- 'mod' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 74">                                        <!-- 'namespace' -->
          <xsl:variable name="state" select="p:consume(74, $input, $state)"/>       <!-- 'namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 75">                                        <!-- 'ne' -->
          <xsl:variable name="state" select="p:consume(75, $input, $state)"/>       <!-- 'ne' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 78">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(78, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 79">                                        <!-- 'parent' -->
          <xsl:variable name="state" select="p:consume(79, $input, $state)"/>       <!-- 'parent' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 80">                                        <!-- 'preceding' -->
          <xsl:variable name="state" select="p:consume(80, $input, $state)"/>       <!-- 'preceding' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 81">                                        <!-- 'preceding-sibling' -->
          <xsl:variable name="state" select="p:consume(81, $input, $state)"/>       <!-- 'preceding-sibling' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 83">                                        <!-- 'return' -->
          <xsl:variable name="state" select="p:consume(83, $input, $state)"/>       <!-- 'return' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 84">                                        <!-- 'satisfies' -->
          <xsl:variable name="state" select="p:consume(84, $input, $state)"/>       <!-- 'satisfies' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 87">                                        <!-- 'self' -->
          <xsl:variable name="state" select="p:consume(87, $input, $state)"/>       <!-- 'self' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 88">                                        <!-- 'some' -->
          <xsl:variable name="state" select="p:consume(88, $input, $state)"/>       <!-- 'some' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 91">                                        <!-- 'to' -->
          <xsl:variable name="state" select="p:consume(91, $input, $state)"/>       <!-- 'to' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 92">                                        <!-- 'treat' -->
          <xsl:variable name="state" select="p:consume(92, $input, $state)"/>       <!-- 'treat' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(94, $input, $state)"/>       <!-- 'union' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'FunctionName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse QName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-QName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- 'attribute' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'comment' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'comment' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'document-node' -->
          <xsl:variable name="state" select="p:consume(52, $input, $state)"/>       <!-- 'document-node' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- 'element' -->
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- 'element' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 55">                                        <!-- 'empty-sequence' -->
          <xsl:variable name="state" select="p:consume(55, $input, $state)"/>       <!-- 'empty-sequence' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 65">                                        <!-- 'if' -->
          <xsl:variable name="state" select="p:consume(65, $input, $state)"/>       <!-- 'if' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 70">                                        <!-- 'item' -->
          <xsl:variable name="state" select="p:consume(70, $input, $state)"/>       <!-- 'item' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 76">                                        <!-- 'node' -->
          <xsl:variable name="state" select="p:consume(76, $input, $state)"/>       <!-- 'node' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 82">                                        <!-- 'processing-instruction' -->
          <xsl:variable name="state" select="p:consume(82, $input, $state)"/>       <!-- 'processing-instruction' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 85">                                        <!-- 'schema-attribute' -->
          <xsl:variable name="state" select="p:consume(85, $input, $state)"/>       <!-- 'schema-attribute' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 86">                                        <!-- 'schema-element' -->
          <xsl:variable name="state" select="p:consume(86, $input, $state)"/>       <!-- 'schema-element' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 89">                                        <!-- 'text' -->
          <xsl:variable name="state" select="p:consume(89, $input, $state)"/>       <!-- 'text' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 93">                                        <!-- 'typeswitch' -->
          <xsl:variable name="state" select="p:consume(93, $input, $state)"/>       <!-- 'typeswitch' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-FunctionName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'QName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse VarName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-VarName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'VarName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production SimpleForClause (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-SimpleForClause-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 21">                                     <!-- ',' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(21, $input, $state)"/>     <!-- ',' -->
            <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>  <!-- S^WhiteSpace | '$' | ('(' ':') -->
            <xsl:variable name="state" select="p:consume(13, $input, $state)"/>     <!-- '$' -->
            <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/> <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-VarName($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/>  <!-- S^WhiteSpace | ('(' ':') | 'in' -->
            <xsl:variable name="state" select="p:consume(66, $input, $state)"/>     <!-- 'in' -->
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ExprSingle($input, $state)
            "/>
            <xsl:sequence select="p:parse-SimpleForClause-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse SimpleForClause.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-SimpleForClause" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(61, $input, $state)"/>             <!-- 'for' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '$' | ('(' ':') -->
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- '$' -->
    <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ('(' ':') | 'ancestor' |
                                                                                         'ancestor-or-self' | 'and' | 'attribute' | 'cast' | 'castable' |
                                                                                         'child' | 'comment' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'else' | 'empty-sequence' | 'eq' |
                                                                                         'every' | 'except' | 'following' | 'following-sibling' | 'for' | 'ge' |
                                                                                         'gt' | 'idiv' | 'if' | 'instance' | 'intersect' | 'is' | 'item' |
                                                                                         'le' | 'lt' | 'mod' | 'namespace' | 'ne' | 'node' | 'or' | 'parent' |
                                                                                         'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                                                                         'return' | 'satisfies' | 'schema-attribute' | 'schema-element' |
                                                                                         'self' | 'some' | 'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-VarName($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/>          <!-- S^WhiteSpace | ('(' ':') | 'in' -->
    <xsl:variable name="state" select="p:consume(66, $input, $state)"/>             <!-- 'in' -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-SimpleForClause-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'SimpleForClause', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ForExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ForExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-SimpleForClause($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(83, $input, $state)"/>             <!-- 'return' -->
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ForExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ExprSingle.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ExprSingle" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 65">                                       <!-- 'if' -->
          <xsl:variable name="state" select="p:lookahead2W(22, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ('(' ':') | ')' | '*' | '+' | ',' |
                                                                                         '-' | '/' | '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                                                                         ']' | 'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' | 'except' |
                                                                                         'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' |
                                                                                         'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' | 'treat' |
                                                                                         'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (57,                                          (: 'every' :)
                                         61,                                          (: 'for' :)
                                         88)">                                      <!-- 'some' -->
          <xsl:variable name="state" select="p:lookahead2W(24, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '$' | '(' | ('(' ':') | ')' | '*' | '+' |
                                                                                         ',' | '-' | '/' | '//' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                                                                         '[' | ']' | 'and' | 'cast' | 'castable' | 'div' | 'else' | 'eq' |
                                                                                         'except' | 'ge' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'is' |
                                                                                         'le' | 'lt' | 'mod' | 'ne' | 'or' | 'return' | 'satisfies' | 'to' |
                                                                                         'treat' | 'union' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 1725">                                      <!-- 'for' '$' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ForExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 1721                                          (: 'every' '$' :)
                     or $state[$p:lk] = 1752">                                      <!-- 'some' '$' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QuantifiedExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 1857">                                      <!-- 'if' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-IfExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-OrExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ExprSingle', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production Expr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Expr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 21">                                     <!-- ',' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(21, $input, $state)"/>     <!-- ',' -->
            <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ExprSingle($input, $state)
            "/>
            <xsl:sequence select="p:parse-Expr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse Expr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Expr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-Expr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Expr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse XPath.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-XPath" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '$' | '(' | ('(' ':') | '+' |
                                                                                         '-' | '.' | '..' | '/' | '//' | '@' | 'ancestor' | 'ancestor-or-self' |
                                                                                         'and' | 'attribute' | 'cast' | 'castable' | 'child' | 'comment' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'else' | 'empty-sequence' | 'eq' | 'every' | 'except' |
                                                                                         'following' | 'following-sibling' | 'for' | 'ge' | 'gt' | 'idiv' |
                                                                                         'if' | 'instance' | 'intersect' | 'is' | 'item' | 'le' | 'lt' | 'mod' |
                                                                                         'namespace' | 'ne' | 'node' | 'or' | 'parent' | 'preceding' |
                                                                                         'preceding-sibling' | 'processing-instruction' | 'return' |
                                                                                         'satisfies' | 'schema-attribute' | 'schema-element' | 'self' | 'some' |
                                                                                         'text' | 'to' | 'treat' | 'typeswitch' | 'union' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(2, $input, $state)"/>              <!-- EOF -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'XPath', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x or $error/@ambiguous-input) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;',
          'while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 6),
          0, 0, 0,
          subsequence($state, 10),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 6),
          0, 0, 0,
          subsequence($state, 10)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume whitespace.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:whitespace" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="end" select="$state[$p:b1]"/>
    <xsl:choose>
      <xsl:when test="$begin eq $end">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="whitespace">
          <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
        </xsl:variable>
        <xsl:sequence select="
          0,
          $state[$p:b0],
          $end,
          subsequence($state, $p:e0 + 1),
          $whitespace/node()
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Use p:match to fetch the next token, but skip any leading
   ! whitespace.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start.
   ! @param $token-set the valid token set id.
   ! @return a sequence of three values: the token code of the result
   ! token, with input string positions of token begin and end.
  -->
  <xsl:function name="p:matchW">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="match" select="p:match($input, $begin, $token-set)"/>
    <xsl:choose>
      <xsl:when test="$match[1] = 10">                                              <!-- S^WhiteSpace -->
        <xsl:sequence select="p:matchW($input, $match[3], $token-set)"/>
      </xsl:when>
      <xsl:when test="$match[1] = 15">                                              <!-- ('(' ':') -->
        <xsl:variable name="state" select="p:try-WhiteSpace($input, (0, $begin, $begin, $match, 0, 0, 0, false()))"/>
        <xsl:sequence select="p:matchW($input, $state[$p:e0], $token-set)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$match"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:matchW($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 3)
      else
        p:matchW($input, $state[$p:e1], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 128 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 10)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Parse start symbol XPath from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-XPath" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, false()"/>
    <xsl:variable name="state" select="p:parse-XPath($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

</xsl:stylesheet>