<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:m="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
           xmlns:everything="http://csrc.nist.gov/metaschema/ns/everything"
           xmlns:oscal-prose="http://csrc.nist.gov/metaschema/ns/everything"
           elementFormDefault="qualified"
           targetNamespace="http://csrc.nist.gov/metaschema/ns/everything"
           version="1.0">
   <xs:annotation>
      <xs:appinfo>
         <m:schema-name>NIST Metaschema Everything</m:schema-name>
         <m:schema-version>1.0</m:schema-version>
         <m:short-name>everything</m:short-name>
         <m:remarks>
            <p>A mini metaschema produced for <em>conversion</em> testing purposes.</p>
            <p>This metaschema exercises modeling with global definitions. It does not exercise datatypes, constraints, or cardinality except as reflected in models (where grouping must be explicit).</p>
            <p>When this is stable and working, extend to include local definitions.</p>
            <p>Also cover <code>use-name</code> as appropriate.</p>
         </m:remarks>
         <m:root>EVERYTHING</m:root>
         <m:root>ASSEMBLY-1ONLY</m:root>
      </xs:appinfo>
   </xs:annotation>
   <xs:element name="EVERYTHING" type="everything:everything-everything-ASSEMBLY"/>
   <xs:complexType name="everything-everything-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>EVERYTHING</m:formal-name>
            <m:description>assembly everything</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>EVERYTHING</b>: assembly everything</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="field-1only"
                     type="everything:everything-field-1only-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="overloaded1"
                     type="everything:everything-overloaded-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="overloaded2"
                     type="everything:everything-overloaded-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="field-base64"
                     type="everything:everything-field-base64-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="field-boolean"
                     type="everything:everything-field-boolean-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="field-named-value"
                     type="everything:everything-field-named-value-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="markup-line"
                     type="everything:everything-markup-line-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="field-simple-groupable"
                     type="everything:everything-field-simple-groupable-FIELD"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="field-flagged-groupable"
                     type="everything:everything-field-flagged-groupable-FIELD"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="wrapped-fields" minOccurs="0" maxOccurs="1">
            <xs:complexType>
               <xs:sequence>
                  <xs:element name="field-wrappable"
                              type="everything:everything-field-wrappable-FIELD"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:complexType>
         </xs:element>
         <xs:element name="field-by-key"
                     type="everything:everything-field-by-key-FIELD"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="field-dynamic-value-key"
                     type="everything:everything-field-dynamic-value-key-FIELD"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="wrapped-prose" minOccurs="0" maxOccurs="1">
            <xs:annotation>
               <xs:appinfo>
                  <m:formal-name>WRAPPED-PROSE</m:formal-name>
                  <m:description>field wrapped-prose</m:description>
               </xs:appinfo>
               <xs:documentation>
                  <b>WRAPPED-PROSE</b>: field wrapped-prose</xs:documentation>
            </xs:annotation>
            <xs:complexType>
               <xs:group ref="everything:blockElementGroup"
                         maxOccurs="unbounded"
                         minOccurs="0"/>
            </xs:complexType>
         </xs:element>
         <xs:group ref="everything:blockElementGroup"
                   maxOccurs="unbounded"
                   minOccurs="0"/>
         <xs:element name="branch1"
                     type="everything:everything-branch1-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="branch2"
                     type="everything:everything-branch2-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="assembly-empty"
                     type="everything:everything-assembly-empty-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="assembly-empty-grouped"
                     type="everything:everything-assembly-empty-grouped-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="alias"
                     type="everything:everything-assembly-alias1-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="assembly-1only"
                     type="everything:everything-assembly-1only-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="assembly-groupable"
                     type="everything:everything-assembly-groupable-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="wrapped-assemblies" minOccurs="0" maxOccurs="1">
            <xs:complexType>
               <xs:sequence>
                  <xs:element name="assembly-wrappable"
                              type="everything:everything-assembly-wrappable-ASSEMBLY"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:complexType>
         </xs:element>
         <xs:element name="assembly-by-key"
                     type="everything:everything-assembly-by-key-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="everything"
                     type="everything:everything-everything-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="id" type="everything:string">
         <xs:annotation>
            <xs:appinfo>
               <m:formal-name>ID</m:formal-name>
               <m:description>flag id</m:description>
            </xs:appinfo>
            <xs:documentation>
               <b>ID</b>: flag id</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="everything-overloaded-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>OVERLOADED</m:formal-name>
            <m:description>Overloaded field</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>OVERLOADED</b>: Overloaded field</xs:documentation>
      </xs:annotation>
      <xs:simpleContent>
         <xs:extension base="everything:string">
            <xs:attribute name="simple-flag" type="everything:string">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>Simple Flag</m:formal-name>
                     <m:description>some string</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>Simple Flag</b>: some string</xs:documentation>
               </xs:annotation>
            </xs:attribute>
            <xs:attribute name="integer-flag" type="xs:integer">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>Integer Flag</m:formal-name>
                     <m:description>an integer</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>Integer Flag</b>: an integer</xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:simpleContent>
   </xs:complexType>
   <xs:complexType name="everything-field-1only-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-1ONLY</m:formal-name>
            <m:description>field field-1only</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-1ONLY</b>: field field-1only</xs:documentation>
      </xs:annotation>
      <xs:simpleContent>
         <xs:extension base="everything:string">
            <xs:attribute name="simple-flag" type="everything:string">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>Simple Flag</m:formal-name>
                     <m:description>some string</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>Simple Flag</b>: some string</xs:documentation>
               </xs:annotation>
            </xs:attribute>
            <xs:attribute name="integer-flag" type="xs:integer">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>Integer Flag</m:formal-name>
                     <m:description>an integer</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>Integer Flag</b>: an integer</xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:simpleContent>
   </xs:complexType>
   <xs:simpleType name="everything-field-base64-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-BASE64</m:formal-name>
            <m:description>field field-base64</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-BASE64</b>: field field-base64</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:base64Binary"/>
   </xs:simpleType>
   <xs:simpleType name="everything-field-boolean-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-BOOLEAN</m:formal-name>
            <m:description>field field-boolean</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-BOOLEAN</b>: field field-boolean</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:boolean"/>
   </xs:simpleType>
   <xs:complexType name="everything-field-simple-groupable-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-SIMPLE-GROUPABLE</m:formal-name>
            <m:description>simple field, groupable</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-SIMPLE-GROUPABLE</b>: simple field, groupable</xs:documentation>
      </xs:annotation>
      <xs:simpleContent>
         <xs:extension base="everything:string">
            <xs:attribute name="simple-flag" type="everything:string">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>Simple Flag</m:formal-name>
                     <m:description>some string</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>Simple Flag</b>: some string</xs:documentation>
               </xs:annotation>
            </xs:attribute>
            <xs:attribute name="integer-flag" type="xs:integer">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>Integer Flag</m:formal-name>
                     <m:description>an integer</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>Integer Flag</b>: an integer</xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:simpleContent>
   </xs:complexType>
   <xs:complexType name="everything-field-flagged-groupable-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-FLAGGED-GROUPABLE</m:formal-name>
            <m:description>field field-groupable</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-FLAGGED-GROUPABLE</b>: field field-groupable</xs:documentation>
      </xs:annotation>
      <xs:simpleContent>
         <xs:extension base="everything:string">
            <xs:attribute name="flagged-date" type="xs:date">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>Date flag</m:formal-name>
                     <m:description>A flag for a date</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>Date flag</b>: A flag for a date</xs:documentation>
               </xs:annotation>
            </xs:attribute>
            <xs:attribute name="flagged-decimal" type="xs:decimal">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>Decimal flag</m:formal-name>
                     <m:description>A flag with a decimal value</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>Decimal flag</b>: A flag with a decimal value</xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:simpleContent>
   </xs:complexType>
   <xs:simpleType name="everything-field-wrappable-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-WRAPPABLE</m:formal-name>
            <m:description>field field-wrappable</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-WRAPPABLE</b>: field field-wrappable</xs:documentation>
      </xs:annotation>
      <xs:restriction base="everything:string"/>
   </xs:simpleType>
   <xs:complexType name="everything-field-by-key-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-BY-KEY</m:formal-name>
            <m:description>field field-by-key</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-BY-KEY</b>: field field-by-key</xs:documentation>
      </xs:annotation>
      <xs:simpleContent>
         <xs:extension base="everything:string">
            <xs:attribute name="id" use="required" type="everything:string">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>ID</m:formal-name>
                     <m:description>flag id</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>ID</b>: flag id</xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:simpleContent>
   </xs:complexType>
   <xs:complexType name="everything-field-named-value-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-NAMED-VALUE</m:formal-name>
            <m:description>field field-named-value</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-NAMED-VALUE</b>: field field-named-value</xs:documentation>
      </xs:annotation>
      <xs:simpleContent>
         <xs:extension base="everything:string">
            <xs:attribute name="id" use="required" type="everything:string">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>ID</m:formal-name>
                     <m:description>flag id</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>ID</b>: flag id</xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:simpleContent>
   </xs:complexType>
   <xs:complexType name="everything-field-dynamic-value-key-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>FIELD-DYNAMIC-VALUE-KEY</m:formal-name>
            <m:description>field field-dynamic-value-key</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>FIELD-DYNAMIC-VALUE-KEY</b>: field field-dynamic-value-key</xs:documentation>
      </xs:annotation>
      <xs:simpleContent>
         <xs:extension base="everything:string">
            <xs:attribute name="id" use="required" type="everything:string">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>ID</m:formal-name>
                     <m:description>flag id</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>ID</b>: flag id</xs:documentation>
               </xs:annotation>
            </xs:attribute>
            <xs:attribute name="color" type="everything:string">
               <xs:annotation>
                  <xs:appinfo>
                     <m:formal-name>COLOR</m:formal-name>
                     <m:description>flag color</m:description>
                  </xs:appinfo>
                  <xs:documentation>
                     <b>COLOR</b>: flag color</xs:documentation>
               </xs:annotation>
            </xs:attribute>
         </xs:extension>
      </xs:simpleContent>
   </xs:complexType>
   <xs:complexType mixed="true" name="everything-markup-line-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>MARKUP-LINE</m:formal-name>
            <m:description>field markup-line</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>MARKUP-LINE</b>: field markup-line</xs:documentation>
      </xs:annotation>
      <xs:complexContent>
         <xs:extension base="everything:markupLineType"/>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="everything-wrapped-prose-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>WRAPPED-PROSE</m:formal-name>
            <m:description>field wrapped-prose</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>WRAPPED-PROSE</b>: field wrapped-prose</xs:documentation>
      </xs:annotation>
      <xs:complexContent>
         <xs:extension base="everything:markupMultilineType"/>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="everything-loose-prose-FIELD">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>LOOSE-PROSE</m:formal-name>
            <m:description>field loose-prose</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>LOOSE-PROSE</b>: field loose-prose</xs:documentation>
      </xs:annotation>
      <xs:complexContent>
         <xs:extension base="everything:markupMultilineType"/>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="everything-branch1-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>branch 1 for OVERLOAD1</m:formal-name>
            <m:description>A discrete containter for objects with overloaded names.</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>branch 1 for OVERLOAD1</b>: A discrete containter for objects with overloaded names.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="OVERLOAD"
                     type="everything:everything-overload1-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="everything-branch2-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>branch 2 for OVERLOAD2</m:formal-name>
            <m:description>A discrete containter for objects with overloaded names.</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>branch 2 for OVERLOAD2</b>: A discrete containter for objects with overloaded names.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="OVERLOAD"
                     type="everything:everything-overload2-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="everything-overload1-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>Overloaded name 1</m:formal-name>
            <m:description>The first object with an overloaded name</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>Overloaded name 1</b>: The first object with an overloaded name</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="OVERLOAD"
                     type="everything:everything-overload1-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="a" type="everything:string">
         <xs:annotation>
            <xs:appinfo>
               <m:formal-name>An OVERLOAD/@a</m:formal-name>
               <m:description>A flag on an assembly called 'OVERLOAD'</m:description>
            </xs:appinfo>
            <xs:documentation>
               <b>An OVERLOAD/@a</b>: A flag on an assembly called 'OVERLOAD'</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="everything-overload2-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>Overloaded name 2</m:formal-name>
            <m:description>The second object with an overloaded name</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>Overloaded name 2</b>: The second object with an overloaded name</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="OVERLOAD"
                     type="everything:everything-overload2-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="z" type="everything:string">
         <xs:annotation>
            <xs:appinfo>
               <m:formal-name>An OVERLOAD/@z</m:formal-name>
               <m:description>A flag on an assembly called 'OVERLOAD'</m:description>
            </xs:appinfo>
            <xs:documentation>
               <b>An OVERLOAD/@z</b>: A flag on an assembly called 'OVERLOAD'</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="everything-assembly-empty-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>ASSEMBLY-EMPTY</m:formal-name>
            <m:description>assembly assembly-empty</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>ASSEMBLY-EMPTY</b>: assembly assembly-empty</xs:documentation>
      </xs:annotation>
      <xs:attribute name="id" use="required" type="everything:string">
         <xs:annotation>
            <xs:appinfo>
               <m:formal-name>ID</m:formal-name>
               <m:description>flag id</m:description>
            </xs:appinfo>
            <xs:documentation>
               <b>ID</b>: flag id</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="everything-assembly-empty-grouped-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>ASSEMBLY-EMPTY-GROUPED</m:formal-name>
            <m:description>assembly assembly-empty-grouped</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>ASSEMBLY-EMPTY-GROUPED</b>: assembly assembly-empty-grouped</xs:documentation>
      </xs:annotation>
      <xs:attribute name="id" use="required" type="everything:string">
         <xs:annotation>
            <xs:appinfo>
               <m:formal-name>ID</m:formal-name>
               <m:description>flag id</m:description>
            </xs:appinfo>
            <xs:documentation>
               <b>ID</b>: flag id</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:element name="ASSEMBLY-1ONLY"
               type="everything:everything-assembly-1only-ASSEMBLY"/>
   <xs:complexType name="everything-assembly-1only-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>ASSEMBLY-1ONLY</m:formal-name>
            <m:description>assembly assembly-1only</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>ASSEMBLY-1ONLY</b>: assembly assembly-1only</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="field-1only"
                     type="everything:everything-field-1only-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="assembly-1only"
                     type="everything:everything-assembly-1only-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="everything-assembly-alias1-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>ASSEMBLY-ALIASED 1</m:formal-name>
            <m:description>first aliased assembly (has a name conflict)</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>ASSEMBLY-ALIASED 1</b>: first aliased assembly (has a name conflict)</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="field-1only"
                     type="everything:everything-field-1only-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="assembly-1only"
                     type="everything:everything-assembly-1only-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="alias"
                     type="everything:everything-assembly-alias2-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="everything-assembly-alias2-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>ASSEMBLY-ALIASED 2</m:formal-name>
            <m:description>second aliased assembly (has a name conflict)</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>ASSEMBLY-ALIASED 2</b>: second aliased assembly (has a name conflict)</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="assembly-1only"
                     type="everything:everything-assembly-1only-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="1"/>
         <xs:element name="field-1only"
                     type="everything:everything-field-1only-FIELD"
                     minOccurs="0"
                     maxOccurs="1"/>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="everything-assembly-groupable-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>ASSEMBLY-GROUPABLE</m:formal-name>
            <m:description>assembly assembly-groupable</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>ASSEMBLY-GROUPABLE</b>: assembly assembly-groupable</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="field-simple-groupable"
                     type="everything:everything-field-simple-groupable-FIELD"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="assembly-groupable"
                     type="everything:everything-assembly-groupable-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="everything-assembly-wrappable-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>ASSEMBLY-WRAPPABLE</m:formal-name>
            <m:description>assembly assembly-wrappable</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>ASSEMBLY-WRAPPABLE</b>: assembly assembly-wrappable</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="wrapped-fields" minOccurs="0" maxOccurs="1">
            <xs:complexType>
               <xs:sequence>
                  <xs:element name="field-wrappable"
                              type="everything:everything-field-wrappable-FIELD"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:complexType>
         </xs:element>
         <xs:element name="wrapped-assemblies" minOccurs="0" maxOccurs="1">
            <xs:complexType>
               <xs:sequence>
                  <xs:element name="assembly-wrappable"
                              type="everything:everything-assembly-wrappable-ASSEMBLY"
                              minOccurs="0"
                              maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:complexType>
         </xs:element>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="everything-assembly-by-key-ASSEMBLY">
      <xs:annotation>
         <xs:appinfo>
            <m:formal-name>ASSEMBLY-BY-KEY</m:formal-name>
            <m:description>assembly assembly-by-key</m:description>
         </xs:appinfo>
         <xs:documentation>
            <b>ASSEMBLY-BY-KEY</b>: assembly assembly-by-key</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element name="field-by-key"
                     type="everything:everything-field-by-key-FIELD"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
         <xs:element name="assembly-by-key"
                     type="everything:everything-assembly-by-key-ASSEMBLY"
                     minOccurs="0"
                     maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="id" use="required" type="everything:string">
         <xs:annotation>
            <xs:appinfo>
               <m:formal-name>ID</m:formal-name>
               <m:description>flag id</m:description>
            </xs:appinfo>
            <xs:documentation>
               <b>ID</b>: flag id</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="markupLineType" mixed="true">
      <xs:group ref="everything:mixedInlineMarkupGroup"/>
   </xs:complexType>
   <xs:complexType name="markupMultilineType">
      <xs:group ref="everything:blockElementGroup"/>
   </xs:complexType>
   <xs:group name="blockElementGroup">
      <xs:sequence>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="h1" type="everything:blockElementType"/>
            <xs:element name="h2" type="everything:blockElementType"/>
            <xs:element name="h3" type="everything:blockElementType"/>
            <xs:element name="h4" type="everything:blockElementType"/>
            <xs:element name="h5" type="everything:blockElementType"/>
            <xs:element name="h6" type="everything:blockElementType"/>
            <xs:element name="p" type="everything:blockElementType"/>
            <xs:element name="ul" type="everything:listType"/>
            <xs:element name="ol" type="everything:listType"/>
            <xs:element name="pre" type="everything:preformattedType"/>
            <xs:element name="table" type="everything:tableType"/>
            <!-- TODO: need to add support for blockquote, which can contain block elements. usnistgov/metaschema#70 -->
         </xs:choice>
      </xs:sequence>
   </xs:group>
   <!--
    headers: phrase inline markup, a, insert (phrase)
    p: phrase inline markup, a, insert, img (phrase+img)
    li: phrase inline markup, a, insert, img (phrase+img)
    pre: phrase inline markup, a, insert (phrase)
    td th: phrase inline markup, a, insert, img (phrase+img)
  -->
   <xs:complexType name="blockElementType" mixed="true">
      <xs:group ref="everything:phraseInlineMarkupGroup"/>
   </xs:complexType>
   <xs:complexType name="headingType" mixed="true">
      <xs:complexContent>
         <xs:extension base="everything:blockElementType">
            <xs:annotation>
               <xs:documentation>The content model is the same as blockElementType, but line endings need
            to be preserved, since this is preformatted.</xs:documentation>
            </xs:annotation>
         </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="preformattedType" mixed="true">
      <xs:complexContent>
         <xs:extension base="everything:blockElementType">
            <xs:annotation>
               <xs:documentation>The content model is the same as blockElementType, but line endings need
            to be preserved, since this is preformatted.</xs:documentation>
            </xs:annotation>
         </xs:extension>
      </xs:complexContent>
   </xs:complexType>
   <xs:complexType name="listType">
      <xs:sequence>
         <xs:element name="li"
                     type="everything:listItemType"
                     minOccurs="1"
                     maxOccurs="unbounded"/>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="listItemType" mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
         <xs:group ref="everything:mixedInlineMarkupGroup"/>
         <xs:element name="ul" type="everything:listType"/>
         <xs:element name="ol" type="everything:listType"/>
      </xs:choice>
   </xs:complexType>
   <xs:complexType name="tableType">
      <xs:sequence>
         <xs:element maxOccurs="unbounded" name="tr" type="everything:tableRowType"/>
      </xs:sequence>
   </xs:complexType>
   <xs:complexType name="tableRowType"><!-- QUESTION: Should we allow TH and TD to be mixed? -->
      <xs:choice minOccurs="0" maxOccurs="unbounded">
         <xs:element name="td" type="everything:tableCellType" maxOccurs="unbounded"/>
         <xs:element name="th" type="everything:tableCellType" maxOccurs="unbounded"/>
      </xs:choice>
   </xs:complexType>
   <xs:complexType name="tableCellType" mixed="true">
      <xs:group ref="everything:mixedInlineMarkupGroup"/>
      <!-- TODO: consider adding a choice between the inline or paragraphs. We need to figure out what is supported in Markdown. -->
      <xs:attribute name="align" type="everything:alignType" default="left"/>
      <!-- TODO: need to add support for alignment. usnistgov/metaschema#70 -->
   </xs:complexType>
   <xs:simpleType name="alignType">
      <xs:restriction base="xs:token">
         <xs:enumeration value="left"/>
         <xs:enumeration value="center"/>
         <xs:enumeration value="right"/>
      </xs:restriction>
   </xs:simpleType>
   <!-- note mix does not include anchors, which do not come for free -->
   <xs:group name="mixedInlineMarkupGroup">
      <xs:sequence>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="everything:phraseInlineMarkupGroup"/>
            <xs:element name="img" type="everything:imageType"/>
         </xs:choice>
      </xs:sequence>
   </xs:group>
   <xs:group name="phraseInlineMarkupGroup">
      <xs:sequence>
         <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="code" type="everything:inlineMarkupType" minOccurs="1"/>
            <xs:element name="em" type="everything:inlineMarkupType" minOccurs="1"/>
            <xs:element name="i" type="everything:inlineMarkupType" minOccurs="1"/>
            <xs:element name="b" type="everything:inlineMarkupType" minOccurs="1"/>
            <xs:element name="strong" type="everything:inlineMarkupType" minOccurs="1"/>
            <xs:element name="sub" type="everything:inlineMarkupType" minOccurs="1"/>
            <xs:element name="sup" type="everything:inlineMarkupType" minOccurs="1"/>
            <xs:element name="q" type="everything:inlineMarkupType" minOccurs="1"/>
            <xs:element name="insert" type="everything:insertType"/>
            <xs:element name="a" type="everything:anchorType"/>
         </xs:choice>
      </xs:sequence>
   </xs:group>
   <xs:complexType name="inlineMarkupType" mixed="true">
      <xs:group ref="everything:phraseInlineMarkupGroup"/>
   </xs:complexType>
   <xs:complexType name="imageType">
      <xs:attribute name="alt" type="xs:string"/>
      <xs:attribute name="src" use="required" type="xs:anyURI"/>
   </xs:complexType>
   <xs:complexType name="anchorType" mixed="true">
      <xs:group ref="everything:phraseInlineMarkupGroup"/>
      <xs:attribute name="href" type="xs:anyURI"/>
   </xs:complexType>
   <!--
    A value to be assigned by responder via parameter
    (a parameter must be available)
  -->
   <xs:complexType name="insertType">
      <xs:annotation>
         <xs:documentation>An insert can be used to identify a placeholder for dynamically inserting text related to a specific object, which is referenced by the object's identifier using an <code xmlns="http://csrc.nist.gov/ns/oscal/1.0">id-ref</code>. This insert mechanism allows the selection of which text value from the object to dynamically include based on the application's display requirements.</xs:documentation>
      </xs:annotation>
      <xs:attribute name="type" use="required" type="xs:NCName">
         <xs:annotation>
            <xs:documentation>The type of object to include from (e.g., parameter, control, component, role, etc.)</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id-ref" use="required" type="xs:NCName">
         <xs:annotation>
            <xs:documentation>The identity of the object to insert a value for. The identity will be selected from the index of objects of the specified <code xmlns="http://csrc.nist.gov/ns/oscal/1.0">type</code>. The specific value to include is based on the application's display requirements, which will likely use a specific data element associated with the <code xmlns="http://csrc.nist.gov/ns/oscal/1.0">type</code> (e.g., title, identifier, value, etc.) that is appropriate for the application.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <!--
    Within a selection, a choice - tbd
    unlike 'value', choice may have inline stuff as well as 'assign' elements
    choice = element choice { (assign | mix)* }
  -->
   <!--
    IDs are required everywhere for now
    idAttr      = attribute id { xsd:ID }
  -->
   <xs:simpleType name="string">
      <xs:annotation>
         <xs:documentation>A string, but not empty and not whitespace-only (whitespace is U+9, U+10, U+32 or [ \n\t]+ )</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:whiteSpace value="preserve"/>
         <xs:pattern value="\S(.*\S)?">
            <xs:annotation>
               <xs:documentation>A trimmed string, at least one character with no leading or trailing whitespace.</xs:documentation>
            </xs:annotation>
         </xs:pattern>
      </xs:restriction>
   </xs:simpleType>
</xs:schema>
