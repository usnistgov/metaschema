<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Tue May 19, 2020 16:10 (UTC-04) by REx v5.50 which is Copyright (c) 1979-2020 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: metapath02.ebnf -backtrack -xslt -name metapath02 -tree -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="metapath02">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    48, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 15, 4, 16, 17, 18, 19, 20, 21, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
    21, 21, 23, 4, 24, 4, 21, 4, 25, 26, 27, 28, 29, 30, 31, 32, 33, 21, 21, 34, 35, 36, 37, 38, 21, 39, 40, 41, 42, 43, 44, 45, 21, 21, 4, 46, 4, 4, 4
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214,
    214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 247, 261, 277, 293, 309, 331, 370, 386, 423, 423, 423, 415, 354, 346, 354, 346,
    354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 440, 440, 440, 440, 440, 440, 440, 315, 354, 354, 354, 354, 354, 354, 354,
    354, 399, 423, 423, 424, 422, 423, 423, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 423, 423, 423, 423, 423,
    423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 353, 354, 354, 354,
    354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 354, 423, 48, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 15, 4, 16, 17, 18, 19, 20, 21, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 4, 21, 21, 21, 21, 21, 21, 21,
    21, 21, 21, 21, 21, 23, 4, 24, 4, 21, 21, 21, 21, 21, 21, 21, 4, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 4, 25, 26, 27, 28, 29, 30,
    31, 32, 33, 21, 21, 34, 35, 36, 37, 38, 21, 39, 40, 41, 42, 43, 44, 45, 21, 21, 4, 46, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 21, 21, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 47, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 4, 21, 4, 21, 21, 4
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1024, 1, 2, 3, 1025, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 1568, 1575, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3677, 1658, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858,
    1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3380, 2357, 1818, 2539, 1688, 1620, 1870, 2086,
    2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3204,
    1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 3670, 4320, 1818, 2539, 1704, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 1720, 1734, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642,
    1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 1775, 1788, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915,
    1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2663, 1804, 1818, 2539,
    1591, 1672, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 4710, 1844, 1818, 2539, 1591, 1620, 2371, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 1886, 1901, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4039, 1931, 1968, 4032, 1961, 3300, 3065, 3839, 4413, 4117, 4021, 4765,
    4768, 4500, 1984, 4545, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2009, 1968, 4032, 2049, 3300,
    2974, 3839, 4413, 4117, 4021, 4765, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2253, 2072, 1818, 4334, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2102, 1968, 2127, 2143, 3300, 2918, 3839, 3889, 4117, 4021, 4765, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2166, 2205, 2235, 2246, 2269, 2219, 2430, 2285, 2342, 2387, 2403, 2300, 2418, 2314,
    2446, 2455, 2326, 2471, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3488, 2514, 1818, 2539, 1591, 1620, 1870, 2086,
    2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3558, 2563,
    1818, 1748, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2189, 2621, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2181, 3204, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642,
    1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2679, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915,
    1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4081, 2695, 1968, 4032,
    3832, 2023, 2826, 3839, 3310, 4117, 4021, 4765, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 4081, 2695, 1968, 4032, 2736, 2023, 2946, 3839, 3310, 4117, 4021, 4765, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4343, 2759, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3387, 2775, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823,
    2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2592, 2605, 1968, 4032, 2791, 2023,
    2826, 3839, 3310, 4117, 4021, 4765, 2814, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    4081, 2695, 1968, 4032, 3832, 2023, 2826, 3839, 3310, 4117, 2842, 4765, 4768, 4510, 4163, 4253, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 3192, 2890, 1968, 4032, 3832, 2116, 3037, 4225, 3820, 4117, 4021, 4765, 4787, 4510, 4163, 4165, 3628, 3106, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2485, 2498, 1968, 4032, 3149, 3051, 3220, 3839, 3310, 4403, 4021, 4752, 4768, 4510,
    4470, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2651, 3257, 3164, 3481, 3287, 2988, 3326, 3879,
    3403, 3452, 4372, 3419, 3422, 4818, 4163, 3234, 3918, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4081, 3438,
    1968, 4032, 3832, 2023, 2826, 3514, 2854, 4117, 4021, 4765, 4768, 4510, 4163, 4165, 4566, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 4081, 2695, 1968, 4032, 3832, 2023, 2826, 3839, 3310, 4117, 4021, 4765, 4768, 4828, 4163, 4165, 4656, 3178, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4081, 2695, 3468, 4032, 3832, 2023, 2826, 3839, 3310, 4117, 4021, 4765, 4768, 4510, 4163, 4165,
    3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4698, 2695, 3708, 3791, 3504, 2709, 2826, 3839, 3310, 3540,
    4021, 4194, 3574, 4510, 3602, 4165, 3618, 3644, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4081, 3693, 3271, 4032,
    3832, 3780, 3765, 3807, 2033, 4117, 4021, 4765, 4768, 4510, 4163, 3241, 3021, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 3120, 3133, 1968, 4032, 3832, 2023, 4635, 3079, 3855, 2874, 3905, 4765, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3368, 3944, 2056, 2720, 3832, 2023, 2826, 3839, 3310, 4117, 3960, 4289, 3976, 3992, 4163, 4008, 3011, 3354,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3736, 3749, 1945, 4055, 4109, 4133, 2826, 3839, 3310, 4117, 4149, 4765,
    4768, 4510, 4181, 4165, 3623, 3722, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 3658, 4210, 1968, 4032, 3832, 2023,
    2826, 3839, 3310, 4117, 4021, 4276, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    4081, 2695, 4440, 4305, 3832, 2023, 3586, 2798, 3310, 4117, 4021, 4765, 4768, 4510, 4163, 4359, 3001, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 4069, 4388, 1968, 4032, 4429, 2960, 2826, 3839, 3310, 4117, 4456, 4486, 4768, 4510, 4536, 1993, 4561, 3178, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4686, 4582, 2150, 3551, 4598, 2904, 2826, 4607, 3090, 4117, 4021, 4739, 4623, 4520,
    4163, 4260, 4651, 4672, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4081, 2695, 1968, 4032, 3832, 2023, 2826, 2743,
    3524, 4117, 4021, 4726, 4768, 4510, 4163, 4165, 3928, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4081, 2695,
    1968, 4032, 3867, 2932, 4239, 3839, 3310, 4117, 4021, 4765, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 4081, 2695, 1968, 4032, 3832, 2023, 2826, 3839, 3310, 4117, 4021, 4784, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4081, 2695, 1968, 4032, 3832, 3340, 4803, 3839, 3310, 4117, 4021, 4765, 4768, 4510, 4163, 4165,
    3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 1759, 4844, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915,
    1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 4093, 1968, 4032,
    2866, 3300, 2826, 3839, 3310, 4117, 4021, 4765, 4768, 4510, 4163, 4165, 3623, 3178, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2547, 4860, 1818, 2539, 1591, 1620, 1870, 2086, 2636, 1915, 1607, 1823, 2529, 1858, 1636, 1642, 1828, 2578, 2546, 2546, 2546, 2546, 2546, 2546,
    2546, 2546, 2546, 2546, 2546, 2546, 2546, 2546, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 5657, 0, 0, 28,
    29, 70144, 70656, 70656, 67584, 70656, 70656, 0, 0, 0, 0, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 102400, 108032, 70656, 98304, 70656,
    70656, 0, 70656, 86528, 70656, 70656, 70656, 70656, 86528, 70656, 70656, 70656, 0, 0, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 102400,
    70656, 92672, 100352, 87552, 70656, 87552, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 89088, 70656, 89088, 70656, 70656,
    70656, 56, 56, 56, 0, 0, 0, 56, 56, 0, 0, 0, 28, 29, 70144, 70656, 70656, 70656, 0, 4096, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656,
    102400, 70656, 67584, 70656, 70656, 0, 28, 0, 0, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 102400, 67584, 70656, 70656, 0, 0, 29, 0, 70656,
    70656, 70656, 70656, 70656, 70656, 70656, 70656, 102400, 6656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6656, 6656, 0, 6656, 6656, 6656, 6656, 6656, 6656, 0, 0,
    0, 28, 29, 70144, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 6144, 0, 13312, 14848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45568, 45568, 45568, 45568, 0,
    7168, 0, 7168, 7168, 7168, 7168, 0, 0, 0, 7168, 0, 7168, 7168, 7168, 7168, 0, 0, 7168, 7168, 7168, 0, 0, 0, 28, 29, 70144, 70656, 70656, 7680, 7680, 7680,
    4138, 4138, 4138, 4138, 4138, 0, 0, 0, 28, 29, 70144, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 0, 70656, 70656, 70656, 70656, 70656,
    70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 8704, 8704, 8704, 0, 8704, 8704, 8704, 8704, 0, 0, 0, 28, 29, 70144, 70656,
    70656, 70656, 70656, 70656, 70656, 70656, 70656, 84992, 70656, 70656, 84992, 70656, 70656, 70656, 70656, 0, 0, 0, 102400, 68096, 0, 70656, 70656, 0, 70656,
    83968, 70656, 0, 0, 0, 9728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9728, 9728, 9728, 0, 0, 0, 0, 9728, 0, 0, 0, 28, 29, 70144, 70656, 70656, 70656, 70656,
    101376, 70656, 107008, 108032, 70656, 70656, 70656, 70656, 70656, 101376, 70656, 107008, 10240, 10240, 10240, 0, 10240, 10240, 10240, 10240, 0, 0, 0, 28,
    29, 30, 31, 31, 31, 78, 79, 31, 31, 31, 31, 0, 43, 43, 43, 91, 43, 93, 67584, 43, 43, 0, 0, 0, 0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 0, 43, 43, 43, 43, 43,
    43, 233, 43, 234, 235, 236, 43, 238, 31, 43, 31, 31, 43, 43, 43, 31, 43, 31, 256, 43, 43, 258, 31, 43, 260, 31, 0, 0, 0, 10816, 10816, 10816, 10816, 10816,
    0, 0, 0, 28, 29, 30, 31, 31, 31, 4218, 110, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 31, 31, 0, 0, 0, 0, 0, 164, 43, 0, 67689, 43, 43, 0, 0, 0, 0, 31,
    31, 31, 31, 31, 31, 31, 31, 31, 0, 43, 86, 43, 43, 43, 43, 11321, 11321, 11321, 0, 11321, 11321, 0, 0, 0, 0, 0, 28, 29, 70144, 70656, 70656, 88576, 70656,
    99840, 70656, 70656, 70656, 70656, 0, 83968, 70656, 70656, 70656, 88576, 70656, 0, 0, 0, 65, 65, 65, 65, 65, 0, 0, 0, 28, 29, 30, 31, 31, 31, 4218, 110, 43,
    43, 43, 43, 43, 128, 43, 43, 43, 43, 43, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 105, 65, 43, 43, 0, 0, 0, 0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 0, 43, 87, 43, 43,
    43, 43, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 15360, 0, 0, 15360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14395, 14395, 14395, 14395, 0,
    26, 26, 0, 0, 0, 0, 0, 0, 12288, 0, 28, 29, 70144, 70727, 70727, 70727, 0, 0, 70741, 70741, 70741, 70741, 70741, 70741, 70741, 70741, 70741, 102485, 70741,
    70727, 70727, 70727, 70727, 70727, 70727, 70727, 70727, 70727, 84, 70741, 70741, 70741, 70741, 70741, 70741, 70727, 70727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 11321, 11321, 11321, 11321, 67584, 70741, 70741, 0, 0, 0, 0, 70727, 70727, 70727, 70727, 70727, 70727, 70727, 70727, 102471, 70727, 70727, 88647, 70727,
    99911, 70727, 70727, 70727, 70727, 0, 84053, 70741, 70741, 70741, 88661, 70741, 70727, 70741, 70741, 0, 70727, 70727, 70727, 70727, 70741, 70741, 70741,
    70741, 70741, 70727, 70741, 70741, 70741, 70741, 70727, 70741, 70741, 85063, 70727, 70727, 85077, 70741, 70741, 70741, 70727, 70727, 70741, 70741, 70741,
    70727, 70727, 70741, 70741, 70741, 70727, 70727, 70741, 70741, 99925, 70741, 70741, 70741, 70741, 70727, 70727, 83968, 88576, 99840, 0, 68608, 70741, 70741,
    0, 0, 0, 28, 28, 28, 28, 28, 0, 0, 0, 3653, 29, 70144, 70656, 70656, 70656, 70656, 0, 0, 0, 102400, 68096, 140, 70656, 70656, 0, 70656, 83968, 70656, 70727,
    70727, 70727, 70727, 101447, 70727, 107079, 108103, 70741, 70741, 70741, 70741, 70741, 101461, 70741, 107093, 108117, 70727, 98375, 70741, 70741, 0, 70727,
    86599, 70727, 70727, 70727, 70741, 86613, 70741, 70741, 70741, 89600, 70727, 70727, 89671, 70727, 70741, 70741, 70741, 89685, 70741, 70727, 70741, 70741,
    70727, 70727, 0, 0, 0, 102400, 68096, 0, 70741, 70741, 0, 70656, 84039, 70727, 92757, 100437, 87623, 70727, 87637, 70741, 70741, 70727, 70741, 70727, 70727,
    70741, 70741, 70741, 70727, 70741, 70727, 70727, 70741, 89173, 70741, 89159, 70741, 70727, 70727, 70741, 93269, 88135, 70727, 88149, 70741, 70727, 70741,
    70727, 70741, 70727, 70741, 104519, 104533, 0, 0, 0, 0, 0, 0, 30, 0, 34, 46, 34, 54, 61, 61, 61, 61, 46, 46, 46, 46, 46, 0, 0, 0, 28, 29, 30, 31, 31, 12858,
    12858, 12858, 0, 0, 0, 12858, 12858, 0, 0, 0, 28, 29, 70144, 70656, 70656, 89600, 70656, 70656, 89600, 70656, 70656, 70656, 70656, 89600, 70656, 70656,
    70656, 70656, 70656, 70656, 70656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1536, 13824, 13824, 13824, 0, 0, 0, 13824, 13824, 0, 0, 0, 28, 29, 70144,
    70656, 70656, 93184, 88064, 70656, 88064, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 104448, 104448, 0, 0, 0, 0, 0, 0, 30, 0, 32, 44, 32, 32, 60, 60,
    60, 60, 44, 44, 44, 44, 44, 0, 0, 0, 28, 29, 30, 31, 31, 14395, 14395, 14395, 0, 0, 0, 14395, 14395, 0, 0, 0, 28, 29, 70144, 70656, 70656, 99840, 70656,
    70656, 70656, 70656, 70656, 70656, 83968, 88576, 99840, 0, 68608, 70656, 70656, 0, 0, 0, 0, 0, 27, 30, 0, 35, 47, 35, 35, 0, 0, 0, 0, 0, 0, 0, 8192, 0,
    4138, 7680, 0, 7680, 7680, 7680, 7680, 0, 0, 0, 15872, 15872, 15872, 15872, 15872, 0, 0, 0, 28, 29, 70144, 70656, 70656, 0, 0, 0, 43, 43, 43, 43, 43, 0, 0,
    0, 28, 29, 30, 31, 31, 31, 4218, 110, 43, 43, 125, 43, 43, 43, 43, 43, 43, 43, 43, 31, 31, 0, 0, 0, 0, 101, 0, 0, 0, 0, 106, 43, 43, 0, 0, 0, 110, 31, 31,
    31, 31, 31, 31, 31, 31, 31, 4218, 43, 43, 43, 43, 43, 156, 16384, 16384, 16384, 0, 0, 0, 0, 0, 0, 0, 0, 28, 29, 70144, 70656, 70656, 16896, 16896, 16896, 0,
    0, 0, 0, 16896, 0, 0, 0, 28, 29, 70144, 70656, 70656, 0, 43, 108, 0, 0, 0, 110, 31, 31, 31, 31, 31, 31, 31, 31, 31, 4218, 43, 153, 43, 43, 43, 43, 206, 0,
    31, 208, 31, 31, 43, 211, 43, 43, 43, 31, 43, 43, 31, 31, 0, 0, 0, 0, 0, 0, 43, 43, 0, 110, 31, 31, 43, 31, 31, 43, 43, 0, 182, 31, 31, 31, 31, 186, 43, 43,
    43, 43, 160, 43, 31, 31, 0, 0, 0, 0, 0, 43, 43, 0, 0, 0, 0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 43, 43, 43, 175, 43, 43, 43, 43, 0, 0, 0, 45, 45, 45, 45,
    45, 0, 0, 0, 28, 29, 30, 31, 31, 31, 4218, 110, 43, 124, 43, 43, 43, 43, 43, 43, 43, 43, 43, 31, 31, 0, 0, 0, 0, 105, 141, 43, 43, 0, 110, 31, 31, 31, 4218,
    110, 43, 43, 43, 43, 127, 43, 43, 43, 43, 43, 43, 31, 31, 0, 0, 0, 0, 106, 0, 43, 43, 0, 110, 31, 31, 31, 4218, 110, 43, 43, 43, 126, 43, 43, 43, 43, 43,
    43, 43, 31, 31, 0, 0, 0, 0, 68096, 0, 43, 43, 0, 110, 31, 31, 31, 4218, 110, 43, 43, 43, 43, 43, 43, 129, 43, 43, 43, 43, 31, 266, 43, 268, 43, 31, 31, 43,
    43, 43, 31, 31, 43, 43, 269, 31, 31, 43, 43, 43, 31, 31, 43, 43, 43, 270, 31, 272, 43, 43, 31, 31, 43, 43, 43, 135, 31, 0, 0, 0, 0, 0, 0, 43, 43, 0, 110,
    31, 31, 31, 4218, 110, 123, 43, 43, 43, 43, 43, 43, 130, 131, 43, 43, 31, 31, 0, 0, 0, 0, 68096, 140, 43, 43, 0, 110, 31, 31, 31, 148, 31, 31, 31, 31, 31,
    4218, 43, 43, 43, 43, 43, 43, 161, 31, 31, 0, 0, 0, 0, 0, 43, 43, 0, 278, 43, 31, 31, 43, 43, 31, 43, 31, 43, 31, 43, 31, 43, 0, 0, 0, 0, 0, 0, 30, 0, 36,
    48, 36, 36, 62, 62, 62, 62, 48, 48, 48, 48, 48, 0, 0, 0, 28, 29, 30, 31, 31, 0, 43, 43, 0, 0, 0, 110, 111, 31, 31, 31, 31, 31, 117, 118, 31, 75, 31, 31, 31,
    31, 31, 82, 83, 0, 43, 43, 43, 89, 43, 43, 31, 31, 43, 43, 31, 43, 31, 43, 31, 43, 31, 43, 0, 0, 0, 0, 0, 0, 30, 0, 33, 45, 33, 33, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 28, 29, 70144, 70656, 70656, 43, 43, 31, 31, 137, 0, 139, 0, 0, 0, 43, 43, 0, 110, 31, 31, 43, 251, 43, 253, 43, 31, 31, 43, 43, 43, 31, 43, 31,
    31, 43, 43, 43, 31, 259, 31, 31, 0, 0, 0, 47, 47, 47, 47, 47, 0, 0, 0, 28, 29, 30, 31, 31, 77, 31, 31, 31, 31, 31, 31, 0, 43, 43, 43, 43, 92, 43, 106, 43,
    43, 109, 0, 0, 110, 31, 31, 31, 31, 31, 116, 31, 31, 31, 0, 0, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 31, 31, 0, 0, 0, 0, 0, 43, 43, 0, 43, 43, 31,
    136, 0, 0, 0, 0, 106, 0, 43, 43, 0, 110, 31, 31, 121, 4218, 110, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 31, 31, 43, 43, 31, 43, 31, 43, 285, 286, 31,
    43, 0, 0, 0, 0, 0, 0, 30, 0, 37, 49, 37, 37, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16896, 43, 43, 158, 43, 43, 43, 31, 31, 0,
    0, 0, 0, 0, 43, 165, 166, 43, 191, 43, 43, 0, 31, 31, 31, 31, 43, 43, 43, 43, 43, 31, 43, 43, 217, 31, 0, 0, 0, 66, 66, 66, 66, 66, 0, 0, 0, 28, 29, 30, 31,
    31, 169, 170, 31, 171, 31, 31, 43, 43, 174, 43, 176, 43, 177, 43, 74, 31, 31, 31, 31, 31, 31, 31, 31, 0, 43, 43, 88, 43, 43, 43, 97, 98, 75, 31, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 12858, 12858, 12858, 12858, 0, 43, 43, 0, 0, 0, 110, 31, 31, 113, 31, 31, 31, 31, 31, 31, 31, 151, 31, 4218, 43, 43, 43, 43, 43, 43,
    162, 31, 0, 0, 0, 0, 0, 43, 43, 0, 167, 31, 31, 31, 31, 31, 31, 31, 172, 43, 43, 43, 43, 43, 43, 43, 31, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13824,
    13824, 13824, 13824, 43, 0, 31, 31, 31, 209, 43, 43, 43, 43, 213, 31, 43, 43, 31, 31, 0, 0, 0, 0, 0, 0, 43, 43, 0, 110, 31, 145, 43, 43, 31, 31, 43, 43, 43,
    31, 43, 31, 242, 43, 43, 245, 31, 247, 43, 43, 264, 31, 31, 43, 43, 43, 31, 31, 43, 43, 43, 31, 31, 43, 43, 43, 31, 31, 43, 43, 43, 31, 276, 43, 43, 43, 31,
    31, 43, 43, 281, 282, 31, 43, 31, 43, 31, 43, 0, 0, 0, 0, 0, 0, 30, 0, 39, 51, 39, 39, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 56, 56,
    56, 0, 0, 0, 43, 43, 43, 43, 43, 0, 0, 68, 28, 29, 30, 31, 31, 76, 31, 31, 31, 31, 31, 31, 31, 0, 43, 43, 43, 90, 43, 43, 31, 31, 43, 43, 31, 43, 283, 284,
    31, 43, 31, 43, 0, 0, 0, 0, 0, 0, 30, 0, 38, 50, 38, 38, 63, 63, 63, 63, 50, 50, 50, 50, 50, 0, 0, 0, 28, 29, 30, 31, 31, 133, 43, 31, 31, 0, 0, 0, 0, 0, 0,
    142, 43, 0, 110, 31, 31, 120, 31, 4218, 110, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 76, 31, 0, 0, 0, 0, 0, 102, 0, 0, 0, 146, 31, 31, 31, 31, 31, 31,
    31, 31, 4218, 43, 43, 154, 43, 43, 43, 159, 43, 43, 31, 31, 0, 0, 0, 0, 0, 43, 43, 0, 0, 0, 110, 31, 31, 31, 31, 31, 31, 31, 31, 31, 4218, 43, 43, 43, 43,
    43, 43, 157, 43, 43, 43, 43, 43, 31, 163, 0, 0, 0, 0, 0, 43, 43, 0, 0, 0, 110, 31, 31, 31, 31, 115, 31, 31, 31, 31, 31, 149, 31, 31, 31, 4218, 43, 43, 43,
    43, 43, 43, 31, 31, 0, 0, 0, 141, 141, 43, 43, 0, 43, 178, 31, 43, 43, 0, 31, 31, 31, 31, 31, 43, 43, 43, 43, 43, 265, 31, 267, 43, 43, 31, 31, 43, 43, 43,
    31, 31, 43, 43, 43, 31, 271, 43, 273, 43, 31, 31, 43, 0, 0, 0, 67, 67, 67, 67, 67, 0, 0, 0, 28, 29, 30, 31, 72, 43, 31, 31, 43, 43, 181, 31, 31, 183, 184,
    31, 43, 43, 187, 43, 189, 43, 0, 31, 31, 31, 31, 43, 43, 43, 43, 43, 31, 215, 43, 31, 218, 219, 43, 221, 43, 223, 31, 43, 43, 31, 31, 31, 43, 43, 230, 43,
    232, 31, 249, 43, 43, 252, 31, 43, 31, 31, 43, 43, 43, 31, 43, 31, 31, 43, 43, 0, 31, 31, 31, 31, 31, 43, 43, 43, 43, 43, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 10240, 10240, 10240, 10240, 94, 43, 43, 43, 43, 99, 31, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 30, 0, 40, 52, 40, 40, 0, 0, 0, 0, 0, 0, 30, 0,
    31, 43, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 29, 30, 31, 31, 0, 107, 94, 0, 0, 0, 110, 31, 31, 31, 31, 31, 31, 31, 31, 31, 43, 43, 43, 43, 43, 43,
    43, 43, 119, 31, 31, 4218, 110, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 132, 43, 31, 31, 179, 43, 0, 31, 31, 31, 31, 31, 43, 43, 43, 43, 43, 31, 31, 43, 43,
    43, 31, 43, 31, 31, 43, 43, 43, 31, 43, 31, 31, 43, 43, 31, 31, 43, 237, 43, 239, 43, 241, 31, 243, 43, 43, 31, 43, 43, 0, 31, 31, 31, 31, 43, 43, 43, 43,
    43, 31, 205, 0, 0, 0, 51, 51, 51, 51, 51, 0, 0, 0, 28, 29, 30, 31, 31, 147, 31, 31, 31, 31, 150, 31, 31, 4218, 43, 43, 43, 155, 43, 43, 31, 31, 0, 138, 0,
    0, 0, 0, 43, 43, 0, 110, 31, 31, 43, 43, 43, 31, 254, 31, 31, 43, 43, 43, 31, 43, 31, 31, 43, 43, 43, 31, 43, 31, 261, 43, 31, 43, 193, 0, 31, 31, 31, 31,
    43, 43, 43, 43, 43, 31, 43, 43, 0, 31, 31, 31, 31, 43, 43, 201, 43, 43, 204, 43, 43, 95, 96, 43, 43, 31, 31, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 29, 29, 29,
    29, 29, 0, 0, 0, 28, 3654, 70144, 70656, 70656, 70656, 70656, 70656, 70656, 70656, 0, 11776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16384, 16384, 16384, 16384,
    248, 31, 250, 43, 43, 31, 43, 31, 31, 43, 43, 43, 31, 43, 31, 31, 43, 43, 0, 31, 31, 31, 31, 31, 43, 43, 43, 188, 43, 0, 0, 0, 52, 52, 52, 52, 52, 0, 0, 0,
    28, 29, 30, 31, 31, 168, 31, 31, 31, 31, 31, 31, 43, 173, 43, 43, 43, 43, 43, 43, 31, 31, 0, 0, 0, 0, 68608, 43, 43, 0, 0, 43, 43, 0, 0, 0, 110, 31, 31, 31,
    114, 31, 31, 31, 31, 31, 80, 81, 31, 31, 0, 43, 43, 43, 43, 43, 43, 43, 31, 31, 43, 180, 0, 31, 31, 31, 31, 185, 43, 43, 43, 43, 43, 31, 31, 43, 43, 43, 31,
    43, 31, 31, 43, 244, 43, 246, 43, 190, 31, 43, 43, 0, 31, 31, 31, 198, 43, 43, 43, 43, 203, 31, 43, 43, 222, 43, 224, 43, 43, 31, 31, 31, 43, 43, 43, 43,
    31, 43, 43, 31, 31, 31, 43, 43, 43, 43, 31, 43, 43, 31, 227, 31, 43, 229, 43, 43, 31, 43, 43, 31, 31, 43, 43, 43, 31, 240, 31, 31, 43, 43, 43, 31, 43, 255,
    31, 257, 43, 43, 31, 43, 31, 31, 262, 43, 43, 31, 31, 43, 43, 43, 31, 31, 43, 43, 43, 31, 31, 43, 43, 43, 275, 31, 277, 0, 0, 0, 53, 53, 53, 53, 53, 0, 0,
    0, 28, 29, 30, 31, 73, 0, 43, 43, 0, 0, 0, 110, 31, 112, 31, 31, 31, 31, 31, 31, 31, 31, 152, 4218, 43, 43, 43, 43, 43, 43, 43, 0, 207, 31, 31, 31, 210, 43,
    212, 43, 43, 214, 43, 43, 31, 31, 0, 0, 0, 0, 0, 0, 43, 143, 144, 110, 31, 31, 43, 263, 43, 31, 31, 43, 43, 43, 31, 31, 43, 43, 43, 31, 31, 43, 43, 274, 31,
    31, 43, 43, 43, 31, 279, 43, 280, 31, 43, 31, 43, 31, 43, 31, 43, 0, 0, 0, 0, 0, 0, 30, 0, 41, 53, 41, 41, 0, 0, 0, 0, 0, 0, 30, 0, 31, 43, 31, 55, 0, 0, 0,
    0, 0, 0, 0, 9216, 0, 0, 0, 0, 8704, 8704, 8704, 8704, 43, 31, 43, 43, 0, 195, 31, 31, 31, 199, 43, 43, 43, 43, 31, 43, 43, 194, 31, 31, 197, 31, 43, 43, 43,
    202, 43, 31, 43, 43, 0, 31, 196, 31, 31, 43, 200, 43, 43, 43, 31, 43, 43, 0, 31, 31, 31, 31, 43, 43, 43, 43, 43, 31, 43, 43, 31, 31, 43, 31, 192, 43, 0, 31,
    31, 31, 31, 43, 43, 43, 43, 43, 31, 43, 216, 31, 31, 43, 134, 31, 31, 0, 0, 0, 0, 0, 0, 43, 43, 0, 110, 31, 31, 220, 43, 43, 43, 31, 43, 226, 31, 31, 31,
    43, 43, 43, 43, 31, 225, 43, 31, 31, 228, 43, 43, 43, 231, 31, 45568, 45568, 45568, 0, 0, 0, 45568, 45568, 0, 0, 0, 28, 29, 70144, 70656, 70656, 1536, 1536,
    1536, 0, 0, 0, 0, 1536, 0, 0, 0, 0, 0, 70144, 70656, 70656
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    215, 219, 223, 227, 231, 235, 239, 254, 289, 289, 245, 269, 269, 250, 278, 410, 285, 242, 289, 289, 290, 269, 269, 269, 271, 380, 294, 288, 289, 289, 245,
    269, 269, 271, 336, 295, 289, 289, 269, 269, 272, 287, 256, 269, 300, 288, 274, 247, 287, 273, 270, 271, 274, 300, 256, 270, 271, 270, 272, 247, 273, 248,
    274, 249, 270, 274, 273, 272, 271, 247, 299, 258, 281, 304, 308, 311, 314, 317, 379, 323, 379, 380, 327, 379, 319, 331, 343, 346, 378, 357, 363, 380, 332,
    339, 372, 380, 368, 380, 377, 358, 364, 380, 358, 371, 380, 368, 346, 265, 396, 337, 352, 260, 376, 359, 338, 353, 264, 386, 352, 263, 395, 351, 262, 392,
    402, 349, 350, 262, 400, 404, 414, 405, 415, 406, 403, 407, 406, 464, 463, 462, 407, 380, 380, 380, 380, 419, 423, 424, 428, 380, 380, 381, 442, 451, 381,
    442, 451, 380, 436, 432, 380, 380, 440, 449, 380, 380, 441, 450, 435, 332, 380, 380, 447, 451, 380, 446, 450, 382, 333, 380, 448, 380, 388, 451, 335, 453,
    380, 458, 380, 409, 408, 335, 408, 453, 334, 409, 458, 453, 453, 460, 453, 453, 408, 408, 409, 468, 452, 408, 407, 454, 453, 468, 470, 471, 471, 5120, 9216,
    8389632, 271360, 536880128, 9216, 9536, 537035776, 1536, 1664, 26112, 1536, -1620481024, -1620476928, -1612088320, -1620218876, -1620214780, -1611830268,
    -1611826172, 1074796280, 1081677560, 1081685752, 1595490040, 1595752188, 1024, 8388608, 0, 64, 64, 512, 512, 128, 640, 640, 512, 640, 512, 512, 2048, 64,
    256, 512, 512, 512, 640, 0, 0, 0, 8192, 3145728, 0, 16384, 32, 256, 640, 640, 640, 640, 512, 512, 640, 640, 640, 4194304, 33554432, 268435456, 0, 0, 0,
    16384, 56, 640, 640, 0, 512, 512, 512, 512, 128, 48, 32, 640, 640, 0, 512, 640, 512, 640, 640, 0, 0, 23848, 32040, 23848, -2147451608, 4104, 4104, 4105,
    4105, 4105, 3177768, 3177768, 3177768, 3177769, 0, 0, 0, 15360, 0, 40, 256, 7168, 0, 40, 256, 15360, -2147483648, 0, 0, 0, 8, 0, 0, 0, 32, 256, 3072, 4096,
    0, 8, 4096, 0, 0, 0, 3145728, 0, 32, 3072, 8192, 16384, 0, 8192, 0, 8, 32, 256, 3072, 16384, 3072, 4096, 16384, 0, 0, 8192, -2147483648, 8, 4096, 8192,
    16384, 0, 0, -2147483648, 3145728, 0, 16384, 0, 0, 0, 0, 4, 0, 3072, 16384, 0, 32, 2048, 65536, 32, 3072, 0, 32, 3072, 16384, 0, 0, 3072, 0, 3072, 8192, 0,
    8192, 2097152, 2048, 0, 2048, 0, 0, 0, 48, 0, 2048, 8192, 0, 8192, 329892, 329892, 329892, 329892, 16777348, 16777348, 16777348, 16777348, 329900, 329900,
    329900, 17107116, 17107116, 0, 0, 40, 0, 0, 4, 128, 0, 0, 4, 32, 128, 2048, 65536, 0, 4, 32, 2048, 65536, 262144, 0, 0, 0, 2048, 0, 2048, 2048, 0, 0, 8, 0,
    2048, 0, 2097152, 2048, 0, 2048, 0, 0, 2048, 2048, 2048, 2048
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'EOF',
    'IntegerLiteral',
    'DecimalLiteral',
    'DoubleLiteral',
    'StringLiteral',
    'Wildcard',
    'NCName',
    'QName',
    'S',
    &quot;'!='&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*'&quot;,
    &quot;'+'&quot;,
    &quot;'+'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'//'&quot;,
    &quot;'::'&quot;,
    &quot;'&lt;'&quot;,
    &quot;'&lt;='&quot;,
    &quot;'='&quot;,
    &quot;'&gt;'&quot;,
    &quot;'&gt;='&quot;,
    &quot;'?'&quot;,
    &quot;'@'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'ancestor'&quot;,
    &quot;'ancestor-or-self'&quot;,
    &quot;'and'&quot;,
    &quot;'as'&quot;,
    &quot;'attribute'&quot;,
    &quot;'cast'&quot;,
    &quot;'castable'&quot;,
    &quot;'child'&quot;,
    &quot;'comment'&quot;,
    &quot;'descendant'&quot;,
    &quot;'descendant-or-self'&quot;,
    &quot;'div'&quot;,
    &quot;'document-node'&quot;,
    &quot;'element'&quot;,
    &quot;'else'&quot;,
    &quot;'empty-sequence'&quot;,
    &quot;'eq'&quot;,
    &quot;'every'&quot;,
    &quot;'except'&quot;,
    &quot;'following'&quot;,
    &quot;'following-sibling'&quot;,
    &quot;'for'&quot;,
    &quot;'ge'&quot;,
    &quot;'gt'&quot;,
    &quot;'idiv'&quot;,
    &quot;'if'&quot;,
    &quot;'in'&quot;,
    &quot;'instance'&quot;,
    &quot;'intersect'&quot;,
    &quot;'is'&quot;,
    &quot;'item'&quot;,
    &quot;'le'&quot;,
    &quot;'lt'&quot;,
    &quot;'mod'&quot;,
    &quot;'namespace'&quot;,
    &quot;'ne'&quot;,
    &quot;'node'&quot;,
    &quot;'of'&quot;,
    &quot;'or'&quot;,
    &quot;'parent'&quot;,
    &quot;'preceding'&quot;,
    &quot;'preceding-sibling'&quot;,
    &quot;'processing-instruction'&quot;,
    &quot;'return'&quot;,
    &quot;'satisfies'&quot;,
    &quot;'schema-attribute'&quot;,
    &quot;'schema-element'&quot;,
    &quot;'self'&quot;,
    &quot;'some'&quot;,
    &quot;'text'&quot;,
    &quot;'then'&quot;,
    &quot;'to'&quot;,
    &quot;'treat'&quot;,
    &quot;'typeswitch'&quot;,
    &quot;'union'&quot;,
    &quot;'|'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 512, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 512"/>
        <xsl:variable name="end" select="$end - $result idiv 128"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 128 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 32"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 6)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="512 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 16"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 511) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 2">
        <xsl:variable name="i0" select=". * 286 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[6 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[12 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse AtomicType.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AtomicType" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AtomicType', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse ItemType.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ItemType" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1W(13, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'item' | 'mod' | 'node' | 'or' | 'processing-instruction' |
                                                                                         'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (37,                                          (: 'attribute' :)
                                         46,                                          (: 'element' :)
                                         69,                                          (: 'node' :)
                                         75,                                          (: 'processing-instruction' :)
                                         82)">                                      <!-- 'text' -->
          <xsl:variable name="state" select="p:lookahead2W(4, $input, $state)"/>    <!-- END | S^WhiteSpace | '(' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 45                                            (: 'document-node' :)
                     or $state[$p:lk] = 1573                                          (: 'attribute' '(' :)
                     or $state[$p:lk] = 1582                                          (: 'element' '(' :)
                     or $state[$p:lk] = 1605                                          (: 'node' '(' :)
                     or $state[$p:lk] = 1611                                          (: 'processing-instruction' '(' :)
                     or $state[$p:lk] = 1618">                                      <!-- 'text' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-KindTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 63">                                        <!-- 'item' -->
          <xsl:variable name="state" select="p:consume(63, $input, $state)"/>       <!-- 'item' -->
          <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>    <!-- S^WhiteSpace | '(' -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- '(' -->
          <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>    <!-- S^WhiteSpace | ')' -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AtomicType($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ItemType', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse OccurrenceIndicator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-OccurrenceIndicator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1W(9, $input, $state)"/>          <!-- S^WhiteSpace | '*' | '+' | '?' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 29">                                        <!-- '?' -->
          <xsl:variable name="state" select="p:consume(29, $input, $state)"/>       <!-- '?' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- '*' -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- '+' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'OccurrenceIndicator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse AbbrevForwardStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AbbrevForwardStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- '.' -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- '.' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 30">                                  <!-- '@' -->
                <xsl:variable name="state" select="p:consume(30, $input, $state)"/> <!-- '@' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>   <!-- Wildcard | QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'mod' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                         'text' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NodeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AbbrevForwardStep', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing AbbrevForwardStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AbbrevForwardStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- '.' -->
          <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>      <!-- '.' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 30">                                  <!-- '@' -->
                <xsl:variable name="state" select="p:consumeT(30, $input, $state)"/> <!-- '@' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>   <!-- Wildcard | QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'mod' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                         'text' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-NodeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse NameTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NameTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 7">                                         <!-- Wildcard -->
          <xsl:variable name="state" select="p:consume(7, $input, $state)"/>        <!-- Wildcard -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NameTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing NameTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-NameTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 7">                                         <!-- Wildcard -->
          <xsl:variable name="state" select="p:consumeT(7, $input, $state)"/>       <!-- Wildcard -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse AnyKindTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AnyKindTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(69, $input, $state)"/>             <!-- 'node' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AnyKindTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing AnyKindTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AnyKindTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(69, $input, $state)"/>            <!-- 'node' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse TextTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-TextTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(82, $input, $state)"/>             <!-- 'text' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'TextTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing TextTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-TextTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(82, $input, $state)"/>            <!-- 'text' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse PITest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PITest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(75, $input, $state)"/>             <!-- 'processing-instruction' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>          <!-- StringLiteral | NCName | S^WhiteSpace | ')' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- NCName -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- NCName -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- StringLiteral -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'PITest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing PITest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-PITest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(75, $input, $state)"/>            <!-- 'processing-instruction' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>          <!-- StringLiteral | NCName | S^WhiteSpace | ')' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- NCName -->
                <xsl:variable name="state" select="p:consumeT(8, $input, $state)"/> <!-- NCName -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- StringLiteral -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse AttributeName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AttributeName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AttributeName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing AttributeName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AttributeName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-QName($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse AttribNameOrWildcard.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AttribNameOrWildcard" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- '*' -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AttributeName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AttribNameOrWildcard', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing AttribNameOrWildcard.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AttribNameOrWildcard" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- '*' -->
          <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>      <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-AttributeName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse AttributeTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AttributeTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- 'attribute' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ')' | '*' | 'and' | 'attribute' |
                                                                                         'child' | 'descendant' | 'descendant-or-self' | 'div' | 'element' |
                                                                                         'mod' | 'node' | 'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AttribNameOrWildcard($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>    <!-- S^WhiteSpace | ')' | ',' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 18">                                  <!-- ',' -->
                <xsl:variable name="state" select="p:consume(18, $input, $state)"/> <!-- ',' -->
                <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/> <!-- QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'element' | 'mod' |
                                                                                             'node' | 'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-TypeName($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AttributeTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing AttributeTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AttributeTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>            <!-- 'attribute' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ')' | '*' | 'and' | 'attribute' |
                                                                                         'child' | 'descendant' | 'descendant-or-self' | 'div' | 'element' |
                                                                                         'mod' | 'node' | 'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-AttribNameOrWildcard($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>    <!-- S^WhiteSpace | ')' | ',' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 18">                                  <!-- ',' -->
                <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/> <!-- ',' -->
                <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/> <!-- QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'element' | 'mod' |
                                                                                             'node' | 'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-TypeName($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse TypeName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-TypeName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'TypeName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing TypeName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-TypeName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-QName($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse QName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-QName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- 'attribute' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'element' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'element' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 69">                                        <!-- 'node' -->
          <xsl:variable name="state" select="p:consume(69, $input, $state)"/>       <!-- 'node' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 75">                                        <!-- 'processing-instruction' -->
          <xsl:variable name="state" select="p:consume(75, $input, $state)"/>       <!-- 'processing-instruction' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 82">                                        <!-- 'text' -->
          <xsl:variable name="state" select="p:consume(82, $input, $state)"/>       <!-- 'text' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-FunctionName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'QName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing QName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-QName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>      <!-- 'attribute' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'element' -->
          <xsl:variable name="state" select="p:consumeT(46, $input, $state)"/>      <!-- 'element' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 69">                                        <!-- 'node' -->
          <xsl:variable name="state" select="p:consumeT(69, $input, $state)"/>      <!-- 'node' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 75">                                        <!-- 'processing-instruction' -->
          <xsl:variable name="state" select="p:consumeT(75, $input, $state)"/>      <!-- 'processing-instruction' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 82">                                        <!-- 'text' -->
          <xsl:variable name="state" select="p:consumeT(82, $input, $state)"/>      <!-- 'text' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-FunctionName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ElementName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ElementName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QName($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ElementName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ElementName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ElementName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-QName($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ElementNameOrWildcard.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ElementNameOrWildcard" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- '*' -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ElementName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ElementNameOrWildcard', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ElementNameOrWildcard.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ElementNameOrWildcard" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- '*' -->
          <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>      <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ElementName($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ElementTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ElementTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(46, $input, $state)"/>             <!-- 'element' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ')' | '*' | 'and' | 'attribute' |
                                                                                         'child' | 'descendant' | 'descendant-or-self' | 'div' | 'element' |
                                                                                         'mod' | 'node' | 'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ElementNameOrWildcard($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>    <!-- S^WhiteSpace | ')' | ',' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 18">                                  <!-- ',' -->
                <xsl:variable name="state" select="p:consume(18, $input, $state)"/> <!-- ',' -->
                <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/> <!-- QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'element' | 'mod' |
                                                                                             'node' | 'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-TypeName($input, $state)
                "/>
                <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/> <!-- S^WhiteSpace | ')' | '?' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 29">                            <!-- '?' -->
                      <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '?' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ElementTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ElementTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ElementTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(46, $input, $state)"/>            <!-- 'element' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- QName^Token | S^WhiteSpace | ')' | '*' | 'and' | 'attribute' |
                                                                                         'child' | 'descendant' | 'descendant-or-self' | 'div' | 'element' |
                                                                                         'mod' | 'node' | 'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ElementNameOrWildcard($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(5, $input, $state)"/>    <!-- S^WhiteSpace | ')' | ',' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 18">                                  <!-- ',' -->
                <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/> <!-- ',' -->
                <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/> <!-- QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'element' | 'mod' |
                                                                                             'node' | 'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-TypeName($input, $state)
                "/>
                <xsl:variable name="state" select="p:lookahead1W(6, $input, $state)"/> <!-- S^WhiteSpace | ')' | '?' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 29">                            <!-- '?' -->
                      <xsl:variable name="state" select="p:consumeT(29, $input, $state)"/> <!-- '?' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse DocumentTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-DocumentTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- 'document-node' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/>          <!-- S^WhiteSpace | ')' | 'element' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'element' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ElementTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'DocumentTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing DocumentTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-DocumentTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(45, $input, $state)"/>            <!-- 'document-node' -->
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(7, $input, $state)"/>          <!-- S^WhiteSpace | ')' | 'element' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'element' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ElementTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(2, $input, $state)"/>          <!-- S^WhiteSpace | ')' -->
    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse KindTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-KindTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'document-node' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-DocumentTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'element' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ElementTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AttributeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 75">                                        <!-- 'processing-instruction' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-PITest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 82">                                        <!-- 'text' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-TextTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AnyKindTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'KindTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing KindTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-KindTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'document-node' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-DocumentTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'element' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ElementTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-AttributeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 75">                                        <!-- 'processing-instruction' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-PITest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 82">                                        <!-- 'text' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-TextTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-AnyKindTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse NodeTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NodeTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (37,                                          (: 'attribute' :)
                                         46,                                          (: 'element' :)
                                         69,                                          (: 'node' :)
                                         75,                                          (: 'processing-instruction' :)
                                         82)">                                      <!-- 'text' -->
          <xsl:variable name="state" select="p:lookahead2W(18, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                         'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 45                                            (: 'document-node' :)
                     or $state[$p:lk] = 1573                                          (: 'attribute' '(' :)
                     or $state[$p:lk] = 1582                                          (: 'element' '(' :)
                     or $state[$p:lk] = 1605                                          (: 'node' '(' :)
                     or $state[$p:lk] = 1611                                          (: 'processing-instruction' '(' :)
                     or $state[$p:lk] = 1618">                                      <!-- 'text' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-KindTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NameTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NodeTest', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing NodeTest.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-NodeTest" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (37,                                          (: 'attribute' :)
                                         46,                                          (: 'element' :)
                                         69,                                          (: 'node' :)
                                         75,                                          (: 'processing-instruction' :)
                                         82)">                                      <!-- 'text' -->
          <xsl:variable name="state" select="p:lookahead2W(18, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                         'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 45                                            (: 'document-node' :)
                     or $state[$p:lk] = 1573                                          (: 'attribute' '(' :)
                     or $state[$p:lk] = 1582                                          (: 'element' '(' :)
                     or $state[$p:lk] = 1605                                          (: 'node' '(' :)
                     or $state[$p:lk] = 1611                                          (: 'processing-instruction' '(' :)
                     or $state[$p:lk] = 1618">                                      <!-- 'text' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-KindTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-NameTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ForwardAxis.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ForwardAxis" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- 'child' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- 'child' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 42">                                        <!-- 'descendant' -->
          <xsl:variable name="state" select="p:consume(42, $input, $state)"/>       <!-- 'descendant' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- 'attribute' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 80">                                        <!-- 'self' -->
          <xsl:variable name="state" select="p:consume(80, $input, $state)"/>       <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- 'following-sibling' -->
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- 'following-sibling' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'following' -->
          <xsl:variable name="state" select="p:consume(52, $input, $state)"/>       <!-- 'following' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(67, $input, $state)"/>       <!-- 'namespace' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ForwardAxis', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ForwardAxis.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ForwardAxis" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- 'child' -->
          <xsl:variable name="state" select="p:consumeT(40, $input, $state)"/>      <!-- 'child' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 42">                                        <!-- 'descendant' -->
          <xsl:variable name="state" select="p:consumeT(42, $input, $state)"/>      <!-- 'descendant' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- 'attribute' -->
          <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>      <!-- 'attribute' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 80">                                        <!-- 'self' -->
          <xsl:variable name="state" select="p:consumeT(80, $input, $state)"/>      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:consumeT(43, $input, $state)"/>      <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- 'following-sibling' -->
          <xsl:variable name="state" select="p:consumeT(53, $input, $state)"/>      <!-- 'following-sibling' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'following' -->
          <xsl:variable name="state" select="p:consumeT(52, $input, $state)"/>      <!-- 'following' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(67, $input, $state)"/>      <!-- 'namespace' -->
          <xsl:variable name="state" select="p:lookahead1W(3, $input, $state)"/>    <!-- S^WhiteSpace | '::' -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- '::' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ForwardStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ForwardStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 37">                                       <!-- 'attribute' -->
          <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' |
                                                                                         'div' | 'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (40,                                          (: 'child' :)
                                         42,                                          (: 'descendant' :)
                                         43,                                          (: 'descendant-or-self' :)
                                         80)">                                      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead2W(19, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                         'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 52                                            (: 'following' :)
                     or $state[$p:lk] = 53                                            (: 'following-sibling' :)
                     or $state[$p:lk] = 67                                            (: 'namespace' :)
                     or $state[$p:lk] = 2981                                          (: 'attribute' '::' :)
                     or $state[$p:lk] = 2984                                          (: 'child' '::' :)
                     or $state[$p:lk] = 2986                                          (: 'descendant' '::' :)
                     or $state[$p:lk] = 2987                                          (: 'descendant-or-self' '::' :)
                     or $state[$p:lk] = 3024">                                      <!-- 'self' '::' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ForwardAxis($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>   <!-- Wildcard | QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'mod' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                         'text' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NodeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AbbrevForwardStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ForwardStep', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ForwardStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ForwardStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 37">                                       <!-- 'attribute' -->
          <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' |
                                                                                         'div' | 'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (40,                                          (: 'child' :)
                                         42,                                          (: 'descendant' :)
                                         43,                                          (: 'descendant-or-self' :)
                                         80)">                                      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead2W(19, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                         'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 52                                            (: 'following' :)
                     or $state[$p:lk] = 53                                            (: 'following-sibling' :)
                     or $state[$p:lk] = 67                                            (: 'namespace' :)
                     or $state[$p:lk] = 2981                                          (: 'attribute' '::' :)
                     or $state[$p:lk] = 2984                                          (: 'child' '::' :)
                     or $state[$p:lk] = 2986                                          (: 'descendant' '::' :)
                     or $state[$p:lk] = 2987                                          (: 'descendant-or-self' '::' :)
                     or $state[$p:lk] = 3024">                                      <!-- 'self' '::' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ForwardAxis($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>   <!-- Wildcard | QName^Token | S^WhiteSpace | 'and' | 'attribute' | 'child' |
                                                                                         'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                         'element' | 'mod' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                         'text' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-NodeTest($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-AbbrevForwardStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse AxisStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AxisStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ForwardStep($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-PredicateList($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AxisStep', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing AxisStep.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AxisStep" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-ForwardStep($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-PredicateList($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse StepExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-StepExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 20">                                       <!-- '.' -->
          <xsl:variable name="state" select="p:lookahead2W(17, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 276">                                <!-- '.' EOF -->
                <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- END -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1684,                                  (: '.' ')' :)
                                               4116)">                              <!-- '.' ']' -->
                <xsl:variable name="state" select="p:lookahead3W(17, $input, $state)"/> <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                             '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                             'mod' | 'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (2708,                                  (: '.' '/' :)
                                               2836)">                              <!-- '.' '//' -->
                <xsl:variable name="state" select="p:lookahead3W(21, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '.' | '@' | 'and' |
                                                                                             'attribute' | 'child' | 'descendant' | 'descendant-or-self' |
                                                                                             'div' | 'document-node' | 'element' | 'following' |
                                                                                             'following-sibling' | 'mod' | 'namespace' | 'node' | 'or' |
                                                                                             'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1428,                                  (: '.' '!=' :)
                                               1812,                                  (: '.' '*' :)
                                               2068,                                  (: '.' '+' :)
                                               2324,                                  (: '.' ',' :)
                                               2452,                                  (: '.' '-' :)
                                               3092,                                  (: '.' '&lt;' :)
                                               3220,                                  (: '.' '&lt;=' :)
                                               3348,                                  (: '.' '=' :)
                                               3476,                                  (: '.' '>' :)
                                               3604,                                  (: '.' '>=' :)
                                               3988,                                  (: '.' '[' :)
                                               4500,                                  (: '.' 'and' :)
                                               5652,                                  (: '.' 'div' :)
                                               8468,                                  (: '.' 'mod' :)
                                               9108,                                  (: '.' 'or' :)
                                               11284)">                             <!-- '.' '|' -->
                <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' |
                                                                                             '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                             'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                             'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                             'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (40,                                          (: 'child' :)
                                         42,                                          (: 'descendant' :)
                                         43,                                          (: 'descendant-or-self' :)
                                         80)">                                      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' |
                                                                                         'div' | 'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (9,                                           (: QName^Token :)
                                         35,                                          (: 'and' :)
                                         44,                                          (: 'div' :)
                                         66,                                          (: 'mod' :)
                                         71)">                                      <!-- 'or' -->
          <xsl:variable name="state" select="p:lookahead2W(18, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                         'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 3                                            (: IntegerLiteral :)
                    and $state[$p:lk] != 4                                            (: DecimalLiteral :)
                    and $state[$p:lk] != 5                                            (: DoubleLiteral :)
                    and $state[$p:lk] != 6                                            (: StringLiteral :)
                    and $state[$p:lk] != 7                                            (: Wildcard :)
                    and $state[$p:lk] != 12                                           (: '(' :)
                    and $state[$p:lk] != 30                                           (: '@' :)
                    and $state[$p:lk] != 37                                           (: 'attribute' :)
                    and $state[$p:lk] != 45                                           (: 'document-node' :)
                    and $state[$p:lk] != 46                                           (: 'element' :)
                    and $state[$p:lk] != 52                                           (: 'following' :)
                    and $state[$p:lk] != 53                                           (: 'following-sibling' :)
                    and $state[$p:lk] != 67                                           (: 'namespace' :)
                    and $state[$p:lk] != 69                                           (: 'node' :)
                    and $state[$p:lk] != 75                                           (: 'processing-instruction' :)
                    and $state[$p:lk] != 82                                           (: 'text' :)
                    and $state[$p:lk] != 265                                          (: QName^Token EOF :)
                    and $state[$p:lk] != 291                                          (: 'and' EOF :)
                    and $state[$p:lk] != 296                                          (: 'child' EOF :)
                    and $state[$p:lk] != 298                                          (: 'descendant' EOF :)
                    and $state[$p:lk] != 299                                          (: 'descendant-or-self' EOF :)
                    and $state[$p:lk] != 300                                          (: 'div' EOF :)
                    and $state[$p:lk] != 322                                          (: 'mod' EOF :)
                    and $state[$p:lk] != 327                                          (: 'or' EOF :)
                    and $state[$p:lk] != 336                                          (: 'self' EOF :)
                    and $state[$p:lk] != 1417                                         (: QName^Token '!=' :)
                    and $state[$p:lk] != 1443                                         (: 'and' '!=' :)
                    and $state[$p:lk] != 1448                                         (: 'child' '!=' :)
                    and $state[$p:lk] != 1450                                         (: 'descendant' '!=' :)
                    and $state[$p:lk] != 1451                                         (: 'descendant-or-self' '!=' :)
                    and $state[$p:lk] != 1452                                         (: 'div' '!=' :)
                    and $state[$p:lk] != 1474                                         (: 'mod' '!=' :)
                    and $state[$p:lk] != 1479                                         (: 'or' '!=' :)
                    and $state[$p:lk] != 1488                                         (: 'self' '!=' :)
                    and $state[$p:lk] != 1545                                         (: QName^Token '(' :)
                    and $state[$p:lk] != 1571                                         (: 'and' '(' :)
                    and $state[$p:lk] != 1576                                         (: 'child' '(' :)
                    and $state[$p:lk] != 1578                                         (: 'descendant' '(' :)
                    and $state[$p:lk] != 1579                                         (: 'descendant-or-self' '(' :)
                    and $state[$p:lk] != 1580                                         (: 'div' '(' :)
                    and $state[$p:lk] != 1602                                         (: 'mod' '(' :)
                    and $state[$p:lk] != 1607                                         (: 'or' '(' :)
                    and $state[$p:lk] != 1616                                         (: 'self' '(' :)
                    and $state[$p:lk] != 1673                                         (: QName^Token ')' :)
                    and $state[$p:lk] != 1699                                         (: 'and' ')' :)
                    and $state[$p:lk] != 1704                                         (: 'child' ')' :)
                    and $state[$p:lk] != 1706                                         (: 'descendant' ')' :)
                    and $state[$p:lk] != 1707                                         (: 'descendant-or-self' ')' :)
                    and $state[$p:lk] != 1708                                         (: 'div' ')' :)
                    and $state[$p:lk] != 1730                                         (: 'mod' ')' :)
                    and $state[$p:lk] != 1735                                         (: 'or' ')' :)
                    and $state[$p:lk] != 1744                                         (: 'self' ')' :)
                    and $state[$p:lk] != 1801                                         (: QName^Token '*' :)
                    and $state[$p:lk] != 1827                                         (: 'and' '*' :)
                    and $state[$p:lk] != 1832                                         (: 'child' '*' :)
                    and $state[$p:lk] != 1834                                         (: 'descendant' '*' :)
                    and $state[$p:lk] != 1835                                         (: 'descendant-or-self' '*' :)
                    and $state[$p:lk] != 1836                                         (: 'div' '*' :)
                    and $state[$p:lk] != 1858                                         (: 'mod' '*' :)
                    and $state[$p:lk] != 1863                                         (: 'or' '*' :)
                    and $state[$p:lk] != 1872                                         (: 'self' '*' :)
                    and $state[$p:lk] != 2057                                         (: QName^Token '+' :)
                    and $state[$p:lk] != 2083                                         (: 'and' '+' :)
                    and $state[$p:lk] != 2088                                         (: 'child' '+' :)
                    and $state[$p:lk] != 2090                                         (: 'descendant' '+' :)
                    and $state[$p:lk] != 2091                                         (: 'descendant-or-self' '+' :)
                    and $state[$p:lk] != 2092                                         (: 'div' '+' :)
                    and $state[$p:lk] != 2114                                         (: 'mod' '+' :)
                    and $state[$p:lk] != 2119                                         (: 'or' '+' :)
                    and $state[$p:lk] != 2128                                         (: 'self' '+' :)
                    and $state[$p:lk] != 2313                                         (: QName^Token ',' :)
                    and $state[$p:lk] != 2339                                         (: 'and' ',' :)
                    and $state[$p:lk] != 2344                                         (: 'child' ',' :)
                    and $state[$p:lk] != 2346                                         (: 'descendant' ',' :)
                    and $state[$p:lk] != 2347                                         (: 'descendant-or-self' ',' :)
                    and $state[$p:lk] != 2348                                         (: 'div' ',' :)
                    and $state[$p:lk] != 2370                                         (: 'mod' ',' :)
                    and $state[$p:lk] != 2375                                         (: 'or' ',' :)
                    and $state[$p:lk] != 2384                                         (: 'self' ',' :)
                    and $state[$p:lk] != 2441                                         (: QName^Token '-' :)
                    and $state[$p:lk] != 2467                                         (: 'and' '-' :)
                    and $state[$p:lk] != 2472                                         (: 'child' '-' :)
                    and $state[$p:lk] != 2474                                         (: 'descendant' '-' :)
                    and $state[$p:lk] != 2475                                         (: 'descendant-or-self' '-' :)
                    and $state[$p:lk] != 2476                                         (: 'div' '-' :)
                    and $state[$p:lk] != 2498                                         (: 'mod' '-' :)
                    and $state[$p:lk] != 2503                                         (: 'or' '-' :)
                    and $state[$p:lk] != 2512                                         (: 'self' '-' :)
                    and $state[$p:lk] != 2697                                         (: QName^Token '/' :)
                    and $state[$p:lk] != 2723                                         (: 'and' '/' :)
                    and $state[$p:lk] != 2728                                         (: 'child' '/' :)
                    and $state[$p:lk] != 2730                                         (: 'descendant' '/' :)
                    and $state[$p:lk] != 2731                                         (: 'descendant-or-self' '/' :)
                    and $state[$p:lk] != 2732                                         (: 'div' '/' :)
                    and $state[$p:lk] != 2754                                         (: 'mod' '/' :)
                    and $state[$p:lk] != 2759                                         (: 'or' '/' :)
                    and $state[$p:lk] != 2768                                         (: 'self' '/' :)
                    and $state[$p:lk] != 2825                                         (: QName^Token '//' :)
                    and $state[$p:lk] != 2851                                         (: 'and' '//' :)
                    and $state[$p:lk] != 2856                                         (: 'child' '//' :)
                    and $state[$p:lk] != 2858                                         (: 'descendant' '//' :)
                    and $state[$p:lk] != 2859                                         (: 'descendant-or-self' '//' :)
                    and $state[$p:lk] != 2860                                         (: 'div' '//' :)
                    and $state[$p:lk] != 2882                                         (: 'mod' '//' :)
                    and $state[$p:lk] != 2887                                         (: 'or' '//' :)
                    and $state[$p:lk] != 2896                                         (: 'self' '//' :)
                    and $state[$p:lk] != 2984                                         (: 'child' '::' :)
                    and $state[$p:lk] != 2986                                         (: 'descendant' '::' :)
                    and $state[$p:lk] != 2987                                         (: 'descendant-or-self' '::' :)
                    and $state[$p:lk] != 3024                                         (: 'self' '::' :)
                    and $state[$p:lk] != 3081                                         (: QName^Token '&lt;' :)
                    and $state[$p:lk] != 3107                                         (: 'and' '&lt;' :)
                    and $state[$p:lk] != 3112                                         (: 'child' '&lt;' :)
                    and $state[$p:lk] != 3114                                         (: 'descendant' '&lt;' :)
                    and $state[$p:lk] != 3115                                         (: 'descendant-or-self' '&lt;' :)
                    and $state[$p:lk] != 3116                                         (: 'div' '&lt;' :)
                    and $state[$p:lk] != 3138                                         (: 'mod' '&lt;' :)
                    and $state[$p:lk] != 3143                                         (: 'or' '&lt;' :)
                    and $state[$p:lk] != 3152                                         (: 'self' '&lt;' :)
                    and $state[$p:lk] != 3209                                         (: QName^Token '&lt;=' :)
                    and $state[$p:lk] != 3235                                         (: 'and' '&lt;=' :)
                    and $state[$p:lk] != 3240                                         (: 'child' '&lt;=' :)
                    and $state[$p:lk] != 3242                                         (: 'descendant' '&lt;=' :)
                    and $state[$p:lk] != 3243                                         (: 'descendant-or-self' '&lt;=' :)
                    and $state[$p:lk] != 3244                                         (: 'div' '&lt;=' :)
                    and $state[$p:lk] != 3266                                         (: 'mod' '&lt;=' :)
                    and $state[$p:lk] != 3271                                         (: 'or' '&lt;=' :)
                    and $state[$p:lk] != 3280                                         (: 'self' '&lt;=' :)
                    and $state[$p:lk] != 3337                                         (: QName^Token '=' :)
                    and $state[$p:lk] != 3363                                         (: 'and' '=' :)
                    and $state[$p:lk] != 3368                                         (: 'child' '=' :)
                    and $state[$p:lk] != 3370                                         (: 'descendant' '=' :)
                    and $state[$p:lk] != 3371                                         (: 'descendant-or-self' '=' :)
                    and $state[$p:lk] != 3372                                         (: 'div' '=' :)
                    and $state[$p:lk] != 3394                                         (: 'mod' '=' :)
                    and $state[$p:lk] != 3399                                         (: 'or' '=' :)
                    and $state[$p:lk] != 3408                                         (: 'self' '=' :)
                    and $state[$p:lk] != 3465                                         (: QName^Token '>' :)
                    and $state[$p:lk] != 3491                                         (: 'and' '>' :)
                    and $state[$p:lk] != 3496                                         (: 'child' '>' :)
                    and $state[$p:lk] != 3498                                         (: 'descendant' '>' :)
                    and $state[$p:lk] != 3499                                         (: 'descendant-or-self' '>' :)
                    and $state[$p:lk] != 3500                                         (: 'div' '>' :)
                    and $state[$p:lk] != 3522                                         (: 'mod' '>' :)
                    and $state[$p:lk] != 3527                                         (: 'or' '>' :)
                    and $state[$p:lk] != 3536                                         (: 'self' '>' :)
                    and $state[$p:lk] != 3593                                         (: QName^Token '>=' :)
                    and $state[$p:lk] != 3619                                         (: 'and' '>=' :)
                    and $state[$p:lk] != 3624                                         (: 'child' '>=' :)
                    and $state[$p:lk] != 3626                                         (: 'descendant' '>=' :)
                    and $state[$p:lk] != 3627                                         (: 'descendant-or-self' '>=' :)
                    and $state[$p:lk] != 3628                                         (: 'div' '>=' :)
                    and $state[$p:lk] != 3650                                         (: 'mod' '>=' :)
                    and $state[$p:lk] != 3655                                         (: 'or' '>=' :)
                    and $state[$p:lk] != 3664                                         (: 'self' '>=' :)
                    and $state[$p:lk] != 3977                                         (: QName^Token '[' :)
                    and $state[$p:lk] != 4003                                         (: 'and' '[' :)
                    and $state[$p:lk] != 4008                                         (: 'child' '[' :)
                    and $state[$p:lk] != 4010                                         (: 'descendant' '[' :)
                    and $state[$p:lk] != 4011                                         (: 'descendant-or-self' '[' :)
                    and $state[$p:lk] != 4012                                         (: 'div' '[' :)
                    and $state[$p:lk] != 4034                                         (: 'mod' '[' :)
                    and $state[$p:lk] != 4039                                         (: 'or' '[' :)
                    and $state[$p:lk] != 4048                                         (: 'self' '[' :)
                    and $state[$p:lk] != 4105                                         (: QName^Token ']' :)
                    and $state[$p:lk] != 4131                                         (: 'and' ']' :)
                    and $state[$p:lk] != 4136                                         (: 'child' ']' :)
                    and $state[$p:lk] != 4138                                         (: 'descendant' ']' :)
                    and $state[$p:lk] != 4139                                         (: 'descendant-or-self' ']' :)
                    and $state[$p:lk] != 4140                                         (: 'div' ']' :)
                    and $state[$p:lk] != 4162                                         (: 'mod' ']' :)
                    and $state[$p:lk] != 4167                                         (: 'or' ']' :)
                    and $state[$p:lk] != 4176                                         (: 'self' ']' :)
                    and $state[$p:lk] != 4489                                         (: QName^Token 'and' :)
                    and $state[$p:lk] != 4515                                         (: 'and' 'and' :)
                    and $state[$p:lk] != 4520                                         (: 'child' 'and' :)
                    and $state[$p:lk] != 4522                                         (: 'descendant' 'and' :)
                    and $state[$p:lk] != 4523                                         (: 'descendant-or-self' 'and' :)
                    and $state[$p:lk] != 4524                                         (: 'div' 'and' :)
                    and $state[$p:lk] != 4546                                         (: 'mod' 'and' :)
                    and $state[$p:lk] != 4551                                         (: 'or' 'and' :)
                    and $state[$p:lk] != 4560                                         (: 'self' 'and' :)
                    and $state[$p:lk] != 5641                                         (: QName^Token 'div' :)
                    and $state[$p:lk] != 5667                                         (: 'and' 'div' :)
                    and $state[$p:lk] != 5672                                         (: 'child' 'div' :)
                    and $state[$p:lk] != 5674                                         (: 'descendant' 'div' :)
                    and $state[$p:lk] != 5675                                         (: 'descendant-or-self' 'div' :)
                    and $state[$p:lk] != 5676                                         (: 'div' 'div' :)
                    and $state[$p:lk] != 5698                                         (: 'mod' 'div' :)
                    and $state[$p:lk] != 5703                                         (: 'or' 'div' :)
                    and $state[$p:lk] != 5712                                         (: 'self' 'div' :)
                    and $state[$p:lk] != 8457                                         (: QName^Token 'mod' :)
                    and $state[$p:lk] != 8483                                         (: 'and' 'mod' :)
                    and $state[$p:lk] != 8488                                         (: 'child' 'mod' :)
                    and $state[$p:lk] != 8490                                         (: 'descendant' 'mod' :)
                    and $state[$p:lk] != 8491                                         (: 'descendant-or-self' 'mod' :)
                    and $state[$p:lk] != 8492                                         (: 'div' 'mod' :)
                    and $state[$p:lk] != 8514                                         (: 'mod' 'mod' :)
                    and $state[$p:lk] != 8519                                         (: 'or' 'mod' :)
                    and $state[$p:lk] != 8528                                         (: 'self' 'mod' :)
                    and $state[$p:lk] != 9097                                         (: QName^Token 'or' :)
                    and $state[$p:lk] != 9123                                         (: 'and' 'or' :)
                    and $state[$p:lk] != 9128                                         (: 'child' 'or' :)
                    and $state[$p:lk] != 9130                                         (: 'descendant' 'or' :)
                    and $state[$p:lk] != 9131                                         (: 'descendant-or-self' 'or' :)
                    and $state[$p:lk] != 9132                                         (: 'div' 'or' :)
                    and $state[$p:lk] != 9154                                         (: 'mod' 'or' :)
                    and $state[$p:lk] != 9159                                         (: 'or' 'or' :)
                    and $state[$p:lk] != 9168                                         (: 'self' 'or' :)
                    and $state[$p:lk] != 11273                                        (: QName^Token '|' :)
                    and $state[$p:lk] != 11299                                        (: 'and' '|' :)
                    and $state[$p:lk] != 11304                                        (: 'child' '|' :)
                    and $state[$p:lk] != 11306                                        (: 'descendant' '|' :)
                    and $state[$p:lk] != 11307                                        (: 'descendant-or-self' '|' :)
                    and $state[$p:lk] != 11308                                        (: 'div' '|' :)
                    and $state[$p:lk] != 11330                                        (: 'mod' '|' :)
                    and $state[$p:lk] != 11335                                        (: 'or' '|' :)
                    and $state[$p:lk] != 11344">                                    <!-- 'self' '|' -->
          <xsl:variable name="state" select="p:memoized($state, 1)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-AxisStep($input, $state)
              "/>
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 3                                             (: IntegerLiteral :)
                     or $state[$p:lk] = 4                                             (: DecimalLiteral :)
                     or $state[$p:lk] = 5                                             (: DoubleLiteral :)
                     or $state[$p:lk] = 6                                             (: StringLiteral :)
                     or $state[$p:lk] = 12                                            (: '(' :)
                     or $state[$p:lk] = 1545                                          (: QName^Token '(' :)
                     or $state[$p:lk] = 1571                                          (: 'and' '(' :)
                     or $state[$p:lk] = 1576                                          (: 'child' '(' :)
                     or $state[$p:lk] = 1578                                          (: 'descendant' '(' :)
                     or $state[$p:lk] = 1579                                          (: 'descendant-or-self' '(' :)
                     or $state[$p:lk] = 1580                                          (: 'div' '(' :)
                     or $state[$p:lk] = 1602                                          (: 'mod' '(' :)
                     or $state[$p:lk] = 1607                                          (: 'or' '(' :)
                     or $state[$p:lk] = 1616">                                      <!-- 'self' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-FilterExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AxisStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'StepExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing StepExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-StepExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 20">                                       <!-- '.' -->
          <xsl:variable name="state" select="p:lookahead2W(17, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 276">                                <!-- '.' EOF -->
                <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- END -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1684,                                  (: '.' ')' :)
                                               4116)">                              <!-- '.' ']' -->
                <xsl:variable name="state" select="p:lookahead3W(17, $input, $state)"/> <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                             '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                             'mod' | 'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (2708,                                  (: '.' '/' :)
                                               2836)">                              <!-- '.' '//' -->
                <xsl:variable name="state" select="p:lookahead3W(21, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '.' | '@' | 'and' |
                                                                                             'attribute' | 'child' | 'descendant' | 'descendant-or-self' |
                                                                                             'div' | 'document-node' | 'element' | 'following' |
                                                                                             'following-sibling' | 'mod' | 'namespace' | 'node' | 'or' |
                                                                                             'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1428,                                  (: '.' '!=' :)
                                               1812,                                  (: '.' '*' :)
                                               2068,                                  (: '.' '+' :)
                                               2324,                                  (: '.' ',' :)
                                               2452,                                  (: '.' '-' :)
                                               3092,                                  (: '.' '&lt;' :)
                                               3220,                                  (: '.' '&lt;=' :)
                                               3348,                                  (: '.' '=' :)
                                               3476,                                  (: '.' '>' :)
                                               3604,                                  (: '.' '>=' :)
                                               3988,                                  (: '.' '[' :)
                                               4500,                                  (: '.' 'and' :)
                                               5652,                                  (: '.' 'div' :)
                                               8468,                                  (: '.' 'mod' :)
                                               9108,                                  (: '.' 'or' :)
                                               11284)">                             <!-- '.' '|' -->
                <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' |
                                                                                             '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                             'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                             'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                             'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (40,                                          (: 'child' :)
                                         42,                                          (: 'descendant' :)
                                         43,                                          (: 'descendant-or-self' :)
                                         80)">                                      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' |
                                                                                         'div' | 'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (9,                                           (: QName^Token :)
                                         35,                                          (: 'and' :)
                                         44,                                          (: 'div' :)
                                         66,                                          (: 'mod' :)
                                         71)">                                      <!-- 'or' -->
          <xsl:variable name="state" select="p:lookahead2W(18, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                         'mod' | 'or' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 3                                            (: IntegerLiteral :)
                    and $state[$p:lk] != 4                                            (: DecimalLiteral :)
                    and $state[$p:lk] != 5                                            (: DoubleLiteral :)
                    and $state[$p:lk] != 6                                            (: StringLiteral :)
                    and $state[$p:lk] != 7                                            (: Wildcard :)
                    and $state[$p:lk] != 12                                           (: '(' :)
                    and $state[$p:lk] != 30                                           (: '@' :)
                    and $state[$p:lk] != 37                                           (: 'attribute' :)
                    and $state[$p:lk] != 45                                           (: 'document-node' :)
                    and $state[$p:lk] != 46                                           (: 'element' :)
                    and $state[$p:lk] != 52                                           (: 'following' :)
                    and $state[$p:lk] != 53                                           (: 'following-sibling' :)
                    and $state[$p:lk] != 67                                           (: 'namespace' :)
                    and $state[$p:lk] != 69                                           (: 'node' :)
                    and $state[$p:lk] != 75                                           (: 'processing-instruction' :)
                    and $state[$p:lk] != 82                                           (: 'text' :)
                    and $state[$p:lk] != 265                                          (: QName^Token EOF :)
                    and $state[$p:lk] != 291                                          (: 'and' EOF :)
                    and $state[$p:lk] != 296                                          (: 'child' EOF :)
                    and $state[$p:lk] != 298                                          (: 'descendant' EOF :)
                    and $state[$p:lk] != 299                                          (: 'descendant-or-self' EOF :)
                    and $state[$p:lk] != 300                                          (: 'div' EOF :)
                    and $state[$p:lk] != 322                                          (: 'mod' EOF :)
                    and $state[$p:lk] != 327                                          (: 'or' EOF :)
                    and $state[$p:lk] != 336                                          (: 'self' EOF :)
                    and $state[$p:lk] != 1417                                         (: QName^Token '!=' :)
                    and $state[$p:lk] != 1443                                         (: 'and' '!=' :)
                    and $state[$p:lk] != 1448                                         (: 'child' '!=' :)
                    and $state[$p:lk] != 1450                                         (: 'descendant' '!=' :)
                    and $state[$p:lk] != 1451                                         (: 'descendant-or-self' '!=' :)
                    and $state[$p:lk] != 1452                                         (: 'div' '!=' :)
                    and $state[$p:lk] != 1474                                         (: 'mod' '!=' :)
                    and $state[$p:lk] != 1479                                         (: 'or' '!=' :)
                    and $state[$p:lk] != 1488                                         (: 'self' '!=' :)
                    and $state[$p:lk] != 1545                                         (: QName^Token '(' :)
                    and $state[$p:lk] != 1571                                         (: 'and' '(' :)
                    and $state[$p:lk] != 1576                                         (: 'child' '(' :)
                    and $state[$p:lk] != 1578                                         (: 'descendant' '(' :)
                    and $state[$p:lk] != 1579                                         (: 'descendant-or-self' '(' :)
                    and $state[$p:lk] != 1580                                         (: 'div' '(' :)
                    and $state[$p:lk] != 1602                                         (: 'mod' '(' :)
                    and $state[$p:lk] != 1607                                         (: 'or' '(' :)
                    and $state[$p:lk] != 1616                                         (: 'self' '(' :)
                    and $state[$p:lk] != 1673                                         (: QName^Token ')' :)
                    and $state[$p:lk] != 1699                                         (: 'and' ')' :)
                    and $state[$p:lk] != 1704                                         (: 'child' ')' :)
                    and $state[$p:lk] != 1706                                         (: 'descendant' ')' :)
                    and $state[$p:lk] != 1707                                         (: 'descendant-or-self' ')' :)
                    and $state[$p:lk] != 1708                                         (: 'div' ')' :)
                    and $state[$p:lk] != 1730                                         (: 'mod' ')' :)
                    and $state[$p:lk] != 1735                                         (: 'or' ')' :)
                    and $state[$p:lk] != 1744                                         (: 'self' ')' :)
                    and $state[$p:lk] != 1801                                         (: QName^Token '*' :)
                    and $state[$p:lk] != 1827                                         (: 'and' '*' :)
                    and $state[$p:lk] != 1832                                         (: 'child' '*' :)
                    and $state[$p:lk] != 1834                                         (: 'descendant' '*' :)
                    and $state[$p:lk] != 1835                                         (: 'descendant-or-self' '*' :)
                    and $state[$p:lk] != 1836                                         (: 'div' '*' :)
                    and $state[$p:lk] != 1858                                         (: 'mod' '*' :)
                    and $state[$p:lk] != 1863                                         (: 'or' '*' :)
                    and $state[$p:lk] != 1872                                         (: 'self' '*' :)
                    and $state[$p:lk] != 2057                                         (: QName^Token '+' :)
                    and $state[$p:lk] != 2083                                         (: 'and' '+' :)
                    and $state[$p:lk] != 2088                                         (: 'child' '+' :)
                    and $state[$p:lk] != 2090                                         (: 'descendant' '+' :)
                    and $state[$p:lk] != 2091                                         (: 'descendant-or-self' '+' :)
                    and $state[$p:lk] != 2092                                         (: 'div' '+' :)
                    and $state[$p:lk] != 2114                                         (: 'mod' '+' :)
                    and $state[$p:lk] != 2119                                         (: 'or' '+' :)
                    and $state[$p:lk] != 2128                                         (: 'self' '+' :)
                    and $state[$p:lk] != 2313                                         (: QName^Token ',' :)
                    and $state[$p:lk] != 2339                                         (: 'and' ',' :)
                    and $state[$p:lk] != 2344                                         (: 'child' ',' :)
                    and $state[$p:lk] != 2346                                         (: 'descendant' ',' :)
                    and $state[$p:lk] != 2347                                         (: 'descendant-or-self' ',' :)
                    and $state[$p:lk] != 2348                                         (: 'div' ',' :)
                    and $state[$p:lk] != 2370                                         (: 'mod' ',' :)
                    and $state[$p:lk] != 2375                                         (: 'or' ',' :)
                    and $state[$p:lk] != 2384                                         (: 'self' ',' :)
                    and $state[$p:lk] != 2441                                         (: QName^Token '-' :)
                    and $state[$p:lk] != 2467                                         (: 'and' '-' :)
                    and $state[$p:lk] != 2472                                         (: 'child' '-' :)
                    and $state[$p:lk] != 2474                                         (: 'descendant' '-' :)
                    and $state[$p:lk] != 2475                                         (: 'descendant-or-self' '-' :)
                    and $state[$p:lk] != 2476                                         (: 'div' '-' :)
                    and $state[$p:lk] != 2498                                         (: 'mod' '-' :)
                    and $state[$p:lk] != 2503                                         (: 'or' '-' :)
                    and $state[$p:lk] != 2512                                         (: 'self' '-' :)
                    and $state[$p:lk] != 2697                                         (: QName^Token '/' :)
                    and $state[$p:lk] != 2723                                         (: 'and' '/' :)
                    and $state[$p:lk] != 2728                                         (: 'child' '/' :)
                    and $state[$p:lk] != 2730                                         (: 'descendant' '/' :)
                    and $state[$p:lk] != 2731                                         (: 'descendant-or-self' '/' :)
                    and $state[$p:lk] != 2732                                         (: 'div' '/' :)
                    and $state[$p:lk] != 2754                                         (: 'mod' '/' :)
                    and $state[$p:lk] != 2759                                         (: 'or' '/' :)
                    and $state[$p:lk] != 2768                                         (: 'self' '/' :)
                    and $state[$p:lk] != 2825                                         (: QName^Token '//' :)
                    and $state[$p:lk] != 2851                                         (: 'and' '//' :)
                    and $state[$p:lk] != 2856                                         (: 'child' '//' :)
                    and $state[$p:lk] != 2858                                         (: 'descendant' '//' :)
                    and $state[$p:lk] != 2859                                         (: 'descendant-or-self' '//' :)
                    and $state[$p:lk] != 2860                                         (: 'div' '//' :)
                    and $state[$p:lk] != 2882                                         (: 'mod' '//' :)
                    and $state[$p:lk] != 2887                                         (: 'or' '//' :)
                    and $state[$p:lk] != 2896                                         (: 'self' '//' :)
                    and $state[$p:lk] != 2984                                         (: 'child' '::' :)
                    and $state[$p:lk] != 2986                                         (: 'descendant' '::' :)
                    and $state[$p:lk] != 2987                                         (: 'descendant-or-self' '::' :)
                    and $state[$p:lk] != 3024                                         (: 'self' '::' :)
                    and $state[$p:lk] != 3081                                         (: QName^Token '&lt;' :)
                    and $state[$p:lk] != 3107                                         (: 'and' '&lt;' :)
                    and $state[$p:lk] != 3112                                         (: 'child' '&lt;' :)
                    and $state[$p:lk] != 3114                                         (: 'descendant' '&lt;' :)
                    and $state[$p:lk] != 3115                                         (: 'descendant-or-self' '&lt;' :)
                    and $state[$p:lk] != 3116                                         (: 'div' '&lt;' :)
                    and $state[$p:lk] != 3138                                         (: 'mod' '&lt;' :)
                    and $state[$p:lk] != 3143                                         (: 'or' '&lt;' :)
                    and $state[$p:lk] != 3152                                         (: 'self' '&lt;' :)
                    and $state[$p:lk] != 3209                                         (: QName^Token '&lt;=' :)
                    and $state[$p:lk] != 3235                                         (: 'and' '&lt;=' :)
                    and $state[$p:lk] != 3240                                         (: 'child' '&lt;=' :)
                    and $state[$p:lk] != 3242                                         (: 'descendant' '&lt;=' :)
                    and $state[$p:lk] != 3243                                         (: 'descendant-or-self' '&lt;=' :)
                    and $state[$p:lk] != 3244                                         (: 'div' '&lt;=' :)
                    and $state[$p:lk] != 3266                                         (: 'mod' '&lt;=' :)
                    and $state[$p:lk] != 3271                                         (: 'or' '&lt;=' :)
                    and $state[$p:lk] != 3280                                         (: 'self' '&lt;=' :)
                    and $state[$p:lk] != 3337                                         (: QName^Token '=' :)
                    and $state[$p:lk] != 3363                                         (: 'and' '=' :)
                    and $state[$p:lk] != 3368                                         (: 'child' '=' :)
                    and $state[$p:lk] != 3370                                         (: 'descendant' '=' :)
                    and $state[$p:lk] != 3371                                         (: 'descendant-or-self' '=' :)
                    and $state[$p:lk] != 3372                                         (: 'div' '=' :)
                    and $state[$p:lk] != 3394                                         (: 'mod' '=' :)
                    and $state[$p:lk] != 3399                                         (: 'or' '=' :)
                    and $state[$p:lk] != 3408                                         (: 'self' '=' :)
                    and $state[$p:lk] != 3465                                         (: QName^Token '>' :)
                    and $state[$p:lk] != 3491                                         (: 'and' '>' :)
                    and $state[$p:lk] != 3496                                         (: 'child' '>' :)
                    and $state[$p:lk] != 3498                                         (: 'descendant' '>' :)
                    and $state[$p:lk] != 3499                                         (: 'descendant-or-self' '>' :)
                    and $state[$p:lk] != 3500                                         (: 'div' '>' :)
                    and $state[$p:lk] != 3522                                         (: 'mod' '>' :)
                    and $state[$p:lk] != 3527                                         (: 'or' '>' :)
                    and $state[$p:lk] != 3536                                         (: 'self' '>' :)
                    and $state[$p:lk] != 3593                                         (: QName^Token '>=' :)
                    and $state[$p:lk] != 3619                                         (: 'and' '>=' :)
                    and $state[$p:lk] != 3624                                         (: 'child' '>=' :)
                    and $state[$p:lk] != 3626                                         (: 'descendant' '>=' :)
                    and $state[$p:lk] != 3627                                         (: 'descendant-or-self' '>=' :)
                    and $state[$p:lk] != 3628                                         (: 'div' '>=' :)
                    and $state[$p:lk] != 3650                                         (: 'mod' '>=' :)
                    and $state[$p:lk] != 3655                                         (: 'or' '>=' :)
                    and $state[$p:lk] != 3664                                         (: 'self' '>=' :)
                    and $state[$p:lk] != 3977                                         (: QName^Token '[' :)
                    and $state[$p:lk] != 4003                                         (: 'and' '[' :)
                    and $state[$p:lk] != 4008                                         (: 'child' '[' :)
                    and $state[$p:lk] != 4010                                         (: 'descendant' '[' :)
                    and $state[$p:lk] != 4011                                         (: 'descendant-or-self' '[' :)
                    and $state[$p:lk] != 4012                                         (: 'div' '[' :)
                    and $state[$p:lk] != 4034                                         (: 'mod' '[' :)
                    and $state[$p:lk] != 4039                                         (: 'or' '[' :)
                    and $state[$p:lk] != 4048                                         (: 'self' '[' :)
                    and $state[$p:lk] != 4105                                         (: QName^Token ']' :)
                    and $state[$p:lk] != 4131                                         (: 'and' ']' :)
                    and $state[$p:lk] != 4136                                         (: 'child' ']' :)
                    and $state[$p:lk] != 4138                                         (: 'descendant' ']' :)
                    and $state[$p:lk] != 4139                                         (: 'descendant-or-self' ']' :)
                    and $state[$p:lk] != 4140                                         (: 'div' ']' :)
                    and $state[$p:lk] != 4162                                         (: 'mod' ']' :)
                    and $state[$p:lk] != 4167                                         (: 'or' ']' :)
                    and $state[$p:lk] != 4176                                         (: 'self' ']' :)
                    and $state[$p:lk] != 4489                                         (: QName^Token 'and' :)
                    and $state[$p:lk] != 4515                                         (: 'and' 'and' :)
                    and $state[$p:lk] != 4520                                         (: 'child' 'and' :)
                    and $state[$p:lk] != 4522                                         (: 'descendant' 'and' :)
                    and $state[$p:lk] != 4523                                         (: 'descendant-or-self' 'and' :)
                    and $state[$p:lk] != 4524                                         (: 'div' 'and' :)
                    and $state[$p:lk] != 4546                                         (: 'mod' 'and' :)
                    and $state[$p:lk] != 4551                                         (: 'or' 'and' :)
                    and $state[$p:lk] != 4560                                         (: 'self' 'and' :)
                    and $state[$p:lk] != 5641                                         (: QName^Token 'div' :)
                    and $state[$p:lk] != 5667                                         (: 'and' 'div' :)
                    and $state[$p:lk] != 5672                                         (: 'child' 'div' :)
                    and $state[$p:lk] != 5674                                         (: 'descendant' 'div' :)
                    and $state[$p:lk] != 5675                                         (: 'descendant-or-self' 'div' :)
                    and $state[$p:lk] != 5676                                         (: 'div' 'div' :)
                    and $state[$p:lk] != 5698                                         (: 'mod' 'div' :)
                    and $state[$p:lk] != 5703                                         (: 'or' 'div' :)
                    and $state[$p:lk] != 5712                                         (: 'self' 'div' :)
                    and $state[$p:lk] != 8457                                         (: QName^Token 'mod' :)
                    and $state[$p:lk] != 8483                                         (: 'and' 'mod' :)
                    and $state[$p:lk] != 8488                                         (: 'child' 'mod' :)
                    and $state[$p:lk] != 8490                                         (: 'descendant' 'mod' :)
                    and $state[$p:lk] != 8491                                         (: 'descendant-or-self' 'mod' :)
                    and $state[$p:lk] != 8492                                         (: 'div' 'mod' :)
                    and $state[$p:lk] != 8514                                         (: 'mod' 'mod' :)
                    and $state[$p:lk] != 8519                                         (: 'or' 'mod' :)
                    and $state[$p:lk] != 8528                                         (: 'self' 'mod' :)
                    and $state[$p:lk] != 9097                                         (: QName^Token 'or' :)
                    and $state[$p:lk] != 9123                                         (: 'and' 'or' :)
                    and $state[$p:lk] != 9128                                         (: 'child' 'or' :)
                    and $state[$p:lk] != 9130                                         (: 'descendant' 'or' :)
                    and $state[$p:lk] != 9131                                         (: 'descendant-or-self' 'or' :)
                    and $state[$p:lk] != 9132                                         (: 'div' 'or' :)
                    and $state[$p:lk] != 9154                                         (: 'mod' 'or' :)
                    and $state[$p:lk] != 9159                                         (: 'or' 'or' :)
                    and $state[$p:lk] != 9168                                         (: 'self' 'or' :)
                    and $state[$p:lk] != 11273                                        (: QName^Token '|' :)
                    and $state[$p:lk] != 11299                                        (: 'and' '|' :)
                    and $state[$p:lk] != 11304                                        (: 'child' '|' :)
                    and $state[$p:lk] != 11306                                        (: 'descendant' '|' :)
                    and $state[$p:lk] != 11307                                        (: 'descendant-or-self' '|' :)
                    and $state[$p:lk] != 11308                                        (: 'div' '|' :)
                    and $state[$p:lk] != 11330                                        (: 'mod' '|' :)
                    and $state[$p:lk] != 11335                                        (: 'or' '|' :)
                    and $state[$p:lk] != 11344">                                    <!-- 'self' '|' -->
          <xsl:variable name="state" select="p:memoized($state, 1)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-AxisStep($input, $state)
              "/>
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 3                                             (: IntegerLiteral :)
                     or $state[$p:lk] = 4                                             (: DecimalLiteral :)
                     or $state[$p:lk] = 5                                             (: DoubleLiteral :)
                     or $state[$p:lk] = 6                                             (: StringLiteral :)
                     or $state[$p:lk] = 12                                            (: '(' :)
                     or $state[$p:lk] = 1545                                          (: QName^Token '(' :)
                     or $state[$p:lk] = 1571                                          (: 'and' '(' :)
                     or $state[$p:lk] = 1576                                          (: 'child' '(' :)
                     or $state[$p:lk] = 1578                                          (: 'descendant' '(' :)
                     or $state[$p:lk] = 1579                                          (: 'descendant-or-self' '(' :)
                     or $state[$p:lk] = 1580                                          (: 'div' '(' :)
                     or $state[$p:lk] = 1602                                          (: 'mod' '(' :)
                     or $state[$p:lk] = 1607                                          (: 'or' '(' :)
                     or $state[$p:lk] = 1616">                                      <!-- 'self' '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-FilterExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-AxisStep($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production RelativePathExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-RelativePathExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 21                                         (: '/' :)
                      and $state[$p:l1] != 22">                                     <!-- '//' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 21">                                <!-- '/' -->
                  <xsl:variable name="state" select="p:consume(21, $input, $state)"/> <!-- '/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(22, $input, $state)"/> <!-- '//' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '.' | '@' | 'and' |
                                                                                         'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'following' | 'following-sibling' |
                                                                                         'mod' | 'namespace' | 'node' | 'or' | 'processing-instruction' |
                                                                                         'self' | 'text' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-StepExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-RelativePathExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production RelativePathExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-RelativePathExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 21                                         (: '/' :)
                      and $state[$p:l1] != 22">                                     <!-- '//' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 21">                                <!-- '/' -->
                  <xsl:variable name="state" select="p:consumeT(21, $input, $state)"/> <!-- '/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(22, $input, $state)"/> <!-- '//' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '.' | '@' | 'and' |
                                                                                         'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'following' | 'following-sibling' |
                                                                                         'mod' | 'namespace' | 'node' | 'or' | 'processing-instruction' |
                                                                                         'self' | 'text' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-StepExpr($input, $state)
            "/>
            <xsl:sequence select="p:try-RelativePathExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse RelativePathExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-RelativePathExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-StepExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-RelativePathExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'RelativePathExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing RelativePathExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-RelativePathExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-StepExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-RelativePathExpr-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse PathExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PathExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- '/' -->
          <xsl:variable name="state" select="p:consume(21, $input, $state)"/>       <!-- '/' -->
          <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>   <!-- EOF | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' |
                                                                                         ',' | '-' | '.' | '<' | '<=' | '=' | '>' | '>=' | '@' | ']' | 'and' |
                                                                                         'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'following' | 'following-sibling' |
                                                                                         'mod' | 'namespace' | 'node' | 'or' | 'processing-instruction' |
                                                                                         'self' | 'text' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 2                                       (: EOF :)
                           or $state[$p:l1] = 11                                      (: '!=' :)
                           or $state[$p:l1] = 13                                      (: ')' :)
                           or $state[$p:l1] = 14                                      (: '*' :)
                           or $state[$p:l1] = 16                                      (: '+' :)
                           or $state[$p:l1] = 18                                      (: ',' :)
                           or $state[$p:l1] = 19                                      (: '-' :)
                           or $state[$p:l1] = 24                                      (: '&lt;' :)
                           or $state[$p:l1] = 25                                      (: '&lt;=' :)
                           or $state[$p:l1] = 26                                      (: '=' :)
                           or $state[$p:l1] = 27                                      (: '>' :)
                           or $state[$p:l1] = 28                                      (: '>=' :)
                           or $state[$p:l1] = 32                                      (: ']' :)
                           or $state[$p:l1] = 88">                                  <!-- '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-RelativePathExpr($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- '//' -->
          <xsl:variable name="state" select="p:consume(22, $input, $state)"/>       <!-- '//' -->
          <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '.' | '@' | 'and' |
                                                                                         'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'following' | 'following-sibling' |
                                                                                         'mod' | 'namespace' | 'node' | 'or' | 'processing-instruction' |
                                                                                         'self' | 'text' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-RelativePathExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-RelativePathExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'PathExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing PathExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-PathExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- '/' -->
          <xsl:variable name="state" select="p:consumeT(21, $input, $state)"/>      <!-- '/' -->
          <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>   <!-- EOF | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' |
                                                                                         ',' | '-' | '.' | '<' | '<=' | '=' | '>' | '>=' | '@' | ']' | 'and' |
                                                                                         'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'following' | 'following-sibling' |
                                                                                         'mod' | 'namespace' | 'node' | 'or' | 'processing-instruction' |
                                                                                         'self' | 'text' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 2                                       (: EOF :)
                           or $state[$p:l1] = 11                                      (: '!=' :)
                           or $state[$p:l1] = 13                                      (: ')' :)
                           or $state[$p:l1] = 14                                      (: '*' :)
                           or $state[$p:l1] = 16                                      (: '+' :)
                           or $state[$p:l1] = 18                                      (: ',' :)
                           or $state[$p:l1] = 19                                      (: '-' :)
                           or $state[$p:l1] = 24                                      (: '&lt;' :)
                           or $state[$p:l1] = 25                                      (: '&lt;=' :)
                           or $state[$p:l1] = 26                                      (: '=' :)
                           or $state[$p:l1] = 27                                      (: '>' :)
                           or $state[$p:l1] = 28                                      (: '>=' :)
                           or $state[$p:l1] = 32                                      (: ']' :)
                           or $state[$p:l1] = 88">                                  <!-- '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-RelativePathExpr($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- '//' -->
          <xsl:variable name="state" select="p:consumeT(22, $input, $state)"/>      <!-- '//' -->
          <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '.' | '@' | 'and' |
                                                                                         'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                         'document-node' | 'element' | 'following' | 'following-sibling' |
                                                                                         'mod' | 'namespace' | 'node' | 'or' | 'processing-instruction' |
                                                                                         'self' | 'text' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-RelativePathExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-RelativePathExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse Predicate.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Predicate" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(31, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-Expr($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(32, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Predicate', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing Predicate.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-Predicate" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(31, $input, $state)"/>            <!-- '[' -->
    <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-Expr($input, $state)
    "/>
    <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>            <!-- ']' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production PredicateList (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PredicateList-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>     <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 31">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-Predicate($input, $state)
            "/>
            <xsl:sequence select="p:parse-PredicateList-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production PredicateList (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-PredicateList-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>     <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 31">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-Predicate($input, $state)
            "/>
            <xsl:sequence select="p:try-PredicateList-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse PredicateList.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PredicateList" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-PredicateList-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'PredicateList', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing PredicateList.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-PredicateList" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-PredicateList-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse FunctionName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-FunctionName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 9">                                         <!-- QName^Token -->
          <xsl:variable name="state" select="p:consume(9, $input, $state)"/>        <!-- QName^Token -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 35">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- 'child' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- 'child' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 42">                                        <!-- 'descendant' -->
          <xsl:variable name="state" select="p:consume(42, $input, $state)"/>       <!-- 'descendant' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'descendant-or-self' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'div' -->
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- 'div' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 66">                                        <!-- 'mod' -->
          <xsl:variable name="state" select="p:consume(66, $input, $state)"/>       <!-- 'mod' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 71">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(71, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(80, $input, $state)"/>       <!-- 'self' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'FunctionName', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing FunctionName.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-FunctionName" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 9">                                         <!-- QName^Token -->
          <xsl:variable name="state" select="p:consumeT(9, $input, $state)"/>       <!-- QName^Token -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 35">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/>      <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- 'child' -->
          <xsl:variable name="state" select="p:consumeT(40, $input, $state)"/>      <!-- 'child' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 42">                                        <!-- 'descendant' -->
          <xsl:variable name="state" select="p:consumeT(42, $input, $state)"/>      <!-- 'descendant' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'descendant-or-self' -->
          <xsl:variable name="state" select="p:consumeT(43, $input, $state)"/>      <!-- 'descendant-or-self' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'div' -->
          <xsl:variable name="state" select="p:consumeT(44, $input, $state)"/>      <!-- 'div' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 66">                                        <!-- 'mod' -->
          <xsl:variable name="state" select="p:consumeT(66, $input, $state)"/>      <!-- 'mod' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 71">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consumeT(71, $input, $state)"/>      <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(80, $input, $state)"/>      <!-- 'self' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production FunctionCall (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-FunctionCall-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 18">                                     <!-- ',' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(18, $input, $state)"/>     <!-- ',' -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ExprSingle($input, $state)
            "/>
            <xsl:sequence select="p:parse-FunctionCall-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production FunctionCall (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-FunctionCall-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 18">                                     <!-- ',' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>    <!-- ',' -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-ExprSingle($input, $state)
            "/>
            <xsl:sequence select="p:try-FunctionCall-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse FunctionCall.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-FunctionCall" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-FunctionName($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' | '.' |
                                                                                         '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ExprSingle($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-FunctionCall-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'FunctionCall', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing FunctionCall.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-FunctionCall" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-FunctionName($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(1, $input, $state)"/>          <!-- S^WhiteSpace | '(' -->
    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' | '.' |
                                                                                         '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ExprSingle($input, $state)
          "/>
          <xsl:variable name="state" select="p:try-FunctionCall-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ContextItemExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ContextItemExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(20, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ContextItemExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ContextItemExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ContextItemExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>            <!-- '.' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse GeneralComp.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-GeneralComp" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 26">                                        <!-- '=' -->
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- '=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- '!=' -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- '!=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 24">                                        <!-- '<' -->
          <xsl:variable name="state" select="p:consume(24, $input, $state)"/>       <!-- '<' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '<=' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '<=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- '>' -->
          <xsl:variable name="state" select="p:consume(27, $input, $state)"/>       <!-- '>' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- '>=' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'GeneralComp', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing GeneralComp.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-GeneralComp" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 26">                                        <!-- '=' -->
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- '=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- '!=' -->
          <xsl:variable name="state" select="p:consumeT(11, $input, $state)"/>      <!-- '!=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 24">                                        <!-- '<' -->
          <xsl:variable name="state" select="p:consumeT(24, $input, $state)"/>      <!-- '<' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '<=' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '<=' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- '>' -->
          <xsl:variable name="state" select="p:consumeT(27, $input, $state)"/>      <!-- '>' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>      <!-- '>=' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production MultiplicativeExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-MultiplicativeExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 14                                         (: '*' :)
                      and $state[$p:l1] != 44                                         (: 'div' :)
                      and $state[$p:l1] != 66">                                     <!-- 'mod' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 14">                                <!-- '*' -->
                  <xsl:variable name="state" select="p:consume(14, $input, $state)"/> <!-- '*' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 44">                                <!-- 'div' -->
                  <xsl:variable name="state" select="p:consume(44, $input, $state)"/> <!-- 'div' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(66, $input, $state)"/> <!-- 'mod' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-UnionExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-MultiplicativeExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production MultiplicativeExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-MultiplicativeExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 14                                         (: '*' :)
                      and $state[$p:l1] != 44                                         (: 'div' :)
                      and $state[$p:l1] != 66">                                     <!-- 'mod' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 14">                                <!-- '*' -->
                  <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/> <!-- '*' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 44">                                <!-- 'div' -->
                  <xsl:variable name="state" select="p:consumeT(44, $input, $state)"/> <!-- 'div' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(66, $input, $state)"/> <!-- 'mod' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-UnionExpr($input, $state)
            "/>
            <xsl:sequence select="p:try-MultiplicativeExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse MultiplicativeExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-MultiplicativeExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-UnionExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-MultiplicativeExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'MultiplicativeExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing MultiplicativeExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-MultiplicativeExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-UnionExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-MultiplicativeExpr-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production AdditiveExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AdditiveExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 16                                         (: '+' :)
                      and $state[$p:l1] != 19">                                     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 16">                                <!-- '+' -->
                  <xsl:variable name="state" select="p:consume(16, $input, $state)"/> <!-- '+' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(19, $input, $state)"/> <!-- '-' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-MultiplicativeExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-AdditiveExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production AdditiveExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AdditiveExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 16                                         (: '+' :)
                      and $state[$p:l1] != 19">                                     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 16">                                <!-- '+' -->
                  <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/> <!-- '+' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(19, $input, $state)"/> <!-- '-' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-MultiplicativeExpr($input, $state)
            "/>
            <xsl:sequence select="p:try-AdditiveExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse AdditiveExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AdditiveExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-MultiplicativeExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-AdditiveExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AdditiveExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing AdditiveExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AdditiveExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-MultiplicativeExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-AdditiveExpr-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ComparisonExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ComparisonExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-AdditiveExpr($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13                                           (: ')' :)
                    and $state[$p:l1] != 18                                           (: ',' :)
                    and $state[$p:l1] != 32                                           (: ']' :)
                    and $state[$p:l1] != 35                                           (: 'and' :)
                    and $state[$p:l1] != 71">                                       <!-- 'or' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-GeneralComp($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-AdditiveExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ComparisonExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ComparisonExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ComparisonExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-AdditiveExpr($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13                                           (: ')' :)
                    and $state[$p:l1] != 18                                           (: ',' :)
                    and $state[$p:l1] != 32                                           (: ']' :)
                    and $state[$p:l1] != 35                                           (: 'and' :)
                    and $state[$p:l1] != 71">                                       <!-- 'or' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-GeneralComp($input, $state)
          "/>
          <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-AdditiveExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production AndExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AndExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- 'and' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(35, $input, $state)"/>     <!-- 'and' -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-ComparisonExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-AndExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production AndExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AndExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- 'and' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/>    <!-- 'and' -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-ComparisonExpr($input, $state)
            "/>
            <xsl:sequence select="p:try-AndExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse AndExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-AndExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ComparisonExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-AndExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'AndExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing AndExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-AndExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-ComparisonExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-AndExpr-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production OrExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-OrExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 71">                                     <!-- 'or' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(71, $input, $state)"/>     <!-- 'or' -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-AndExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-OrExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production OrExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-OrExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 71">                                     <!-- 'or' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(71, $input, $state)"/>    <!-- 'or' -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-AndExpr($input, $state)
            "/>
            <xsl:sequence select="p:try-OrExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse OrExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-OrExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-AndExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-OrExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'OrExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing OrExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-OrExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-AndExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-OrExpr-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ExprSingle.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ExprSingle" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-OrExpr($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ExprSingle', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ExprSingle.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ExprSingle" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-OrExpr($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse Expr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Expr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ExprSingle($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Expr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing Expr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-Expr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-ExprSingle($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ParenthesizedExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ParenthesizedExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' | '.' |
                                                                                         '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Expr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ParenthesizedExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ParenthesizedExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ParenthesizedExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' | '.' |
                                                                                         '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 13">                                       <!-- ')' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-Expr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse NumericLiteral.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-NumericLiteral" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- IntegerLiteral -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- IntegerLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- DecimalLiteral -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- DecimalLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- DoubleLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'NumericLiteral', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing NumericLiteral.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-NumericLiteral" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- IntegerLiteral -->
          <xsl:variable name="state" select="p:consumeT(3, $input, $state)"/>       <!-- IntegerLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- DecimalLiteral -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- DecimalLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/>       <!-- DoubleLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse Literal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-Literal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- StringLiteral -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- StringLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-NumericLiteral($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'Literal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing Literal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-Literal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- StringLiteral -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- StringLiteral -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-NumericLiteral($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse PrimaryExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-PrimaryExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3                                             (: IntegerLiteral :)
                     or $state[$p:l1] = 4                                             (: DecimalLiteral :)
                     or $state[$p:l1] = 5                                             (: DoubleLiteral :)
                     or $state[$p:l1] = 6">                                         <!-- StringLiteral -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-Literal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ParenthesizedExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-ContextItemExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-FunctionCall($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'PrimaryExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing PrimaryExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-PrimaryExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3                                             (: IntegerLiteral :)
                     or $state[$p:l1] = 4                                             (: DecimalLiteral :)
                     or $state[$p:l1] = 5                                             (: DoubleLiteral :)
                     or $state[$p:l1] = 6">                                         <!-- StringLiteral -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-Literal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- '(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ParenthesizedExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-ContextItemExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-FunctionCall($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse FilterExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-FilterExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-PrimaryExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-PredicateList($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'FilterExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing FilterExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-FilterExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-PrimaryExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>         <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-PredicateList($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse ValueExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-ValueExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- '(' -->
          <xsl:variable name="state" select="p:lookahead2W(23, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' | '.' |
                                                                                         '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 1548">                               <!-- '(' '(' -->
                <xsl:variable name="state" select="p:lookahead3W(23, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' |
                                                                                             '.' | '/' | '//' | '@' | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                             'element' | 'following' | 'following-sibling' | 'mod' |
                                                                                             'namespace' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                             'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 1676">                               <!-- '(' ')' -->
                <xsl:variable name="state" select="p:lookahead3W(17, $input, $state)"/> <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                             '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                             'mod' | 'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 2700">                               <!-- '(' '/' -->
                <xsl:variable name="state" select="p:lookahead3W(24, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '!=' | '(' | ')' | '*' |
                                                                                             '+' | '-' | '.' | '<' | '<=' | '=' | '>' | '>=' | '@' | 'and' |
                                                                                             'attribute' | 'child' | 'descendant' | 'descendant-or-self' |
                                                                                             'div' | 'document-node' | 'element' | 'following' |
                                                                                             'following-sibling' | 'mod' | 'namespace' | 'node' | 'or' |
                                                                                             'processing-instruction' | 'self' | 'text' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 2828">                               <!-- '(' '//' -->
                <xsl:variable name="state" select="p:lookahead3W(21, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '.' | '@' | 'and' |
                                                                                             'attribute' | 'child' | 'descendant' | 'descendant-or-self' |
                                                                                             'div' | 'document-node' | 'element' | 'following' |
                                                                                             'following-sibling' | 'mod' | 'namespace' | 'node' | 'or' |
                                                                                             'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 3852">                               <!-- '(' '@' -->
                <xsl:variable name="state" select="p:lookahead3W(11, $input, $state)"/> <!-- Wildcard | QName^Token | S^WhiteSpace | 'and' | 'attribute' |
                                                                                             'child' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                             'document-node' | 'element' | 'mod' | 'node' | 'or' |
                                                                                             'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 5772">                               <!-- '(' 'document-node' -->
                <xsl:variable name="state" select="p:lookahead3W(1, $input, $state)"/> <!-- S^WhiteSpace | '(' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (2060,                                  (: '(' '+' :)
                                               2444)">                              <!-- '(' '-' -->
                <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' |
                                                                                             '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                             'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                             'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                             'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (6668,                                  (: '(' 'following' :)
                                               6796,                                  (: '(' 'following-sibling' :)
                                               8588)">                              <!-- '(' 'namespace' -->
                <xsl:variable name="state" select="p:lookahead3W(3, $input, $state)"/> <!-- S^WhiteSpace | '::' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (4748,                                  (: '(' 'attribute' :)
                                               5132,                                  (: '(' 'child' :)
                                               5388,                                  (: '(' 'descendant' :)
                                               5516,                                  (: '(' 'descendant-or-self' :)
                                               10252)">                             <!-- '(' 'self' -->
                <xsl:variable name="state" select="p:lookahead3W(16, $input, $state)"/> <!-- S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | '-' | '/' | '//' |
                                                                                             '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | 'and' | 'div' |
                                                                                             'mod' | 'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (396,                                   (: '(' IntegerLiteral :)
                                               524,                                   (: '(' DecimalLiteral :)
                                               652,                                   (: '(' DoubleLiteral :)
                                               780,                                   (: '(' StringLiteral :)
                                               908,                                   (: '(' Wildcard :)
                                               2572)">                              <!-- '(' '.' -->
                <xsl:variable name="state" select="p:lookahead3W(14, $input, $state)"/> <!-- S^WhiteSpace | '!=' | ')' | '*' | '+' | '-' | '/' | '//' | '<' |
                                                                                             '<=' | '=' | '>' | '>=' | '[' | 'and' | 'div' | 'mod' | 'or' |
                                                                                             '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1164,                                  (: '(' QName^Token :)
                                               4492,                                  (: '(' 'and' :)
                                               5644,                                  (: '(' 'div' :)
                                               5900,                                  (: '(' 'element' :)
                                               8460,                                  (: '(' 'mod' :)
                                               8844,                                  (: '(' 'node' :)
                                               9100,                                  (: '(' 'or' :)
                                               9612,                                  (: '(' 'processing-instruction' :)
                                               10508)">                             <!-- '(' 'text' -->
                <xsl:variable name="state" select="p:lookahead3W(15, $input, $state)"/> <!-- S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | '-' | '/' | '//' |
                                                                                             '<' | '<=' | '=' | '>' | '>=' | '[' | 'and' | 'div' | 'mod' |
                                                                                             'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (40,                                          (: 'child' :)
                                         42,                                          (: 'descendant' :)
                                         43,                                          (: 'descendant-or-self' :)
                                         80)">                                      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' |
                                                                                         'div' | 'mod' | 'or' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (1576,                                  (: 'child' '(' :)
                                               1578,                                  (: 'descendant' '(' :)
                                               1579,                                  (: 'descendant-or-self' '(' :)
                                               1616)">                              <!-- 'self' '(' -->
                <xsl:variable name="state" select="p:lookahead3W(23, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' |
                                                                                             '.' | '/' | '//' | '@' | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                             'element' | 'following' | 'following-sibling' | 'mod' |
                                                                                             'namespace' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                             'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (3,                                           (: IntegerLiteral :)
                                         4,                                           (: DecimalLiteral :)
                                         5,                                           (: DoubleLiteral :)
                                         6,                                           (: StringLiteral :)
                                         20)">                                      <!-- '.' -->
          <xsl:variable name="state" select="p:lookahead2W(17, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (259,                                   (: IntegerLiteral EOF :)
                                               260,                                   (: DecimalLiteral EOF :)
                                               261,                                   (: DoubleLiteral EOF :)
                                               262,                                   (: StringLiteral EOF :)
                                               276)">                               <!-- '.' EOF -->
                <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- END -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1667,                                  (: IntegerLiteral ')' :)
                                               4099,                                  (: IntegerLiteral ']' :)
                                               1668,                                  (: DecimalLiteral ')' :)
                                               4100,                                  (: DecimalLiteral ']' :)
                                               1669,                                  (: DoubleLiteral ')' :)
                                               4101,                                  (: DoubleLiteral ']' :)
                                               1670,                                  (: StringLiteral ')' :)
                                               4102,                                  (: StringLiteral ']' :)
                                               1684,                                  (: '.' ')' :)
                                               4116)">                              <!-- '.' ']' -->
                <xsl:variable name="state" select="p:lookahead3W(17, $input, $state)"/> <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                             '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                             'mod' | 'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1411,                                  (: IntegerLiteral '!=' :)
                                               1795,                                  (: IntegerLiteral '*' :)
                                               2051,                                  (: IntegerLiteral '+' :)
                                               2307,                                  (: IntegerLiteral ',' :)
                                               2435,                                  (: IntegerLiteral '-' :)
                                               3075,                                  (: IntegerLiteral '&lt;' :)
                                               3203,                                  (: IntegerLiteral '&lt;=' :)
                                               3331,                                  (: IntegerLiteral '=' :)
                                               3459,                                  (: IntegerLiteral '>' :)
                                               3587,                                  (: IntegerLiteral '>=' :)
                                               3971,                                  (: IntegerLiteral '[' :)
                                               4483,                                  (: IntegerLiteral 'and' :)
                                               5635,                                  (: IntegerLiteral 'div' :)
                                               8451,                                  (: IntegerLiteral 'mod' :)
                                               9091,                                  (: IntegerLiteral 'or' :)
                                               11267,                                 (: IntegerLiteral '|' :)
                                               1412,                                  (: DecimalLiteral '!=' :)
                                               1796,                                  (: DecimalLiteral '*' :)
                                               2052,                                  (: DecimalLiteral '+' :)
                                               2308,                                  (: DecimalLiteral ',' :)
                                               2436,                                  (: DecimalLiteral '-' :)
                                               3076,                                  (: DecimalLiteral '&lt;' :)
                                               3204,                                  (: DecimalLiteral '&lt;=' :)
                                               3332,                                  (: DecimalLiteral '=' :)
                                               3460,                                  (: DecimalLiteral '>' :)
                                               3588,                                  (: DecimalLiteral '>=' :)
                                               3972,                                  (: DecimalLiteral '[' :)
                                               4484,                                  (: DecimalLiteral 'and' :)
                                               5636,                                  (: DecimalLiteral 'div' :)
                                               8452,                                  (: DecimalLiteral 'mod' :)
                                               9092,                                  (: DecimalLiteral 'or' :)
                                               11268,                                 (: DecimalLiteral '|' :)
                                               1413,                                  (: DoubleLiteral '!=' :)
                                               1797,                                  (: DoubleLiteral '*' :)
                                               2053,                                  (: DoubleLiteral '+' :)
                                               2309,                                  (: DoubleLiteral ',' :)
                                               2437,                                  (: DoubleLiteral '-' :)
                                               3077,                                  (: DoubleLiteral '&lt;' :)
                                               3205,                                  (: DoubleLiteral '&lt;=' :)
                                               3333,                                  (: DoubleLiteral '=' :)
                                               3461,                                  (: DoubleLiteral '>' :)
                                               3589,                                  (: DoubleLiteral '>=' :)
                                               3973,                                  (: DoubleLiteral '[' :)
                                               4485,                                  (: DoubleLiteral 'and' :)
                                               5637,                                  (: DoubleLiteral 'div' :)
                                               8453,                                  (: DoubleLiteral 'mod' :)
                                               9093,                                  (: DoubleLiteral 'or' :)
                                               11269,                                 (: DoubleLiteral '|' :)
                                               1414,                                  (: StringLiteral '!=' :)
                                               1798,                                  (: StringLiteral '*' :)
                                               2054,                                  (: StringLiteral '+' :)
                                               2310,                                  (: StringLiteral ',' :)
                                               2438,                                  (: StringLiteral '-' :)
                                               3078,                                  (: StringLiteral '&lt;' :)
                                               3206,                                  (: StringLiteral '&lt;=' :)
                                               3334,                                  (: StringLiteral '=' :)
                                               3462,                                  (: StringLiteral '>' :)
                                               3590,                                  (: StringLiteral '>=' :)
                                               3974,                                  (: StringLiteral '[' :)
                                               4486,                                  (: StringLiteral 'and' :)
                                               5638,                                  (: StringLiteral 'div' :)
                                               8454,                                  (: StringLiteral 'mod' :)
                                               9094,                                  (: StringLiteral 'or' :)
                                               11270,                                 (: StringLiteral '|' :)
                                               1428,                                  (: '.' '!=' :)
                                               1812,                                  (: '.' '*' :)
                                               2068,                                  (: '.' '+' :)
                                               2324,                                  (: '.' ',' :)
                                               2452,                                  (: '.' '-' :)
                                               3092,                                  (: '.' '&lt;' :)
                                               3220,                                  (: '.' '&lt;=' :)
                                               3348,                                  (: '.' '=' :)
                                               3476,                                  (: '.' '>' :)
                                               3604,                                  (: '.' '>=' :)
                                               3988,                                  (: '.' '[' :)
                                               4500,                                  (: '.' 'and' :)
                                               5652,                                  (: '.' 'div' :)
                                               8468,                                  (: '.' 'mod' :)
                                               9108,                                  (: '.' 'or' :)
                                               11284)">                             <!-- '.' '|' -->
                <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' |
                                                                                             '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                             'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                             'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                             'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (9,                                           (: QName^Token :)
                                         35,                                          (: 'and' :)
                                         44,                                          (: 'div' :)
                                         66,                                          (: 'mod' :)
                                         71)">                                      <!-- 'or' -->
          <xsl:variable name="state" select="p:lookahead2W(18, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                         'mod' | 'or' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (1545,                                  (: QName^Token '(' :)
                                               1571,                                  (: 'and' '(' :)
                                               1580,                                  (: 'div' '(' :)
                                               1602,                                  (: 'mod' '(' :)
                                               1607)">                              <!-- 'or' '(' -->
                <xsl:variable name="state" select="p:lookahead3W(23, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' |
                                                                                             '.' | '/' | '//' | '@' | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                             'element' | 'following' | 'following-sibling' | 'mod' |
                                                                                             'namespace' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                             'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 7                                            (: Wildcard :)
                    and $state[$p:lk] != 21                                           (: '/' :)
                    and $state[$p:lk] != 22                                           (: '//' :)
                    and $state[$p:lk] != 30                                           (: '@' :)
                    and $state[$p:lk] != 37                                           (: 'attribute' :)
                    and $state[$p:lk] != 45                                           (: 'document-node' :)
                    and $state[$p:lk] != 46                                           (: 'element' :)
                    and $state[$p:lk] != 52                                           (: 'following' :)
                    and $state[$p:lk] != 53                                           (: 'following-sibling' :)
                    and $state[$p:lk] != 67                                           (: 'namespace' :)
                    and $state[$p:lk] != 69                                           (: 'node' :)
                    and $state[$p:lk] != 75                                           (: 'processing-instruction' :)
                    and $state[$p:lk] != 82                                           (: 'text' :)
                    and $state[$p:lk] != 265                                          (: QName^Token EOF :)
                    and $state[$p:lk] != 291                                          (: 'and' EOF :)
                    and $state[$p:lk] != 296                                          (: 'child' EOF :)
                    and $state[$p:lk] != 298                                          (: 'descendant' EOF :)
                    and $state[$p:lk] != 299                                          (: 'descendant-or-self' EOF :)
                    and $state[$p:lk] != 300                                          (: 'div' EOF :)
                    and $state[$p:lk] != 322                                          (: 'mod' EOF :)
                    and $state[$p:lk] != 327                                          (: 'or' EOF :)
                    and $state[$p:lk] != 336                                          (: 'self' EOF :)
                    and $state[$p:lk] != 1417                                         (: QName^Token '!=' :)
                    and $state[$p:lk] != 1443                                         (: 'and' '!=' :)
                    and $state[$p:lk] != 1448                                         (: 'child' '!=' :)
                    and $state[$p:lk] != 1450                                         (: 'descendant' '!=' :)
                    and $state[$p:lk] != 1451                                         (: 'descendant-or-self' '!=' :)
                    and $state[$p:lk] != 1452                                         (: 'div' '!=' :)
                    and $state[$p:lk] != 1474                                         (: 'mod' '!=' :)
                    and $state[$p:lk] != 1479                                         (: 'or' '!=' :)
                    and $state[$p:lk] != 1488                                         (: 'self' '!=' :)
                    and $state[$p:lk] != 1673                                         (: QName^Token ')' :)
                    and $state[$p:lk] != 1699                                         (: 'and' ')' :)
                    and $state[$p:lk] != 1704                                         (: 'child' ')' :)
                    and $state[$p:lk] != 1706                                         (: 'descendant' ')' :)
                    and $state[$p:lk] != 1707                                         (: 'descendant-or-self' ')' :)
                    and $state[$p:lk] != 1708                                         (: 'div' ')' :)
                    and $state[$p:lk] != 1730                                         (: 'mod' ')' :)
                    and $state[$p:lk] != 1735                                         (: 'or' ')' :)
                    and $state[$p:lk] != 1744                                         (: 'self' ')' :)
                    and $state[$p:lk] != 1801                                         (: QName^Token '*' :)
                    and $state[$p:lk] != 1827                                         (: 'and' '*' :)
                    and $state[$p:lk] != 1832                                         (: 'child' '*' :)
                    and $state[$p:lk] != 1834                                         (: 'descendant' '*' :)
                    and $state[$p:lk] != 1835                                         (: 'descendant-or-self' '*' :)
                    and $state[$p:lk] != 1836                                         (: 'div' '*' :)
                    and $state[$p:lk] != 1858                                         (: 'mod' '*' :)
                    and $state[$p:lk] != 1863                                         (: 'or' '*' :)
                    and $state[$p:lk] != 1872                                         (: 'self' '*' :)
                    and $state[$p:lk] != 2057                                         (: QName^Token '+' :)
                    and $state[$p:lk] != 2083                                         (: 'and' '+' :)
                    and $state[$p:lk] != 2088                                         (: 'child' '+' :)
                    and $state[$p:lk] != 2090                                         (: 'descendant' '+' :)
                    and $state[$p:lk] != 2091                                         (: 'descendant-or-self' '+' :)
                    and $state[$p:lk] != 2092                                         (: 'div' '+' :)
                    and $state[$p:lk] != 2114                                         (: 'mod' '+' :)
                    and $state[$p:lk] != 2119                                         (: 'or' '+' :)
                    and $state[$p:lk] != 2128                                         (: 'self' '+' :)
                    and $state[$p:lk] != 2313                                         (: QName^Token ',' :)
                    and $state[$p:lk] != 2339                                         (: 'and' ',' :)
                    and $state[$p:lk] != 2344                                         (: 'child' ',' :)
                    and $state[$p:lk] != 2346                                         (: 'descendant' ',' :)
                    and $state[$p:lk] != 2347                                         (: 'descendant-or-self' ',' :)
                    and $state[$p:lk] != 2348                                         (: 'div' ',' :)
                    and $state[$p:lk] != 2370                                         (: 'mod' ',' :)
                    and $state[$p:lk] != 2375                                         (: 'or' ',' :)
                    and $state[$p:lk] != 2384                                         (: 'self' ',' :)
                    and $state[$p:lk] != 2441                                         (: QName^Token '-' :)
                    and $state[$p:lk] != 2467                                         (: 'and' '-' :)
                    and $state[$p:lk] != 2472                                         (: 'child' '-' :)
                    and $state[$p:lk] != 2474                                         (: 'descendant' '-' :)
                    and $state[$p:lk] != 2475                                         (: 'descendant-or-self' '-' :)
                    and $state[$p:lk] != 2476                                         (: 'div' '-' :)
                    and $state[$p:lk] != 2498                                         (: 'mod' '-' :)
                    and $state[$p:lk] != 2503                                         (: 'or' '-' :)
                    and $state[$p:lk] != 2512                                         (: 'self' '-' :)
                    and $state[$p:lk] != 2691                                         (: IntegerLiteral '/' :)
                    and $state[$p:lk] != 2692                                         (: DecimalLiteral '/' :)
                    and $state[$p:lk] != 2693                                         (: DoubleLiteral '/' :)
                    and $state[$p:lk] != 2694                                         (: StringLiteral '/' :)
                    and $state[$p:lk] != 2697                                         (: QName^Token '/' :)
                    and $state[$p:lk] != 2708                                         (: '.' '/' :)
                    and $state[$p:lk] != 2723                                         (: 'and' '/' :)
                    and $state[$p:lk] != 2728                                         (: 'child' '/' :)
                    and $state[$p:lk] != 2730                                         (: 'descendant' '/' :)
                    and $state[$p:lk] != 2731                                         (: 'descendant-or-self' '/' :)
                    and $state[$p:lk] != 2732                                         (: 'div' '/' :)
                    and $state[$p:lk] != 2754                                         (: 'mod' '/' :)
                    and $state[$p:lk] != 2759                                         (: 'or' '/' :)
                    and $state[$p:lk] != 2768                                         (: 'self' '/' :)
                    and $state[$p:lk] != 2819                                         (: IntegerLiteral '//' :)
                    and $state[$p:lk] != 2820                                         (: DecimalLiteral '//' :)
                    and $state[$p:lk] != 2821                                         (: DoubleLiteral '//' :)
                    and $state[$p:lk] != 2822                                         (: StringLiteral '//' :)
                    and $state[$p:lk] != 2825                                         (: QName^Token '//' :)
                    and $state[$p:lk] != 2836                                         (: '.' '//' :)
                    and $state[$p:lk] != 2851                                         (: 'and' '//' :)
                    and $state[$p:lk] != 2856                                         (: 'child' '//' :)
                    and $state[$p:lk] != 2858                                         (: 'descendant' '//' :)
                    and $state[$p:lk] != 2859                                         (: 'descendant-or-self' '//' :)
                    and $state[$p:lk] != 2860                                         (: 'div' '//' :)
                    and $state[$p:lk] != 2882                                         (: 'mod' '//' :)
                    and $state[$p:lk] != 2887                                         (: 'or' '//' :)
                    and $state[$p:lk] != 2896                                         (: 'self' '//' :)
                    and $state[$p:lk] != 2984                                         (: 'child' '::' :)
                    and $state[$p:lk] != 2986                                         (: 'descendant' '::' :)
                    and $state[$p:lk] != 2987                                         (: 'descendant-or-self' '::' :)
                    and $state[$p:lk] != 3024                                         (: 'self' '::' :)
                    and $state[$p:lk] != 3081                                         (: QName^Token '&lt;' :)
                    and $state[$p:lk] != 3107                                         (: 'and' '&lt;' :)
                    and $state[$p:lk] != 3112                                         (: 'child' '&lt;' :)
                    and $state[$p:lk] != 3114                                         (: 'descendant' '&lt;' :)
                    and $state[$p:lk] != 3115                                         (: 'descendant-or-self' '&lt;' :)
                    and $state[$p:lk] != 3116                                         (: 'div' '&lt;' :)
                    and $state[$p:lk] != 3138                                         (: 'mod' '&lt;' :)
                    and $state[$p:lk] != 3143                                         (: 'or' '&lt;' :)
                    and $state[$p:lk] != 3152                                         (: 'self' '&lt;' :)
                    and $state[$p:lk] != 3209                                         (: QName^Token '&lt;=' :)
                    and $state[$p:lk] != 3235                                         (: 'and' '&lt;=' :)
                    and $state[$p:lk] != 3240                                         (: 'child' '&lt;=' :)
                    and $state[$p:lk] != 3242                                         (: 'descendant' '&lt;=' :)
                    and $state[$p:lk] != 3243                                         (: 'descendant-or-self' '&lt;=' :)
                    and $state[$p:lk] != 3244                                         (: 'div' '&lt;=' :)
                    and $state[$p:lk] != 3266                                         (: 'mod' '&lt;=' :)
                    and $state[$p:lk] != 3271                                         (: 'or' '&lt;=' :)
                    and $state[$p:lk] != 3280                                         (: 'self' '&lt;=' :)
                    and $state[$p:lk] != 3337                                         (: QName^Token '=' :)
                    and $state[$p:lk] != 3363                                         (: 'and' '=' :)
                    and $state[$p:lk] != 3368                                         (: 'child' '=' :)
                    and $state[$p:lk] != 3370                                         (: 'descendant' '=' :)
                    and $state[$p:lk] != 3371                                         (: 'descendant-or-self' '=' :)
                    and $state[$p:lk] != 3372                                         (: 'div' '=' :)
                    and $state[$p:lk] != 3394                                         (: 'mod' '=' :)
                    and $state[$p:lk] != 3399                                         (: 'or' '=' :)
                    and $state[$p:lk] != 3408                                         (: 'self' '=' :)
                    and $state[$p:lk] != 3465                                         (: QName^Token '>' :)
                    and $state[$p:lk] != 3491                                         (: 'and' '>' :)
                    and $state[$p:lk] != 3496                                         (: 'child' '>' :)
                    and $state[$p:lk] != 3498                                         (: 'descendant' '>' :)
                    and $state[$p:lk] != 3499                                         (: 'descendant-or-self' '>' :)
                    and $state[$p:lk] != 3500                                         (: 'div' '>' :)
                    and $state[$p:lk] != 3522                                         (: 'mod' '>' :)
                    and $state[$p:lk] != 3527                                         (: 'or' '>' :)
                    and $state[$p:lk] != 3536                                         (: 'self' '>' :)
                    and $state[$p:lk] != 3593                                         (: QName^Token '>=' :)
                    and $state[$p:lk] != 3619                                         (: 'and' '>=' :)
                    and $state[$p:lk] != 3624                                         (: 'child' '>=' :)
                    and $state[$p:lk] != 3626                                         (: 'descendant' '>=' :)
                    and $state[$p:lk] != 3627                                         (: 'descendant-or-self' '>=' :)
                    and $state[$p:lk] != 3628                                         (: 'div' '>=' :)
                    and $state[$p:lk] != 3650                                         (: 'mod' '>=' :)
                    and $state[$p:lk] != 3655                                         (: 'or' '>=' :)
                    and $state[$p:lk] != 3664                                         (: 'self' '>=' :)
                    and $state[$p:lk] != 3977                                         (: QName^Token '[' :)
                    and $state[$p:lk] != 4003                                         (: 'and' '[' :)
                    and $state[$p:lk] != 4008                                         (: 'child' '[' :)
                    and $state[$p:lk] != 4010                                         (: 'descendant' '[' :)
                    and $state[$p:lk] != 4011                                         (: 'descendant-or-self' '[' :)
                    and $state[$p:lk] != 4012                                         (: 'div' '[' :)
                    and $state[$p:lk] != 4034                                         (: 'mod' '[' :)
                    and $state[$p:lk] != 4039                                         (: 'or' '[' :)
                    and $state[$p:lk] != 4048                                         (: 'self' '[' :)
                    and $state[$p:lk] != 4105                                         (: QName^Token ']' :)
                    and $state[$p:lk] != 4131                                         (: 'and' ']' :)
                    and $state[$p:lk] != 4136                                         (: 'child' ']' :)
                    and $state[$p:lk] != 4138                                         (: 'descendant' ']' :)
                    and $state[$p:lk] != 4139                                         (: 'descendant-or-self' ']' :)
                    and $state[$p:lk] != 4140                                         (: 'div' ']' :)
                    and $state[$p:lk] != 4162                                         (: 'mod' ']' :)
                    and $state[$p:lk] != 4167                                         (: 'or' ']' :)
                    and $state[$p:lk] != 4176                                         (: 'self' ']' :)
                    and $state[$p:lk] != 4489                                         (: QName^Token 'and' :)
                    and $state[$p:lk] != 4515                                         (: 'and' 'and' :)
                    and $state[$p:lk] != 4520                                         (: 'child' 'and' :)
                    and $state[$p:lk] != 4522                                         (: 'descendant' 'and' :)
                    and $state[$p:lk] != 4523                                         (: 'descendant-or-self' 'and' :)
                    and $state[$p:lk] != 4524                                         (: 'div' 'and' :)
                    and $state[$p:lk] != 4546                                         (: 'mod' 'and' :)
                    and $state[$p:lk] != 4551                                         (: 'or' 'and' :)
                    and $state[$p:lk] != 4560                                         (: 'self' 'and' :)
                    and $state[$p:lk] != 5641                                         (: QName^Token 'div' :)
                    and $state[$p:lk] != 5667                                         (: 'and' 'div' :)
                    and $state[$p:lk] != 5672                                         (: 'child' 'div' :)
                    and $state[$p:lk] != 5674                                         (: 'descendant' 'div' :)
                    and $state[$p:lk] != 5675                                         (: 'descendant-or-self' 'div' :)
                    and $state[$p:lk] != 5676                                         (: 'div' 'div' :)
                    and $state[$p:lk] != 5698                                         (: 'mod' 'div' :)
                    and $state[$p:lk] != 5703                                         (: 'or' 'div' :)
                    and $state[$p:lk] != 5712                                         (: 'self' 'div' :)
                    and $state[$p:lk] != 8457                                         (: QName^Token 'mod' :)
                    and $state[$p:lk] != 8483                                         (: 'and' 'mod' :)
                    and $state[$p:lk] != 8488                                         (: 'child' 'mod' :)
                    and $state[$p:lk] != 8490                                         (: 'descendant' 'mod' :)
                    and $state[$p:lk] != 8491                                         (: 'descendant-or-self' 'mod' :)
                    and $state[$p:lk] != 8492                                         (: 'div' 'mod' :)
                    and $state[$p:lk] != 8514                                         (: 'mod' 'mod' :)
                    and $state[$p:lk] != 8519                                         (: 'or' 'mod' :)
                    and $state[$p:lk] != 8528                                         (: 'self' 'mod' :)
                    and $state[$p:lk] != 9097                                         (: QName^Token 'or' :)
                    and $state[$p:lk] != 9123                                         (: 'and' 'or' :)
                    and $state[$p:lk] != 9128                                         (: 'child' 'or' :)
                    and $state[$p:lk] != 9130                                         (: 'descendant' 'or' :)
                    and $state[$p:lk] != 9131                                         (: 'descendant-or-self' 'or' :)
                    and $state[$p:lk] != 9132                                         (: 'div' 'or' :)
                    and $state[$p:lk] != 9154                                         (: 'mod' 'or' :)
                    and $state[$p:lk] != 9159                                         (: 'or' 'or' :)
                    and $state[$p:lk] != 9168                                         (: 'self' 'or' :)
                    and $state[$p:lk] != 11273                                        (: QName^Token '|' :)
                    and $state[$p:lk] != 11299                                        (: 'and' '|' :)
                    and $state[$p:lk] != 11304                                        (: 'child' '|' :)
                    and $state[$p:lk] != 11306                                        (: 'descendant' '|' :)
                    and $state[$p:lk] != 11307                                        (: 'descendant-or-self' '|' :)
                    and $state[$p:lk] != 11308                                        (: 'div' '|' :)
                    and $state[$p:lk] != 11330                                        (: 'mod' '|' :)
                    and $state[$p:lk] != 11335                                        (: 'or' '|' :)
                    and $state[$p:lk] != 11344                                        (: 'self' '|' :)
                    and $state[$p:lk] != 345740                                       (: '(' ')' '/' :)
                    and $state[$p:lk] != 362124">                                   <!-- '(' ')' '//' -->
          <xsl:variable name="state" select="p:memoized($state, 0)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-FilterExpr($input, $state)
              "/>
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1">
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-FilterExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-PathExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'ValueExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing ValueExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-ValueExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- '(' -->
          <xsl:variable name="state" select="p:lookahead2W(23, $input, $state)"/>   <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' | '.' |
                                                                                         '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] eq 1548">                               <!-- '(' '(' -->
                <xsl:variable name="state" select="p:lookahead3W(23, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' |
                                                                                             '.' | '/' | '//' | '@' | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                             'element' | 'following' | 'following-sibling' | 'mod' |
                                                                                             'namespace' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                             'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 1676">                               <!-- '(' ')' -->
                <xsl:variable name="state" select="p:lookahead3W(17, $input, $state)"/> <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                             '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                             'mod' | 'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 2700">                               <!-- '(' '/' -->
                <xsl:variable name="state" select="p:lookahead3W(24, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '!=' | '(' | ')' | '*' |
                                                                                             '+' | '-' | '.' | '<' | '<=' | '=' | '>' | '>=' | '@' | 'and' |
                                                                                             'attribute' | 'child' | 'descendant' | 'descendant-or-self' |
                                                                                             'div' | 'document-node' | 'element' | 'following' |
                                                                                             'following-sibling' | 'mod' | 'namespace' | 'node' | 'or' |
                                                                                             'processing-instruction' | 'self' | 'text' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 2828">                               <!-- '(' '//' -->
                <xsl:variable name="state" select="p:lookahead3W(21, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '.' | '@' | 'and' |
                                                                                             'attribute' | 'child' | 'descendant' | 'descendant-or-self' |
                                                                                             'div' | 'document-node' | 'element' | 'following' |
                                                                                             'following-sibling' | 'mod' | 'namespace' | 'node' | 'or' |
                                                                                             'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 3852">                               <!-- '(' '@' -->
                <xsl:variable name="state" select="p:lookahead3W(11, $input, $state)"/> <!-- Wildcard | QName^Token | S^WhiteSpace | 'and' | 'attribute' |
                                                                                             'child' | 'descendant' | 'descendant-or-self' | 'div' |
                                                                                             'document-node' | 'element' | 'mod' | 'node' | 'or' |
                                                                                             'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] eq 5772">                               <!-- '(' 'document-node' -->
                <xsl:variable name="state" select="p:lookahead3W(1, $input, $state)"/> <!-- S^WhiteSpace | '(' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (2060,                                  (: '(' '+' :)
                                               2444)">                              <!-- '(' '-' -->
                <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' |
                                                                                             '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                             'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                             'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                             'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (6668,                                  (: '(' 'following' :)
                                               6796,                                  (: '(' 'following-sibling' :)
                                               8588)">                              <!-- '(' 'namespace' -->
                <xsl:variable name="state" select="p:lookahead3W(3, $input, $state)"/> <!-- S^WhiteSpace | '::' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (4748,                                  (: '(' 'attribute' :)
                                               5132,                                  (: '(' 'child' :)
                                               5388,                                  (: '(' 'descendant' :)
                                               5516,                                  (: '(' 'descendant-or-self' :)
                                               10252)">                             <!-- '(' 'self' -->
                <xsl:variable name="state" select="p:lookahead3W(16, $input, $state)"/> <!-- S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | '-' | '/' | '//' |
                                                                                             '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | 'and' | 'div' |
                                                                                             'mod' | 'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (396,                                   (: '(' IntegerLiteral :)
                                               524,                                   (: '(' DecimalLiteral :)
                                               652,                                   (: '(' DoubleLiteral :)
                                               780,                                   (: '(' StringLiteral :)
                                               908,                                   (: '(' Wildcard :)
                                               2572)">                              <!-- '(' '.' -->
                <xsl:variable name="state" select="p:lookahead3W(14, $input, $state)"/> <!-- S^WhiteSpace | '!=' | ')' | '*' | '+' | '-' | '/' | '//' | '<' |
                                                                                             '<=' | '=' | '>' | '>=' | '[' | 'and' | 'div' | 'mod' | 'or' |
                                                                                             '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1164,                                  (: '(' QName^Token :)
                                               4492,                                  (: '(' 'and' :)
                                               5644,                                  (: '(' 'div' :)
                                               5900,                                  (: '(' 'element' :)
                                               8460,                                  (: '(' 'mod' :)
                                               8844,                                  (: '(' 'node' :)
                                               9100,                                  (: '(' 'or' :)
                                               9612,                                  (: '(' 'processing-instruction' :)
                                               10508)">                             <!-- '(' 'text' -->
                <xsl:variable name="state" select="p:lookahead3W(15, $input, $state)"/> <!-- S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | '-' | '/' | '//' |
                                                                                             '<' | '<=' | '=' | '>' | '>=' | '[' | 'and' | 'div' | 'mod' |
                                                                                             'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (40,                                          (: 'child' :)
                                         42,                                          (: 'descendant' :)
                                         43,                                          (: 'descendant-or-self' :)
                                         80)">                                      <!-- 'self' -->
          <xsl:variable name="state" select="p:lookahead2W(20, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '::' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' |
                                                                                         'div' | 'mod' | 'or' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (1576,                                  (: 'child' '(' :)
                                               1578,                                  (: 'descendant' '(' :)
                                               1579,                                  (: 'descendant-or-self' '(' :)
                                               1616)">                              <!-- 'self' '(' -->
                <xsl:variable name="state" select="p:lookahead3W(23, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' |
                                                                                             '.' | '/' | '//' | '@' | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                             'element' | 'following' | 'following-sibling' | 'mod' |
                                                                                             'namespace' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                             'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (3,                                           (: IntegerLiteral :)
                                         4,                                           (: DecimalLiteral :)
                                         5,                                           (: DoubleLiteral :)
                                         6,                                           (: StringLiteral :)
                                         20)">                                      <!-- '.' -->
          <xsl:variable name="state" select="p:lookahead2W(17, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                                                                         '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' | 'mod' |
                                                                                         'or' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (259,                                   (: IntegerLiteral EOF :)
                                               260,                                   (: DecimalLiteral EOF :)
                                               261,                                   (: DoubleLiteral EOF :)
                                               262,                                   (: StringLiteral EOF :)
                                               276)">                               <!-- '.' EOF -->
                <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- END -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1667,                                  (: IntegerLiteral ')' :)
                                               4099,                                  (: IntegerLiteral ']' :)
                                               1668,                                  (: DecimalLiteral ')' :)
                                               4100,                                  (: DecimalLiteral ']' :)
                                               1669,                                  (: DoubleLiteral ')' :)
                                               4101,                                  (: DoubleLiteral ']' :)
                                               1670,                                  (: StringLiteral ')' :)
                                               4102,                                  (: StringLiteral ']' :)
                                               1684,                                  (: '.' ')' :)
                                               4116)">                              <!-- '.' ']' -->
                <xsl:variable name="state" select="p:lookahead3W(17, $input, $state)"/> <!-- EOF | S^WhiteSpace | '!=' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                             '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                             'mod' | 'or' | '|' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = (1411,                                  (: IntegerLiteral '!=' :)
                                               1795,                                  (: IntegerLiteral '*' :)
                                               2051,                                  (: IntegerLiteral '+' :)
                                               2307,                                  (: IntegerLiteral ',' :)
                                               2435,                                  (: IntegerLiteral '-' :)
                                               3075,                                  (: IntegerLiteral '&lt;' :)
                                               3203,                                  (: IntegerLiteral '&lt;=' :)
                                               3331,                                  (: IntegerLiteral '=' :)
                                               3459,                                  (: IntegerLiteral '>' :)
                                               3587,                                  (: IntegerLiteral '>=' :)
                                               3971,                                  (: IntegerLiteral '[' :)
                                               4483,                                  (: IntegerLiteral 'and' :)
                                               5635,                                  (: IntegerLiteral 'div' :)
                                               8451,                                  (: IntegerLiteral 'mod' :)
                                               9091,                                  (: IntegerLiteral 'or' :)
                                               11267,                                 (: IntegerLiteral '|' :)
                                               1412,                                  (: DecimalLiteral '!=' :)
                                               1796,                                  (: DecimalLiteral '*' :)
                                               2052,                                  (: DecimalLiteral '+' :)
                                               2308,                                  (: DecimalLiteral ',' :)
                                               2436,                                  (: DecimalLiteral '-' :)
                                               3076,                                  (: DecimalLiteral '&lt;' :)
                                               3204,                                  (: DecimalLiteral '&lt;=' :)
                                               3332,                                  (: DecimalLiteral '=' :)
                                               3460,                                  (: DecimalLiteral '>' :)
                                               3588,                                  (: DecimalLiteral '>=' :)
                                               3972,                                  (: DecimalLiteral '[' :)
                                               4484,                                  (: DecimalLiteral 'and' :)
                                               5636,                                  (: DecimalLiteral 'div' :)
                                               8452,                                  (: DecimalLiteral 'mod' :)
                                               9092,                                  (: DecimalLiteral 'or' :)
                                               11268,                                 (: DecimalLiteral '|' :)
                                               1413,                                  (: DoubleLiteral '!=' :)
                                               1797,                                  (: DoubleLiteral '*' :)
                                               2053,                                  (: DoubleLiteral '+' :)
                                               2309,                                  (: DoubleLiteral ',' :)
                                               2437,                                  (: DoubleLiteral '-' :)
                                               3077,                                  (: DoubleLiteral '&lt;' :)
                                               3205,                                  (: DoubleLiteral '&lt;=' :)
                                               3333,                                  (: DoubleLiteral '=' :)
                                               3461,                                  (: DoubleLiteral '>' :)
                                               3589,                                  (: DoubleLiteral '>=' :)
                                               3973,                                  (: DoubleLiteral '[' :)
                                               4485,                                  (: DoubleLiteral 'and' :)
                                               5637,                                  (: DoubleLiteral 'div' :)
                                               8453,                                  (: DoubleLiteral 'mod' :)
                                               9093,                                  (: DoubleLiteral 'or' :)
                                               11269,                                 (: DoubleLiteral '|' :)
                                               1414,                                  (: StringLiteral '!=' :)
                                               1798,                                  (: StringLiteral '*' :)
                                               2054,                                  (: StringLiteral '+' :)
                                               2310,                                  (: StringLiteral ',' :)
                                               2438,                                  (: StringLiteral '-' :)
                                               3078,                                  (: StringLiteral '&lt;' :)
                                               3206,                                  (: StringLiteral '&lt;=' :)
                                               3334,                                  (: StringLiteral '=' :)
                                               3462,                                  (: StringLiteral '>' :)
                                               3590,                                  (: StringLiteral '>=' :)
                                               3974,                                  (: StringLiteral '[' :)
                                               4486,                                  (: StringLiteral 'and' :)
                                               5638,                                  (: StringLiteral 'div' :)
                                               8454,                                  (: StringLiteral 'mod' :)
                                               9094,                                  (: StringLiteral 'or' :)
                                               11270,                                 (: StringLiteral '|' :)
                                               1428,                                  (: '.' '!=' :)
                                               1812,                                  (: '.' '*' :)
                                               2068,                                  (: '.' '+' :)
                                               2324,                                  (: '.' ',' :)
                                               2452,                                  (: '.' '-' :)
                                               3092,                                  (: '.' '&lt;' :)
                                               3220,                                  (: '.' '&lt;=' :)
                                               3348,                                  (: '.' '=' :)
                                               3476,                                  (: '.' '>' :)
                                               3604,                                  (: '.' '>=' :)
                                               3988,                                  (: '.' '[' :)
                                               4500,                                  (: '.' 'and' :)
                                               5652,                                  (: '.' 'div' :)
                                               8468,                                  (: '.' 'mod' :)
                                               9108,                                  (: '.' 'or' :)
                                               11284)">                             <!-- '.' '|' -->
                <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' |
                                                                                             '/' | '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                             'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                             'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                             'or' | 'processing-instruction' | 'self' | 'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (9,                                           (: QName^Token :)
                                         35,                                          (: 'and' :)
                                         44,                                          (: 'div' :)
                                         66,                                          (: 'mod' :)
                                         71)">                                      <!-- 'or' -->
          <xsl:variable name="state" select="p:lookahead2W(18, $input, $state)"/>   <!-- EOF | S^WhiteSpace | '!=' | '(' | ')' | '*' | '+' | ',' | '-' | '/' |
                                                                                         '//' | '<' | '<=' | '=' | '>' | '>=' | '[' | ']' | 'and' | 'div' |
                                                                                         'mod' | 'or' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (1545,                                  (: QName^Token '(' :)
                                               1571,                                  (: 'and' '(' :)
                                               1580,                                  (: 'div' '(' :)
                                               1602,                                  (: 'mod' '(' :)
                                               1607)">                              <!-- 'or' '(' -->
                <xsl:variable name="state" select="p:lookahead3W(23, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                             Wildcard | QName^Token | S^WhiteSpace | '(' | ')' | '+' | '-' |
                                                                                             '.' | '/' | '//' | '@' | 'and' | 'attribute' | 'child' |
                                                                                             'descendant' | 'descendant-or-self' | 'div' | 'document-node' |
                                                                                             'element' | 'following' | 'following-sibling' | 'mod' |
                                                                                             'namespace' | 'node' | 'or' | 'processing-instruction' | 'self' |
                                                                                             'text' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] != 7                                            (: Wildcard :)
                    and $state[$p:lk] != 21                                           (: '/' :)
                    and $state[$p:lk] != 22                                           (: '//' :)
                    and $state[$p:lk] != 30                                           (: '@' :)
                    and $state[$p:lk] != 37                                           (: 'attribute' :)
                    and $state[$p:lk] != 45                                           (: 'document-node' :)
                    and $state[$p:lk] != 46                                           (: 'element' :)
                    and $state[$p:lk] != 52                                           (: 'following' :)
                    and $state[$p:lk] != 53                                           (: 'following-sibling' :)
                    and $state[$p:lk] != 67                                           (: 'namespace' :)
                    and $state[$p:lk] != 69                                           (: 'node' :)
                    and $state[$p:lk] != 75                                           (: 'processing-instruction' :)
                    and $state[$p:lk] != 82                                           (: 'text' :)
                    and $state[$p:lk] != 265                                          (: QName^Token EOF :)
                    and $state[$p:lk] != 291                                          (: 'and' EOF :)
                    and $state[$p:lk] != 296                                          (: 'child' EOF :)
                    and $state[$p:lk] != 298                                          (: 'descendant' EOF :)
                    and $state[$p:lk] != 299                                          (: 'descendant-or-self' EOF :)
                    and $state[$p:lk] != 300                                          (: 'div' EOF :)
                    and $state[$p:lk] != 322                                          (: 'mod' EOF :)
                    and $state[$p:lk] != 327                                          (: 'or' EOF :)
                    and $state[$p:lk] != 336                                          (: 'self' EOF :)
                    and $state[$p:lk] != 1417                                         (: QName^Token '!=' :)
                    and $state[$p:lk] != 1443                                         (: 'and' '!=' :)
                    and $state[$p:lk] != 1448                                         (: 'child' '!=' :)
                    and $state[$p:lk] != 1450                                         (: 'descendant' '!=' :)
                    and $state[$p:lk] != 1451                                         (: 'descendant-or-self' '!=' :)
                    and $state[$p:lk] != 1452                                         (: 'div' '!=' :)
                    and $state[$p:lk] != 1474                                         (: 'mod' '!=' :)
                    and $state[$p:lk] != 1479                                         (: 'or' '!=' :)
                    and $state[$p:lk] != 1488                                         (: 'self' '!=' :)
                    and $state[$p:lk] != 1673                                         (: QName^Token ')' :)
                    and $state[$p:lk] != 1699                                         (: 'and' ')' :)
                    and $state[$p:lk] != 1704                                         (: 'child' ')' :)
                    and $state[$p:lk] != 1706                                         (: 'descendant' ')' :)
                    and $state[$p:lk] != 1707                                         (: 'descendant-or-self' ')' :)
                    and $state[$p:lk] != 1708                                         (: 'div' ')' :)
                    and $state[$p:lk] != 1730                                         (: 'mod' ')' :)
                    and $state[$p:lk] != 1735                                         (: 'or' ')' :)
                    and $state[$p:lk] != 1744                                         (: 'self' ')' :)
                    and $state[$p:lk] != 1801                                         (: QName^Token '*' :)
                    and $state[$p:lk] != 1827                                         (: 'and' '*' :)
                    and $state[$p:lk] != 1832                                         (: 'child' '*' :)
                    and $state[$p:lk] != 1834                                         (: 'descendant' '*' :)
                    and $state[$p:lk] != 1835                                         (: 'descendant-or-self' '*' :)
                    and $state[$p:lk] != 1836                                         (: 'div' '*' :)
                    and $state[$p:lk] != 1858                                         (: 'mod' '*' :)
                    and $state[$p:lk] != 1863                                         (: 'or' '*' :)
                    and $state[$p:lk] != 1872                                         (: 'self' '*' :)
                    and $state[$p:lk] != 2057                                         (: QName^Token '+' :)
                    and $state[$p:lk] != 2083                                         (: 'and' '+' :)
                    and $state[$p:lk] != 2088                                         (: 'child' '+' :)
                    and $state[$p:lk] != 2090                                         (: 'descendant' '+' :)
                    and $state[$p:lk] != 2091                                         (: 'descendant-or-self' '+' :)
                    and $state[$p:lk] != 2092                                         (: 'div' '+' :)
                    and $state[$p:lk] != 2114                                         (: 'mod' '+' :)
                    and $state[$p:lk] != 2119                                         (: 'or' '+' :)
                    and $state[$p:lk] != 2128                                         (: 'self' '+' :)
                    and $state[$p:lk] != 2313                                         (: QName^Token ',' :)
                    and $state[$p:lk] != 2339                                         (: 'and' ',' :)
                    and $state[$p:lk] != 2344                                         (: 'child' ',' :)
                    and $state[$p:lk] != 2346                                         (: 'descendant' ',' :)
                    and $state[$p:lk] != 2347                                         (: 'descendant-or-self' ',' :)
                    and $state[$p:lk] != 2348                                         (: 'div' ',' :)
                    and $state[$p:lk] != 2370                                         (: 'mod' ',' :)
                    and $state[$p:lk] != 2375                                         (: 'or' ',' :)
                    and $state[$p:lk] != 2384                                         (: 'self' ',' :)
                    and $state[$p:lk] != 2441                                         (: QName^Token '-' :)
                    and $state[$p:lk] != 2467                                         (: 'and' '-' :)
                    and $state[$p:lk] != 2472                                         (: 'child' '-' :)
                    and $state[$p:lk] != 2474                                         (: 'descendant' '-' :)
                    and $state[$p:lk] != 2475                                         (: 'descendant-or-self' '-' :)
                    and $state[$p:lk] != 2476                                         (: 'div' '-' :)
                    and $state[$p:lk] != 2498                                         (: 'mod' '-' :)
                    and $state[$p:lk] != 2503                                         (: 'or' '-' :)
                    and $state[$p:lk] != 2512                                         (: 'self' '-' :)
                    and $state[$p:lk] != 2691                                         (: IntegerLiteral '/' :)
                    and $state[$p:lk] != 2692                                         (: DecimalLiteral '/' :)
                    and $state[$p:lk] != 2693                                         (: DoubleLiteral '/' :)
                    and $state[$p:lk] != 2694                                         (: StringLiteral '/' :)
                    and $state[$p:lk] != 2697                                         (: QName^Token '/' :)
                    and $state[$p:lk] != 2708                                         (: '.' '/' :)
                    and $state[$p:lk] != 2723                                         (: 'and' '/' :)
                    and $state[$p:lk] != 2728                                         (: 'child' '/' :)
                    and $state[$p:lk] != 2730                                         (: 'descendant' '/' :)
                    and $state[$p:lk] != 2731                                         (: 'descendant-or-self' '/' :)
                    and $state[$p:lk] != 2732                                         (: 'div' '/' :)
                    and $state[$p:lk] != 2754                                         (: 'mod' '/' :)
                    and $state[$p:lk] != 2759                                         (: 'or' '/' :)
                    and $state[$p:lk] != 2768                                         (: 'self' '/' :)
                    and $state[$p:lk] != 2819                                         (: IntegerLiteral '//' :)
                    and $state[$p:lk] != 2820                                         (: DecimalLiteral '//' :)
                    and $state[$p:lk] != 2821                                         (: DoubleLiteral '//' :)
                    and $state[$p:lk] != 2822                                         (: StringLiteral '//' :)
                    and $state[$p:lk] != 2825                                         (: QName^Token '//' :)
                    and $state[$p:lk] != 2836                                         (: '.' '//' :)
                    and $state[$p:lk] != 2851                                         (: 'and' '//' :)
                    and $state[$p:lk] != 2856                                         (: 'child' '//' :)
                    and $state[$p:lk] != 2858                                         (: 'descendant' '//' :)
                    and $state[$p:lk] != 2859                                         (: 'descendant-or-self' '//' :)
                    and $state[$p:lk] != 2860                                         (: 'div' '//' :)
                    and $state[$p:lk] != 2882                                         (: 'mod' '//' :)
                    and $state[$p:lk] != 2887                                         (: 'or' '//' :)
                    and $state[$p:lk] != 2896                                         (: 'self' '//' :)
                    and $state[$p:lk] != 2984                                         (: 'child' '::' :)
                    and $state[$p:lk] != 2986                                         (: 'descendant' '::' :)
                    and $state[$p:lk] != 2987                                         (: 'descendant-or-self' '::' :)
                    and $state[$p:lk] != 3024                                         (: 'self' '::' :)
                    and $state[$p:lk] != 3081                                         (: QName^Token '&lt;' :)
                    and $state[$p:lk] != 3107                                         (: 'and' '&lt;' :)
                    and $state[$p:lk] != 3112                                         (: 'child' '&lt;' :)
                    and $state[$p:lk] != 3114                                         (: 'descendant' '&lt;' :)
                    and $state[$p:lk] != 3115                                         (: 'descendant-or-self' '&lt;' :)
                    and $state[$p:lk] != 3116                                         (: 'div' '&lt;' :)
                    and $state[$p:lk] != 3138                                         (: 'mod' '&lt;' :)
                    and $state[$p:lk] != 3143                                         (: 'or' '&lt;' :)
                    and $state[$p:lk] != 3152                                         (: 'self' '&lt;' :)
                    and $state[$p:lk] != 3209                                         (: QName^Token '&lt;=' :)
                    and $state[$p:lk] != 3235                                         (: 'and' '&lt;=' :)
                    and $state[$p:lk] != 3240                                         (: 'child' '&lt;=' :)
                    and $state[$p:lk] != 3242                                         (: 'descendant' '&lt;=' :)
                    and $state[$p:lk] != 3243                                         (: 'descendant-or-self' '&lt;=' :)
                    and $state[$p:lk] != 3244                                         (: 'div' '&lt;=' :)
                    and $state[$p:lk] != 3266                                         (: 'mod' '&lt;=' :)
                    and $state[$p:lk] != 3271                                         (: 'or' '&lt;=' :)
                    and $state[$p:lk] != 3280                                         (: 'self' '&lt;=' :)
                    and $state[$p:lk] != 3337                                         (: QName^Token '=' :)
                    and $state[$p:lk] != 3363                                         (: 'and' '=' :)
                    and $state[$p:lk] != 3368                                         (: 'child' '=' :)
                    and $state[$p:lk] != 3370                                         (: 'descendant' '=' :)
                    and $state[$p:lk] != 3371                                         (: 'descendant-or-self' '=' :)
                    and $state[$p:lk] != 3372                                         (: 'div' '=' :)
                    and $state[$p:lk] != 3394                                         (: 'mod' '=' :)
                    and $state[$p:lk] != 3399                                         (: 'or' '=' :)
                    and $state[$p:lk] != 3408                                         (: 'self' '=' :)
                    and $state[$p:lk] != 3465                                         (: QName^Token '>' :)
                    and $state[$p:lk] != 3491                                         (: 'and' '>' :)
                    and $state[$p:lk] != 3496                                         (: 'child' '>' :)
                    and $state[$p:lk] != 3498                                         (: 'descendant' '>' :)
                    and $state[$p:lk] != 3499                                         (: 'descendant-or-self' '>' :)
                    and $state[$p:lk] != 3500                                         (: 'div' '>' :)
                    and $state[$p:lk] != 3522                                         (: 'mod' '>' :)
                    and $state[$p:lk] != 3527                                         (: 'or' '>' :)
                    and $state[$p:lk] != 3536                                         (: 'self' '>' :)
                    and $state[$p:lk] != 3593                                         (: QName^Token '>=' :)
                    and $state[$p:lk] != 3619                                         (: 'and' '>=' :)
                    and $state[$p:lk] != 3624                                         (: 'child' '>=' :)
                    and $state[$p:lk] != 3626                                         (: 'descendant' '>=' :)
                    and $state[$p:lk] != 3627                                         (: 'descendant-or-self' '>=' :)
                    and $state[$p:lk] != 3628                                         (: 'div' '>=' :)
                    and $state[$p:lk] != 3650                                         (: 'mod' '>=' :)
                    and $state[$p:lk] != 3655                                         (: 'or' '>=' :)
                    and $state[$p:lk] != 3664                                         (: 'self' '>=' :)
                    and $state[$p:lk] != 3977                                         (: QName^Token '[' :)
                    and $state[$p:lk] != 4003                                         (: 'and' '[' :)
                    and $state[$p:lk] != 4008                                         (: 'child' '[' :)
                    and $state[$p:lk] != 4010                                         (: 'descendant' '[' :)
                    and $state[$p:lk] != 4011                                         (: 'descendant-or-self' '[' :)
                    and $state[$p:lk] != 4012                                         (: 'div' '[' :)
                    and $state[$p:lk] != 4034                                         (: 'mod' '[' :)
                    and $state[$p:lk] != 4039                                         (: 'or' '[' :)
                    and $state[$p:lk] != 4048                                         (: 'self' '[' :)
                    and $state[$p:lk] != 4105                                         (: QName^Token ']' :)
                    and $state[$p:lk] != 4131                                         (: 'and' ']' :)
                    and $state[$p:lk] != 4136                                         (: 'child' ']' :)
                    and $state[$p:lk] != 4138                                         (: 'descendant' ']' :)
                    and $state[$p:lk] != 4139                                         (: 'descendant-or-self' ']' :)
                    and $state[$p:lk] != 4140                                         (: 'div' ']' :)
                    and $state[$p:lk] != 4162                                         (: 'mod' ']' :)
                    and $state[$p:lk] != 4167                                         (: 'or' ']' :)
                    and $state[$p:lk] != 4176                                         (: 'self' ']' :)
                    and $state[$p:lk] != 4489                                         (: QName^Token 'and' :)
                    and $state[$p:lk] != 4515                                         (: 'and' 'and' :)
                    and $state[$p:lk] != 4520                                         (: 'child' 'and' :)
                    and $state[$p:lk] != 4522                                         (: 'descendant' 'and' :)
                    and $state[$p:lk] != 4523                                         (: 'descendant-or-self' 'and' :)
                    and $state[$p:lk] != 4524                                         (: 'div' 'and' :)
                    and $state[$p:lk] != 4546                                         (: 'mod' 'and' :)
                    and $state[$p:lk] != 4551                                         (: 'or' 'and' :)
                    and $state[$p:lk] != 4560                                         (: 'self' 'and' :)
                    and $state[$p:lk] != 5641                                         (: QName^Token 'div' :)
                    and $state[$p:lk] != 5667                                         (: 'and' 'div' :)
                    and $state[$p:lk] != 5672                                         (: 'child' 'div' :)
                    and $state[$p:lk] != 5674                                         (: 'descendant' 'div' :)
                    and $state[$p:lk] != 5675                                         (: 'descendant-or-self' 'div' :)
                    and $state[$p:lk] != 5676                                         (: 'div' 'div' :)
                    and $state[$p:lk] != 5698                                         (: 'mod' 'div' :)
                    and $state[$p:lk] != 5703                                         (: 'or' 'div' :)
                    and $state[$p:lk] != 5712                                         (: 'self' 'div' :)
                    and $state[$p:lk] != 8457                                         (: QName^Token 'mod' :)
                    and $state[$p:lk] != 8483                                         (: 'and' 'mod' :)
                    and $state[$p:lk] != 8488                                         (: 'child' 'mod' :)
                    and $state[$p:lk] != 8490                                         (: 'descendant' 'mod' :)
                    and $state[$p:lk] != 8491                                         (: 'descendant-or-self' 'mod' :)
                    and $state[$p:lk] != 8492                                         (: 'div' 'mod' :)
                    and $state[$p:lk] != 8514                                         (: 'mod' 'mod' :)
                    and $state[$p:lk] != 8519                                         (: 'or' 'mod' :)
                    and $state[$p:lk] != 8528                                         (: 'self' 'mod' :)
                    and $state[$p:lk] != 9097                                         (: QName^Token 'or' :)
                    and $state[$p:lk] != 9123                                         (: 'and' 'or' :)
                    and $state[$p:lk] != 9128                                         (: 'child' 'or' :)
                    and $state[$p:lk] != 9130                                         (: 'descendant' 'or' :)
                    and $state[$p:lk] != 9131                                         (: 'descendant-or-self' 'or' :)
                    and $state[$p:lk] != 9132                                         (: 'div' 'or' :)
                    and $state[$p:lk] != 9154                                         (: 'mod' 'or' :)
                    and $state[$p:lk] != 9159                                         (: 'or' 'or' :)
                    and $state[$p:lk] != 9168                                         (: 'self' 'or' :)
                    and $state[$p:lk] != 11273                                        (: QName^Token '|' :)
                    and $state[$p:lk] != 11299                                        (: 'and' '|' :)
                    and $state[$p:lk] != 11304                                        (: 'child' '|' :)
                    and $state[$p:lk] != 11306                                        (: 'descendant' '|' :)
                    and $state[$p:lk] != 11307                                        (: 'descendant-or-self' '|' :)
                    and $state[$p:lk] != 11308                                        (: 'div' '|' :)
                    and $state[$p:lk] != 11330                                        (: 'mod' '|' :)
                    and $state[$p:lk] != 11335                                        (: 'or' '|' :)
                    and $state[$p:lk] != 11344                                        (: 'self' '|' :)
                    and $state[$p:lk] != 345740                                       (: '(' ')' '/' :)
                    and $state[$p:lk] != 362124">                                   <!-- '(' ')' '//' -->
          <xsl:variable name="state" select="p:memoized($state, 0)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-FilterExpr($input, $state)
              "/>
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1">
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-FilterExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-PathExpr($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production UnaryExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-UnaryExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>     <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 16                                         (: '+' :)
                      and $state[$p:l1] != 19">                                     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 19">                                <!-- '-' -->
                  <xsl:variable name="state" select="p:consume(19, $input, $state)"/> <!-- '-' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(16, $input, $state)"/> <!-- '+' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-UnaryExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production UnaryExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-UnaryExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>     <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 16                                         (: '+' :)
                      and $state[$p:l1] != 19">                                     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 19">                                <!-- '-' -->
                  <xsl:variable name="state" select="p:consumeT(19, $input, $state)"/> <!-- '-' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/> <!-- '+' -->
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-UnaryExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse UnaryExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-UnaryExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-UnaryExpr-1($input, $state)"/>
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-ValueExpr($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'UnaryExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing UnaryExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-UnaryExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-UnaryExpr-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-ValueExpr($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production UnionExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-UnionExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 88">                                     <!-- '|' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(88, $input, $state)"/>     <!-- '|' -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-UnaryExpr($input, $state)
            "/>
            <xsl:sequence select="p:parse-UnionExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production UnionExpr (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-UnionExpr-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 88">                                     <!-- '|' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(88, $input, $state)"/>    <!-- '|' -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-UnaryExpr($input, $state)
            "/>
            <xsl:sequence select="p:try-UnionExpr-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse UnionExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-UnionExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-UnaryExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-UnionExpr-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'UnionExpr', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing UnionExpr.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-UnionExpr" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-UnaryExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-UnionExpr-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse XPath.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-XPath" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>         <!-- IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                                                                         Wildcard | QName^Token | S^WhiteSpace | '(' | '+' | '-' | '.' | '/' |
                                                                                         '//' | '@' | 'and' | 'attribute' | 'child' | 'descendant' |
                                                                                         'descendant-or-self' | 'div' | 'document-node' | 'element' |
                                                                                         'following' | 'following-sibling' | 'mod' | 'namespace' | 'node' |
                                                                                         'or' | 'processing-instruction' | 'self' | 'text' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-UnionExpr($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(2, $input, $state)"/>              <!-- EOF -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'XPath', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x or $error/@ambiguous-input) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;',
          'while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume whitespace.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:whitespace" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="end" select="$state[$p:b1]"/>
    <xsl:choose>
      <xsl:when test="$begin eq $end">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="whitespace">
          <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
        </xsl:variable>
        <xsl:sequence select="
          0,
          $state[$p:b0],
          $end,
          subsequence($state, $p:e0 + 1),
          $whitespace/node()
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Use p:match to fetch the next token, but skip any leading
   ! whitespace.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start.
   ! @param $token-set the valid token set id.
   ! @return a sequence of three values: the token code of the result
   ! token, with input string positions of token begin and end.
  -->
  <xsl:function name="p:matchW">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="match" select="p:match($input, $begin, $token-set)"/>
    <xsl:choose>
      <xsl:when test="$match[1] = 10">                                              <!-- S^WhiteSpace -->
        <xsl:sequence select="p:matchW($input, $match[3], $token-set)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$match"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:matchW($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:matchW($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 128 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:matchW($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 16384 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 128 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 16384 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   ! Memoize the backtracking result that was computed at decision point
   ! $dpi for input position $e0. Reconstruct state from the parameters.
   !
   ! @param $state the lexer state to be restored.
   ! @param $update the lexer state containing updates.
   ! @param $dpi the decision point id.
   ! @param $e0 the input position.
   ! @param $v the id of the successful alternative.
   ! @param $lk the new lookahead code.
   ! @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 2 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 2 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol XPath from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-XPath" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-XPath($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse start symbol OccurrenceIndicator from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-OccurrenceIndicator" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-OccurrenceIndicator($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse start symbol ItemType from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-ItemType" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-ItemType($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

</xsl:stylesheet>