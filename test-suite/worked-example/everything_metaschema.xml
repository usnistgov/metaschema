<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../toolchains/xslt-proto-v04/validate/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/css" href="../../toolchains/xslt-proto-v04/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../support/lib/metaschema.xsd"
 xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0">
    <schema-name>NIST Metaschema Everything</schema-name>
    <schema-version>1.0</schema-version>
    <short-name>everything</short-name>
    <namespace>http://csrc.nist.gov/metaschema/ns/everything</namespace>
   
   <remarks>
       <p>A mini metaschema produced for testing purposes. Use at your own risk.</p>
   </remarks>
    
<!-- 
     Schematron
       abstract="yes" - turns off checking for missing declarations
        
     ASSEMBLY
        singleton
        grouped
          with and without @in-xml
        root-name
        use-name
        json-key
        choice
        @in-json
        
     FIELD
       json-value-key literal
       json-value-key flag
       value datatypes
         markup-line
         markup-multiline
           with and without in-xml="wrapped"
       value constraints (allowed-values)
    
     FLAG
       value datatypes
    
    -->
    
   <define-assembly name="anything">
       <formal-name>Any Thing</formal-name>
       <description>Any old thing.</description>
       <root-name>ANYTHING</root-name>
       <flag ref="todays-date"/>
       <model>
           <assembly ref="everything" min-occurs="0">
               <use-name>everything</use-name>
           </assembly>
       </model>
   </define-assembly>
    
    <define-assembly name="everything">
        <formal-name>Every Thing</formal-name>
        <description>Nothing left out.</description>
        <root-name>EVERYTHING</root-name>
        <use-name>everything</use-name>
        <flag ref="todays-date"/>
        <define-flag name="required-integer" as-type="integer" required="yes">
            <formal-name>Required Integer</formal-name>
            <description>An integer.</description>
        </define-flag>
        
        <model>
            <define-field name="required-local-field" as-type="markup-line" min-occurs="1">
                <formal-name>Required local field</formal-name>
                <description>Declared on 'everything'</description>
            </define-field>
            <field ref="one-string"/>
            <field ref="line" max-occurs="unbounded">
                <group-as name="epigraph" in-xml="GROUPED"/>
            </field>
            <field ref="color" max-occurs="unbounded">
                <group-as name="colors" in-xml="GROUPED" in-json="BY_KEY"/>
            </field>
            <field ref="point" max-occurs="unbounded">
                <group-as name="lattice" in-xml="GROUPED" in-json="BY_KEY"/>
            </field>
            <assembly ref="role" max-occurs="unbounded">
                <group-as name="dramatis-personae" in-xml="GROUPED" in-json="BY_KEY"/>
            </assembly>
            <assembly ref="singleton" max-occurs="1" min-occurs="1"/>
            <assembly ref="section" max-occurs="unbounded" min-occurs="0">
                <group-as name="sections" in-json="BY_KEY"/>
            </assembly>
            <assembly ref="everything" max-occurs="3">
                <use-name>everything</use-name>
                <group-as name="everythings"/>
            </assembly>
            
        </model>
    </define-assembly>
    
    <define-assembly name="singleton">
        <formal-name>Singleton assembly</formal-name>
        <description>One of a kind.</description>
        <flag ref="todays-date"/>
        <model>
            <field ref="title" min-occurs="1"/>
            <field ref="remarks" in-xml="WITH_WRAPPER" />
        </model>
    </define-assembly>
    
    <define-assembly name="section">
        <formal-name>Section</formal-name>
        <description>.</description>
        <json-key flag-name="id"/>
        <define-flag name="id" as-type="NCName">
            <formal-name>id</formal-name>
            <description>.</description>
        </define-flag>
        <define-flag name="class">
            <formal-name>Class</formal-name>
            <description>.</description>
        </define-flag>
        <model>
            <field ref="title"/>
            <field ref="named-value"/>
            <field ref="line" max-occurs="unbounded">
                <group-as name="epigraph" in-xml="GROUPED"/>
            </field>
            <field ref="prose" in-xml="UNWRAPPED"/>
        </model>
    </define-assembly>
    
    <define-field name="color" as-type="string">
        <formal-name>Color</formal-name>
        <description>Name and code</description>
        <json-key flag-name="code"/>
        <define-flag name="code" required="yes">
            <formal-name>Code</formal-name>
            <description>The six-digit hex code, so FF0000 for red</description>
        </define-flag>
    </define-field>
    
    <define-field name="point" as-type="empty">
        <formal-name>Point</formal-name>
        <description>Point location</description>
        <json-key flag-name="point-id"/>
        <define-flag name="point-id" required="yes">
            <formal-name>Point ID</formal-name>
            <description>A unique identifier for the point</description>
        </define-flag>
        <define-flag name="x" as-type="decimal">
            <formal-name>X</formal-name>
            <description>Abscissa</description>
        </define-flag>
        <define-flag name="y" as-type="decimal">
            <formal-name>Y</formal-name>
            <description>ordinate</description>
        </define-flag>
    </define-field>
    
    <define-assembly name="role">
        <formal-name>Role</formal-name>
        <description>.</description>
        <json-key flag-name="role-id"/>
        <define-flag name="role-id" required="yes">
            <formal-name>Role ID</formal-name>
            <description>A unique identifier for the role</description>
        </define-flag>
        <model>
            <field ref="title"/>
            <field ref="remarks"/>
        </model>
    </define-assembly>
    
    <define-field name="line" as-type="markup-line">
        <formal-name>Line of verse</formal-name>
        <description>Could be terse</description>
    </define-field>
    
    <define-field name="title" as-type="markup-line">
        <formal-name>Title</formal-name>
        <description>.</description>
    </define-field>
    
    <define-field name="prose" as-type="markup-multiline">
        <formal-name>Prose</formal-name>
        <description>A placeholder for prose in an explicit model.</description>
    </define-field>
    
    <define-field name="remarks" as-type="markup-multiline">
        <formal-name>Prose</formal-name>
        <description>A block o' prose.</description>
    </define-field>
    
    <define-field name="named-value" as-type="string">
        <formal-name>Named value</formal-name>
        <description>A field with a json value flag</description>
        <json-value-key flag-name="name"/>
        <flag ref="class"/>
        <define-flag name="name" required="yes">
            <formal-name>Name</formal-name>
            <description>The name for the value</description>
        </define-flag>
    </define-field>
    
    
    <define-field name="one-string">
        <formal-name>One String</formal-name>
        <description>Not more than one.</description>
        <flag ref="todays-date"/>
        <flag ref="required-ncname"/>
        <constraint>
            <allowed-values>
                <enum value="Alpha"/>
                <enum value="Beta"/>
                <enum value="Gamma"/>
            </allowed-values>
        </constraint>
    </define-field>
    <define-flag name="todays-date" as-type="date">
        <formal-name>Today's Date</formal-name>
        <description>Not before yesterday.</description>
    </define-flag>

    <define-flag name="required-ncname" as-type="NCName">
        <!--(declared a string by default)-->
        <formal-name>Required NCName</formal-name>
        <description>A no-colon name.</description>
    </define-flag>
    
    <define-flag name="class" as-type="NCName">
        <formal-name>Class</formal-name>
        <description>Some class.</description>
    </define-flag>
    
    <!--<define-field name="custom-field">
        <formal-name>Customized Field</formal-name>
        <description>A declaration that can be overridden locally.</description>
        <flag name="a-flag">
            <formal-name>Dummy Flag</formal-name>
            <description>dummy flag for aggregation.</description>
        </flag>
        <allowed-values allow-other="yes">
            <enum value="1000">thousand</enum>
        </allowed-values>
    </define-field>-->
    
</METASCHEMA>