<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../toolchains/xslt-M4/validate/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
            xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../toolchains/xslt-M4/validate/metaschema.xsd">
   <schema-name>OSCAL Implementation Component Format</schema-name>
   <schema-version>1.0.0-milestone3</schema-version>
   <short-name>oscal-component</short-name>
   <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>
   <remarks>
      <p>The OSCAL Implementation Component format can be used to describe the implementation of controls in a <code>component</code> or a set of components grouped as a <code>capability</code>. A component can be either a <em>technical component</em>, or a <em>documentary component</em>. A technical component is a component that is implemented in hardware (physical or virtual) or software. A documentary component is a component implemented in a document, such as a process, procedure, or policy.</p>
      <p>The root of the OSCAL Implementation Component format is <code>component-definition</code>.</p>
      <p>NOTE: This documentation is a work in progress. As a result, documentation for many of the information elements is missing or incomplete.</p>
   </remarks>
   <import href="oscal_implementation-common_metaschema.xml"/>
   <define-assembly name="component-definition">
      <formal-name>Component Definition</formal-name>
      <description>A collection of component descriptions, which may optionally be grouped by capability.</description>
      <root-name>component-definition</root-name>
      <model>
         <assembly ref="metadata" min-occurs="1"/>
         <field ref="import-component-definition" max-occurs="unbounded">
            <group-as name="import-component-definitions" in-json="ARRAY"/>
         </field>
         <assembly ref="component" max-occurs="unbounded">
            <group-as name="components" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="capability" max-occurs="unbounded">
            <group-as name="capabilities" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="back-matter"/>
      </model>
   </define-assembly>
   <define-field name="import-component-definition" as-type="empty">
      <formal-name>Import Component Definition</formal-name>
      <description>Loads a component definition from another resource.</description>
      <define-flag name="href" as-type="uri-reference" required="yes">
         <formal-name>Hyperlink Reference</formal-name>
         <description>A link to a resource that defines a set of components and/or capabilities to import into this collection.</description>
      </define-flag>
   </define-field>
   <define-assembly name="component">
      <formal-name>Component</formal-name>
      <description>A defined component that can be part of an implemented system.</description>
      <json-key flag-name="uuid"/>
      <define-flag required="yes" name="uuid">
         <formal-name>Component Identifier</formal-name>
         <description>A unique identifier for a component.</description>
      </define-flag>
      <define-flag name="name" as-type="string" required="yes">
         <formal-name>Component Name</formal-name>
         <description>The component's short, human-readable name.</description>
      </define-flag>
      <flag ref="component-type" required="yes"/>
      <model>
         <define-field name="title" min-occurs="1">
            <formal-name>title field</formal-name>
            <description>A longer name for the component.</description>
         </define-field>
         <field ref="description" min-occurs="1"/>
         <define-field name="prop" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>prop field ... </description>
            <group-as name="properties" in-json="ARRAY"/>
            <define-flag name="name">
               <formal-name>name flag</formal-name>
               <description>name flag ... </description>
               <constraint>
                  <allowed-values allow-other="yes">
                     <enum value="version">The version of the component.</enum>
                     <enum value="model">The model of the component. Useful for 'software', 'hardware', and 'service' components.</enum>
                     <enum value="release-date">The date the component was released.</enum>
                  </allowed-values>
               </constraint>
            </define-flag>
         </define-field>
         <define-field name="link" max-occurs="unbounded">
            <formal-name>link field</formal-name>
            <description>link field ... </description>
            <group-as name="links" in-json="ARRAY"/>
            <define-flag name="rel">
               <formal-name>rel flag</formal-name>
               <description>rel flag ... </description>
               <constraint>
                  <allowed-values allow-other="yes">
                     <enum value="depends-on">A reference to another component that this component has a dependency on.</enum>
                     <enum value="validated-by">A reference to another component of type=validation, that is a validation (e.g., FIPS 140-2) for this component</enum>
                     <enum value="proof-of-compliance">A pointer to a validation record (e.g., FIPS 140-2) or other authorization.</enum>
                  </allowed-values>
               </constraint>
            </define-flag>
         </define-field>
         <assembly ref="responsible-party" max-occurs="unbounded">
            <group-as name="responsible-parties" in-json="BY_KEY"/>
            <!--        <flag ref="role-id">
          <allowed-values allow-other="yes">
            <enum value="maintainer">Organization responsible for the creation and maintenance of the component.</enum>
            <enum value="provider">Organization responsible for providing the component, if this is different from the "maintainer" (e.g., a reseller).</enum>
          </allowed-values>
        </flag>
-->
         </assembly>
         <!--      <assembly ref="proof-of-compliance" max-occurs="unbounded">
        <group-as name="proofs-of-compliance" />
      </assembly>
-->
         <assembly ref="control-implementation" max-occurs="unbounded">
            <group-as name="control-implementations" in-json="ARRAY"/>
         </assembly>
         <!--      <assembly ref="supported-profile" max-occurs="unbounded">
        <group-as name="supported-profiles" />
      </assembly>
-->
         <!--      <assembly ref="configuration" max-occurs="unbounded">
        <group-as name="configurations" in-json="BY_KEY" />
      </assembly>
      <assembly ref="artifact" max-occurs="unbounded">
        <group-as name="artifacts" in-json="BY_KEY" />
      </assembly>
-->
         <field ref="remarks"/>
      </model>
      <remarks>
         <p>Components may be products, services, APIs, policies, processes, plans, guidance, standards, or other tangible items that enable security and/or privacy.</p>
         <p>The <code>type</code> indicates which of these component types is represented.</p>
         <p>A group of components may be aggregated into a <code>capability</code>. For example, an account management capability that consists of an account management process, and a Lightweight Directory Access Protocol (LDAP) software implementation.</p>
         <p>Capabilities are expressed by combining one or more components.</p>
      </remarks>
   </define-assembly>
   <define-assembly name="capability">
      <formal-name>Capability</formal-name>
      <description>A grouping of other components and/or capabilities.</description>
      <json-key flag-name="uuid"/>
      <define-flag required="yes" name="uuid" as-type="uuid">
         <formal-name>Capability Identifier</formal-name>
         <description>A unique identifier for a capability.</description>
      </define-flag>
      <define-flag name="name" as-type="string" required="yes">
         <formal-name>Capability Name</formal-name>
         <description>The capability's human-readable name.</description>
      </define-flag>
      <model>
         <field ref="description" min-occurs="1"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships for:
          depends-on: component has a dependency on another component
          validated-by:, etc.
        -->
         </field>
         <assembly ref="incorporates-component" max-occurs="unbounded">
            <group-as name="incorporates-components" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="control-implementation" max-occurs="unbounded">
            <group-as name="control-implementations" in-json="ARRAY"/>
         </assembly>
         <!--      <assembly ref="supported-profile" max-occurs="unbounded">
        <group-as name="supported-profiles" />
      </assembly>
-->
         <field ref="remarks"/>
      </model>
   </define-assembly>
   <define-assembly name="control-implementation">
      <formal-name>Control Implementation</formal-name>
      <description>Defines how the component or capability supports a set of controls.</description>
      <define-flag name="uuid" required="yes">
         <formal-name>Control Implementation Set Identifier</formal-name>
         <description>A unique identifier for the set of implemented controls.</description>
      </define-flag>
      <flag ref="source" required="yes">
         <remarks>
            <p>A URL reference to the source catalog or profile for which this component is implementing controls for.</p>
         </remarks>
      </flag>
      <model>
         <field ref="description" min-occurs="1"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships -->
         </field>
         <assembly ref="implemented-requirement" min-occurs="1" max-occurs="unbounded">
            <group-as name="implemented-requirements" in-json="ARRAY"/>
         </assembly>
      </model>
   </define-assembly>
   <define-assembly name="implemented-requirement">
      <formal-name>Control-based Requirement</formal-name>
      <description>Describes how the component implements an individual control.</description>
      <flag ref="uuid" required="yes"/>
      <flag ref="control-id"/>
      <model>
         <field ref="description"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships -->
         </field>
         <!--            <assembly ref="using"/>
-->
         <!-- TODO: Implement parameters -->
         <define-assembly name="responsible-role" max-occurs="unbounded">
            <formal-name>Responsible Role</formal-name>
            <description>A reference to one or more roles with responsibility for performing a function relative to the control.</description>
            <json-key flag-name="role-id"/>
            <group-as name="responsible-roles" in-json="BY_KEY"/>
            <define-flag required="yes" name="role-id" as-type="NCName">
               <formal-name>Role identifier</formal-name>
               <description>Indicates the role assigned to the responsible party.</description>
               <constraint>
                  <allowed-values allow-other="yes">
                     <enum value="asset-owner">Accountable for ensuring the asset is managed in accordance with organizational policies and procedures.</enum>
                     <enum value="asset-administrator">Responsible for administering a set of assets.</enum>
                     <enum value="soc">Members of the security operations center (SOC).</enum>
                     <enum value="noc">Members of the network operations center (NOC).</enum>
                     <enum value="incident-response">Members of the incident response team.</enum>
                     <enum value="help-desk">Members of the help desk.</enum>
                     <enum value="configuration-management-lead">Responsible for the configuration management processes governing changes to the asset.</enum>
                     <enum value="maintainer">Organization responsible for the creation and maintenance of the component.</enum>
                     <enum value="provider">Organization responsible for providing the component, if this is different from the "maintainer" (e.g., a reseller).</enum>
                  </allowed-values>
               </constraint>
            </define-flag>
            <model>
               <field ref="prop" max-occurs="unbounded">
                  <group-as name="properties" in-json="ARRAY"/>
               </field>
               <assembly ref="annotation" max-occurs="unbounded">
                  <group-as name="annotations" in-json="ARRAY"/>
               </assembly>
               <field ref="link" max-occurs="unbounded">
                  <group-as name="links" in-json="ARRAY"/>
               </field>
               <field ref="party-uuid" max-occurs="unbounded">
                  <group-as name="party-ids" in-json="ARRAY"/>
               </field>
               <field ref="remarks" in-xml="WITH_WRAPPER"/>
            </model>
         </define-assembly>
         <assembly ref="set-parameter" max-occurs="unbounded">
            <group-as name="set-parameters" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="statement" max-occurs="unbounded">
            <group-as name="statements" in-json="BY_KEY"/>
         </assembly>
         <field ref="remarks"/>
      </model>
   </define-assembly>
   <define-assembly name="statement">
      <formal-name>Specific Statement</formal-name>
      <description>Identifies which statements within a control are addressed.</description>
      <json-key flag-name="statement-id"/>
      <flag ref="statement-id" required="yes">
         <remarks>
            <p>A reference to the specific implemented statement associated with a control.</p>
         </remarks>
      </flag>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="description"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships -->
         </field>
         <!--            <assembly ref="using"/>
-->
         <!-- TODO: Implement parameters -->
         <define-assembly name="responsible-role" max-occurs="unbounded">
            <formal-name>Responsible Role</formal-name>
            <description>A reference to one or more roles with responsibility for performing a function relative to the control.</description>
            <json-key flag-name="role-id"/>
            <group-as name="responsible-roles" in-json="BY_KEY"/>
            <define-flag required="yes" name="role-id" as-type="NCName">
               <formal-name>Role identifier</formal-name>
               <description>Indicates the role assigned to the responsible party.</description>
               <constraint>
                  <allowed-values allow-other="yes">
                     <enum value="asset-owner">Accountable for ensuring the asset is managed in accordance with organizational policies and procedures.</enum>
                     <enum value="asset-administrator">Responsible for administering a set of assets.</enum>
                     <enum value="soc">Members of the security operations center (SOC).</enum>
                     <enum value="noc">Members of the network operations center (NOC).</enum>
                     <enum value="incident-response">Members of the incident response team.</enum>
                     <enum value="help-desk">Members of the help desk.</enum>
                     <enum value="configuration-management-lead">Responsible for the configuration management processes governing changes to the asset.</enum>
                     <enum value="maintainer">Organization responsible for the creation and maintenance of the component.</enum>
                     <enum value="provider">Organization responsible for providing the component, if this is different from the "maintainer" (e.g., a reseller).</enum>
                  </allowed-values>
               </constraint>
            </define-flag>
            <model>
               <field ref="prop" max-occurs="unbounded">
                  <group-as name="properties" in-json="ARRAY"/>
               </field>
               <assembly ref="annotation" max-occurs="unbounded">
                  <group-as name="annotations" in-json="ARRAY"/>
               </assembly>
               <field ref="link" max-occurs="unbounded">
                  <group-as name="links" in-json="ARRAY"/>
               </field>
               <field ref="party-uuid" max-occurs="unbounded">
                  <group-as name="party-ids" in-json="ARRAY"/>
               </field>
               <field ref="remarks" in-xml="WITH_WRAPPER"/>
            </model>
         </define-assembly>
         <!--         <assembly ref="by-capability" max-occurs="unbounded">
            <group-as name="by-capabilities" in-json="BY_KEY"/>
         </assembly>
-->
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <!--
  <define-assembly name="supported-profile">
    <formal-name>Supported Profile</formal-name>
    <description>How the component supports a given baseline expressed as an OSCAL profile.</description>
    <flag ref="source" required="yes"/>
    <model>
      <field ref="description" min-occurs="1"/>
      <assembly ref="meets-requirement-set" max-occurs="unbounded">
        <group-as name="meets-requirement-sets"/>
      </assembly>
      <field ref="prop" max-occurs="unbounded">
        <group-as name="properties"/>
      </field>
      <field ref="link" max-occurs="unbounded">
        <group-as name="links"/>
        <!-\- TODO: Model specific link relationships -\->
      </field>
      <!-\- TODO: Implement parameters -\->
      <field ref="remarks"/>
    </model>
  </define-assembly>

  <define-assembly name="meets-requirement-set">
    <formal-name>Can Meet</formal-name>
    <description>Defines what sets of controls are supported by the component.</description>
    <flag ref="source" required="yes"/>
    <model>
      <assembly ref="requirement" min-occurs="1" max-occurs="unbounded">
        <group-as name="requirements"/>
      </assembly>
      <assembly ref="using"/>
    </model>
  </define-assembly>
-->
</METASCHEMA>
