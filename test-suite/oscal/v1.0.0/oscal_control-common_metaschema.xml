<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../build/metaschema/toolchains/xslt-M4/validate/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<!-- OSCAL CATALOG METASCHEMA -->
<!-- validate with XSD and Schematron (linked) -->
<!DOCTYPE METASCHEMA [
   <!ENTITY allowed-values-control-group-property-name SYSTEM "shared-constraints/allowed-values-control-group-property-name.ent">
]>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0" xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/toolchains/xslt-M4/validate/metaschema.xsd" abstract="yes">
        <schema-name>OSCAL Control Catalog Format -- Common Models</schema-name>
        <schema-version>1.0.0</schema-version>
        <short-name>oscal-catalog-common</short-name>
        <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>
        <json-base-uri>http://csrc.nist.gov/ns/oscal</json-base-uri>
        <import href="oscal_metadata_metaschema.xml"/>
        <!-- ######################################## -->
        <!-- # Part Assembly and related constructs # -->
        <!-- ######################################## -->
        <define-assembly name="part">
                <formal-name>Part</formal-name>
                <description>A partition of a control's definition or a child of another part.</description>
                <define-flag name="id" as-type="token">
                        <!-- This is an id because the idenfier is intended to be human-raadable. -->
                        <formal-name>Part Identifier</formal-name>
                        <description>A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.</description>
                </define-flag>
                <define-flag name="name" as-type="token" required="yes">
                        <formal-name>Part Name</formal-name>
                        <description>A textual label that uniquely identifies the part's semantic type.</description>
                        <constraint>
                                <allowed-values allow-other="yes">
                                        <!-- QUESTION: "method" doesn't appear in this list, but has a constraint below. Why? -->
                                        <enum value="overview">An introduction to a control or a group of controls.</enum>
                                        <enum value="statement">A set of control implementation requirements.</enum>
                                        <enum value="item">An individual item within a control statement.</enum>
                                        <enum value="guidance">Additional information to consider when selecting, implementing, assessing, and monitoring a control.</enum>
                                        <enum value="objective">Describes a set of assessment objectives.</enum>
                                        <enum value="assessment">Describes a method-based assessment over a set of assessment objects.</enum>
                                        <enum value="objects">Provides a list of assessment objects.</enum>
                                </allowed-values>
                        </constraint>
                </define-flag>
                <define-flag name="ns" as-type="uri">
                        <!-- CHANGED: data type to uri -->
                        <formal-name>Part Namespace</formal-name>
                        <description>A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.</description>
                        <remarks>
                                <p>Provides a means to segment the value space for the <code>name</code>, so that different organizations and individuals can assert control over the allowed names and associated text used in a part. This allows the semantics associated with a given name to be defined on an organization-by-organization basis.</p>
                                <p>An organization MUST use a URI that they have control over. e.g., a domain registered to the organization in a URI, a registered uniform resource names (URN) namespace.</p>
                                <p>When a <code>ns</code> is not provided, its value should be assumed to be <code>http://csrc.nist.gov/ns/oscal</code> and the name should be a name defined by the associated OSCAL model.</p>
                        </remarks>
                </define-flag>
                <define-flag name="class" as-type="token">
                        <formal-name>Part Class</formal-name>
                        <description>A textual label that provides a sub-type or characterization of the part's <code>name</code>. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same <code>name</code> and <code>ns</code>.
                        </description>
                        <remarks>
                                <p>A <code>class</code> can be used in validation rules to express extra constraints over named items of a specific <code>class</code> value.</p>
                                <p>A <code>class</code> can also be used in an OSCAL profile as a means to target an alteration to control content.</p>
                        </remarks>
                </define-flag>
                <model>
                        <define-field name="title" as-type="markup-line">
                                <formal-name>Part Title</formal-name>
                                <description>A name given to the part, which may be used by a tool for display and navigation.</description>
                        </define-field>
                        <assembly ref="property" max-occurs="unbounded">
                                <group-as name="props" in-json="ARRAY"/>
                        </assembly>
                        <define-field name="prose" as-type="markup-multiline" in-xml="UNWRAPPED">
                                <formal-name>Part Text</formal-name>
                                <description>Permits multiple paragraphs, lists, tables etc.</description>
                        </define-field>
                        <assembly ref="part" max-occurs="unbounded">
                                <group-as name="parts" in-json="ARRAY"/>
                        </assembly>
                        <assembly ref="link" max-occurs="unbounded">
                                <group-as name="links" in-json="ARRAY"/>
                        </assembly>
                        <!-- <any/> -->
                </model>
                <constraint>
                        <!-- CHANGE: added allowed values for a property/@name -->
                        <allowed-values target="prop/@name" allow-other="yes">
            &allowed-values-control-group-property-name;
                        </allowed-values>
                        <require when="@name='assessment'">
                                <allowed-values target="prop/@name" allow-other="yes">
                                        <enum value="method">The assessment method to use. This typically appears on parts with the name "assessment".</enum>
                                </allowed-values>
                                <has-cardinality target="prop[@name='method']" min-occurs="1"/>
                                <allowed-values target="prop[@name='method']/@value">
                                        <enum value="INTERVIEW">The process of holding discussions with individuals or groups of individuals within an organization to once again, facilitate assessor understanding, achieve clarification, or obtain evidence.</enum>
                                        <enum value="EXAMINE">The process of reviewing, inspecting, observing, studying, or analyzing one or more assessment objects (i.e., specifications, mechanisms, or activities).</enum>
                                        <enum value="TEST">The process of exercising one or more assessment objects (i.e., activities or mechanisms) under specified conditions to compare actual with expected behavior.</enum>
                                </allowed-values>
                        </require>
                </constraint>
                <remarks>
                        <p>A <code>part</code> provides for logical partitioning of prose, and can be thought of as a grouping structure (e.g., section). A <code>part</code> can have child parts allowing for arbitrary nesting of prose content (e.g., statement hierarchy). A <code>part</code> can contain <code>prop</code> objects that allow for enriching prose text with structured name/value information.</p>
                        <p>A <code>part</code> can be assigned an optional <code>id</code>, which allows for internal and external references to the textual concept contained within a <code>part</code>. A <code>id</code> provides a means for an OSCAL profile, or a higher layer OSCAL model to reference a specific part within a <code>catalog</code>. For example, an <code>id</code> can be used to reference or to make modifications to a control statement in a profile.</p>
                        <p>Use of <code>part</code> and <code>prop</code> provides for a wide degree of extensibility within the OSCAL catalog model. The optional <code>ns</code> provides a means to qualify a part's <code>name</code>, allowing for organization-specific vocabularies to be defined with clear semantics. Any organization that extends OSCAL in this way should consistently assign a <code>ns</code> value that represents the organization, making a given namespace qualified <code>name</code> unique to that organization. This allows the combination of <code>ns</code> and <code>name</code> to always be unique and unambiguous, even when mixed with extensions from other organizations. Each organization is responsible for governance of their own extensions, and is strongly encouraged to publish their extensions as standards to their user community. If no <code>ns</code> is provided, the name is expected to be in the "OSCAL" namespace.</p>
                        <p>To ensure a <code>ns</code> is unique to an organization and naming conflicts are avoided, a URI containing a DNS or other globally defined organization name should be used. For example, if FedRAMP and DoD both extend OSCAL, FedRAMP will use the <code>ns</code> "https://fedramp.gov", while DoD will use the <code>ns</code> "https://defense.gov" for any organization specific <code>name</code>.
                        </p>
                        <p>Tools that process OSCAL content are not required to interpret unrecognized OSCAL extensions; however, OSCAL compliant tools should not modify or remove unrecognized extensions, unless there is a compelling reason to do so, such as data sensitivity.</p>
                </remarks>
                <example>
                        <description>Multiple Parts with Different Organization-Specific Names</description>
                        <o:part xmlns:o="http://csrc.nist.gov/ns/oscal/example" name="statement" id="statement-A">
                                <o:part ns="https://fedramp.gov" name="status" id="statement-A-FedRAMP">Something FedRAMP Cares About</o:part>
                                <o:part ns="https://defense.gov" name="status" id="statement-A-DoD">Something DoD Cares About</o:part>
                        </o:part>
                </example>
        </define-assembly>

        <!-- ############################################# -->
        <!-- # Parameter Assembly and related constructs # -->
        <!-- ############################################# -->
        <define-assembly name="parameter">
                <formal-name>Parameter</formal-name>
                <description>Parameters provide a mechanism for the dynamic assignment of value(s) in a control.</description>
                <!-- It is worth it abbreviate "param" in XML, while keeping "parameters" in JSON. -->
                <use-name>param</use-name>
                <define-flag name="id" as-type="token" required="yes">
                        <!-- This is an id because the idenfier is intended to be human-raadable. -->
                        <formal-name>Parameter Identifier</formal-name>
                        <description>A unique identifier for a specific parameter instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same parameter across minor revisions of the document.</description>
                </define-flag>
                <!-- TODO: What is the semantics of class here? -->
                <define-flag name="class" as-type="token">
                        <formal-name>Parameter Class</formal-name>
                        <description>A textual label that provides a characterization of the parameter.</description>
                        <remarks>
                                <p>A <code>class</code> can be used in validation rules to express extra constraints over named items of a specific <code>class</code> value.</p>
                        </remarks>
                </define-flag>
                <flag ref="depends-on"/>
                <model>
                        <assembly ref="property" max-occurs="unbounded">
                                <group-as name="props" in-json="ARRAY"/>
                        </assembly>
                        <!-- CHANGE: relative order in sequence -->
                        <assembly ref="link" max-occurs="unbounded">
                                <group-as name="links" in-json="ARRAY"/>
                        </assembly>
                        <define-field name="label" as-type="markup-line">
                                <formal-name>Parameter Label</formal-name>
                                <description>A short, placeholder name for the parameter, which can be used as a substitute for a <code>value</code> if no value is assigned.</description>
                                <remarks>
                                        <p>The label value should be suitable for inline display in a rendered catalog.</p>
                                </remarks>
                        </define-field>
                        <define-field name="usage" as-type="markup-multiline" in-xml="WITH_WRAPPER">
                                <formal-name>Parameter Usage Description</formal-name>
                                <description>Describes the purpose and use of a parameter</description>
                        </define-field>
                        <assembly ref="parameter-constraint" max-occurs="unbounded">
                                <use-name>constraint</use-name>
                                <group-as name="constraints" in-json="ARRAY"/>
                        </assembly>
                        <assembly ref="parameter-guideline" max-occurs="unbounded">
                                <use-name>guideline</use-name>
                                <!-- CHANGED from "guidance" to "guidelines" -->
                                <group-as name="guidelines" in-json="ARRAY"/>
                        </assembly>
                        <choice>
                                <field ref="parameter-value" max-occurs="unbounded">
                                        <!-- CHANGED cardinality to allow for multiple values -->
                                        <use-name>value</use-name>
                                        <group-as name="values" in-json="ARRAY"/>
                                        <remarks>
                                                <p>A set of values provided in a catalog can be redefined at any higher layer of OSCAL (e.g., Profile).</p>
                                        </remarks>
                                </field>
                                <assembly ref="parameter-selection">
                                        <use-name>select</use-name>
                                        <remarks>
                                                <p>A set of parameter value choices, that may be picked from to set the parameter value.</p>
                                        </remarks>
                                </assembly>
                        </choice>
                        <field ref="remarks" in-xml="WITH_WRAPPER"/>
                        <!-- <any/> -->
                </model>
                <remarks>
                        <p>In a catalog, a parameter is typically used as a placeholder for the future assignment of a parameter value, although the OSCAL model allows for the direct assignment of a value if desired by the control author. The <code>value</code> may be optionally used to specify one or more values. If no value is provided, then it is expected that the value will be provided at the Profile or Implementation layer.</p>
                        <p>A parameter can include a variety of metadata options that support the future solicitation of one or more values. A <code>label</code> provides a textual placeholder that can be used in a tool to solicit parameter value input, or to display in catalog documentation. The <code>desc</code> provides a short description of what the parameter is used for, which can be used in tooling to help a user understand how to use the parameter. A <code>constraint</code> can be used to provide criteria for the allowed values. A <code>guideline</code> provides a recommendation for the use of a parameter.</p>
                </remarks>
        </define-assembly>

        <define-assembly name="parameter-constraint">
                <!-- CHANGED from field to assembly to allow for future extension -->
                <formal-name>Constraint</formal-name>
                <description>A formal or informal expression of a constraint or test</description>
                <model>
                        <!-- CHANGED: renamed "detail" to "description" -->
                        <define-field name="description" as-type="markup-multiline" in-xml="WITH_WRAPPER">
                                <formal-name>Constraint Description</formal-name>
                                <description>A textual summary of the constraint to be applied.</description>
                        </define-field>
                        <!-- CHANGED from flag to assembly to allow for future extension -->
                        <define-assembly name="test" max-occurs="unbounded">
                                <formal-name>Constraint Test</formal-name>
                                <description>A test expression which is expected to be evaluated by a tool.</description>
                                <group-as name="tests" in-json="ARRAY"/>
                                <model>
                                        <define-field name="expression" as-type="string" min-occurs="1">
                                                <formal-name>Constraint test</formal-name>
                                                <description>A formal (executable) expression of a constraint</description>
                                        </define-field>
                                        <field ref="remarks" in-xml="WITH_WRAPPER"/>
                                </model>
                        </define-assembly>
                </model>
        </define-assembly>
        <define-assembly name="parameter-guideline">
                <formal-name>Guideline</formal-name>
                <description>A prose statement that provides a recommendation for the use of a parameter.</description>
                <model>
                        <define-field name="prose" as-type="markup-multiline" in-xml="UNWRAPPED" min-occurs="1">
                                <formal-name>Guideline Text</formal-name>
                                <description>Prose permits multiple paragraphs, lists, tables etc.</description>
                        </define-field>
                        <!-- <any/> -->
                </model>
        </define-assembly>

        <define-field name="parameter-value">
                <!-- CHANGED type from "markup-line" to "string" since this is intended to be a scalar value -->
                <formal-name>Parameter Value</formal-name>
                <description>A parameter value or set of values.</description>
        </define-field>

        <define-assembly name="parameter-selection">
                <formal-name>Selection</formal-name>
                <description>Presenting a choice among alternatives</description>
                <define-flag name="how-many" as-type="token">
                        <formal-name>Parameter Cardinality</formal-name>
                        <description>Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.</description>
                        <constraint>
                                <allowed-values allow-other="no">
                                        <enum value="one">Only one value is permitted.</enum>
                                        <enum value="one-or-more">One or more values are permitted.</enum>
                                </allowed-values>
                        </constraint>
                </define-flag>
                <model>
                        <define-field name="parameter-choice" as-type="markup-line" max-occurs="unbounded">
                                <formal-name>Choice</formal-name>
                                <description>A value selection among several such options</description>
                                <use-name>choice</use-name>
                                <json-value-key>value</json-value-key>
                                <!-- CHANGED "alternatives" to "choices" -->
                                <group-as name="choice" in-json="ARRAY"/>
                        </define-field>
                        <!-- <any/> -->
                </model>
                <remarks>
                        <p>A set of parameter value choices, that may be picked from to set the parameter value.</p>
                </remarks>
        </define-assembly>
        <define-flag name="depends-on" as-type="token">
                <!-- TODO: Work out cross-reference constraints -->
                <formal-name>Depends on</formal-name>
                <description>Another parameter invoking this one</description>
        </define-flag>
        <define-flag name="control-id" as-type="token">
                <formal-name>Control Identifier Reference</formal-name>
                <description>A reference to a control with a corresponding <code>id</code> value.</description>
        </define-flag>
</METASCHEMA>
