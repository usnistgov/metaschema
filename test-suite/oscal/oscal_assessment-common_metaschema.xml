<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../support/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:o="http://csrc.nist.gov/ns/oscal/example"
            xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
            xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../support/lib/metaschema.xsd">
   <schema-name>OSCAL Assessment Layer Format -- Common Modules</schema-name>
   <schema-version>1.0.0-milestone3</schema-version>
   <short-name>oscal-assessment-common</short-name>
   <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>
   <remarks>
      <p>This contains all modules common to the assessment plan, assessment results, and POAM models. </p>
      <p>The root of the OSCAL Assessment Plan format is <code>assessment-plan</code>.</p>
      <p>The root of the OSCAL Assessment Results format is <code>assessment-results</code>.</p>
      <p>The root of the OSCAL Plan of Action and Milestones (POA&amp;M) format is <code>plan-of-action-and-milestones</code>.</p>
   </remarks>
   <!-- IMPORT STATEMENTS -->
   <import href="oscal_control-common_metaschema.xml"/>
   <!--   <import href="oscal_implementation-common_metaschema.xml"/>-->
   <import href="oscal_ssp_metaschema.xml"/>
   <!--   <import href="oscal_metadata_metaschema.xml"/>-->
   <!-- TOP LEVEL ASSEMBLY -->
   <define-assembly name="assessment-common">
      <formal-name>Assessment Common</formal-name>
      <description>NOT TO BE USED FOR A BASE METASCHEMA ONLY FOR A MODULE</description>
      <root-name>assessment-common</root-name>
      <model>
         <assembly ref="import-ssp"/>
         <assembly ref="import-ap"/>
         <assembly ref="objectives"/>
         <assembly ref="assessment-subjects"/>
         <assembly ref="assets"/>
         <assembly ref="assessment-activities"/>
         <assembly ref="results"/>
      </model>
   </define-assembly>
   <!-- SSP Import -->
   <define-assembly name="import-ssp">
      <formal-name>Import System Security Plan</formal-name>
      <description>Used by the assessment plan and POA&amp;M to import information about the system.</description>
      <flag ref="href" required="yes"/>
      <model>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <!-- Assessment Plan Import -->
   <define-assembly name="import-ap">
      <formal-name>Import Assessment Plan</formal-name>
      <description>Used by assessment-results to import information about the original plan for assessing the system.</description>
      <flag ref="href" required="yes"/>
      <model>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <!-- ********** OBJECTIVES Assembly ********** -->
   <define-assembly name="objectives">
      <formal-name>Objectives of Assessment</formal-name>
      <description>Identifies the controls and control being assessed and their control objectives. In the assessment plans, these are the planned controls and objectives. In the assessment results, these are the actual controls and objectives, and reflects any changes from the plan.</description>
      <model>
         <define-field name="description"
                       min-occurs="0"
                       max-occurs="1"
                       in-xml="WITH_WRAPPER">
            <formal-name>description field</formal-name>
            <description>A human-readable description of assessment objectives.</description>
         </define-field>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <assembly ref="controls" min-occurs="1" max-occurs="unbounded">
            <group-as name="control-group" in-json="ARRAY"/>
         </assembly>
         <assembly ref="control-objectives" min-occurs="0" max-occurs="unbounded">
            <group-as name="control-objective-group" in-json="ARRAY"/>
         </assembly>
         <assembly ref="objective" min-occurs="0" max-occurs="1"/>
         <assembly ref="method" min-occurs="0" max-occurs="unbounded">
            <group-as name="method-definitions" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="controls">
      <formal-name>Assessed Controls</formal-name>
      <description>Identifies the controls being assessed. In the assessment plan, these are the planned controls. In the assessment results, these are the actual controls, and reflects any changes from the plan.</description>
      <model>
         <define-field name="description"
                       min-occurs="0"
                       max-occurs="1"
                       in-xml="WITH_WRAPPER">
            <formal-name>description field</formal-name>
            <description>A human-readable description of controls specified for assessment.</description>
         </define-field>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="all" min-occurs="0" max-occurs="1"/>
         <define-field name="include-control" min-occurs="0" max-occurs="unbounded">
            <formal-name>include-control field</formal-name>
            <description>Identifies a specific control to include.</description>
            <group-as name="include-controls" in-json="ARRAY"/>
         </define-field>
         <define-field name="exclude-control" min-occurs="0" max-occurs="unbounded">
            <formal-name>exclude-control field</formal-name>
            <description>Identifies a specific control to include.</description>
            <group-as name="exclude-controls" in-json="ARRAY"/>
         </define-field>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="control-objectives">
      <formal-name>Control Objectives</formal-name>
      <description>Identifies the control objectives of the assessment. In the assessment plan, these are the planned objectives. In the assessment results, these are the actual objectives, and reflects any changes from the plan.</description>
      <model>
         <define-field name="description"
                       min-occurs="0"
                       max-occurs="1"
                       in-xml="WITH_WRAPPER">
            <formal-name>description field</formal-name>
            <description>A human-readable description of assessment objectives specified for assessment.</description>
         </define-field>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="all" min-occurs="0" max-occurs="1"/>
         <define-field name="include-objective" min-occurs="0" max-occurs="unbounded">
            <formal-name>include-objective field</formal-name>
            <description>Identifies a specific control to include.</description>
            <group-as name="include-objectives" in-json="ARRAY"/>
         </define-field>
         <define-field name="exclude-objective" min-occurs="0" max-occurs="unbounded">
            <formal-name>exclude-objective field</formal-name>
            <description>Identifies a specific control to include.</description>
            <group-as name="exclude-objectives" in-json="ARRAY"/>
         </define-field>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="include-control">
      <formal-name>Include Control</formal-name>
      <description>Identifies an individual control to include.</description>
      <flag ref="control-id" required="yes"/>
   </define-field>
   <define-field name="exclude-control">
      <formal-name>Exclude Control</formal-name>
      <description>Identifies an individual control to exclude.</description>
      <flag ref="control-id" required="yes"/>
   </define-field>
   <define-field name="include-objective">
      <formal-name>Include Objective</formal-name>
      <description>Identifies an individual control objective to include.</description>
      <flag ref="objective-id" required="yes"/>
   </define-field>
   <define-field name="exclude-objective">
      <formal-name>Exclude Objective</formal-name>
      <description>Identifies an individual control objective to exclude.</description>
      <flag ref="objective-id" required="yes"/>
   </define-field>
   <define-assembly name="objective">
      <formal-name>Control Objective</formal-name>
      <description>A local definition of a control objective. Uses catalog syntax for control objective and assessment actions.</description>
      <flag ref="id" required="yes"/>
      <flag ref="control-id" required="yes"/>
      <model>
         <define-field name="description"
                       min-occurs="0"
                       max-occurs="1"
                       in-xml="WITH_WRAPPER">
            <formal-name>description field</formal-name>
            <description>A human-readable description of the defined objective.</description>
         </define-field>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <assembly ref="part" min-occurs="1" max-occurs="1"/>
         <field ref="assessment-method" min-occurs="0" max-occurs="unbounded">
            <group-as name="methods" in-json="ARRAY"/>
         </field>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="assessment-method">
      <formal-name>Assessment Method</formal-name>
      <description>Identifies a method for assessing the satisfaction of this objective.</description>
      <flag ref="method-uuid" required="yes"/>
   </define-field>
   <define-flag name="method-uuid" as-type="uuid">
      <formal-name>Method ID</formal-name>
      <description>Identifies the assessment method.</description>
   </define-flag>
   <define-assembly name="method">
      <formal-name>Assessment Method</formal-name>
      <description>A local definition of a control objective. Uses catalog syntax for control objective and assessment actions.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <define-field name="description"
                       min-occurs="0"
                       max-occurs="1"
                       in-xml="WITH_WRAPPER">
            <formal-name>description field</formal-name>
            <description>A human-readable description of the defined method.</description>
         </define-field>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <assembly ref="part" min-occurs="1" max-occurs="1"/>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <!-- ********** ASSESSMENT SUBJECT Assembly ********** -->
   <define-assembly name="include-subject">
      <formal-name>Included Assessment Subject</formal-name>
      <description>Identifies exactly what will be the focus of this assessment. Anything not explicitly defined is out-of-scope.</description>
      <define-flag name="name" required="yes">
         <formal-name>name flag</formal-name>
         <description>name flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="component">Component</enum>
               <enum value="inventory-item">Inventory Item</enum>
               <enum value="location">Location</enum>
               <enum value="party">Person to Interview</enum>
               <enum value="user">User</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <flag ref="class"/>
      <model>
         <define-field name="description"
                       min-occurs="1"
                       max-occurs="1"
                       in-xml="WITH_WRAPPER">
            <formal-name>description field</formal-name>
            <description>A human-readable description of subjects being included.</description>
         </define-field>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="all" min-occurs="0" max-occurs="1"/>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="exclude-subject">
      <formal-name>Excluded Assessment Subject</formal-name>
      <description>Identifies what is explicitly excluded from this assessment. Used to remove a subset of items from groups of explicitly included items. Also used to explicitly clarify off-limit items, such as hosts to avoid scanning.</description>
      <define-flag name="name" required="yes">
         <formal-name>name flag</formal-name>
         <description>name flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="component">Component</enum>
               <enum value="inventory-item">Inventory Item</enum>
               <enum value="location">Location</enum>
               <enum value="party">Person to Avoid Interviewing</enum>
               <enum value="user">User</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <flag ref="class"/>
      <model>
         <define-field name="description"
                       min-occurs="1"
                       max-occurs="1"
                       in-xml="WITH_WRAPPER">
            <formal-name>description field</formal-name>
            <description>A human-readable description of subjects being excluded.</description>
         </define-field>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="all" min-occurs="0" max-occurs="1"/>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="subject-reference">
      <formal-name>Identifies the Subject</formal-name>
      <description>A pointer to a resource based on its ID. Use type to indicate whether the identified resource is a component, inventory item, location, user, or something else.</description>
      <define-flag name="uuid-ref" required="yes">
         <formal-name>UUID Reference</formal-name>
         <description>A pointer to a component, inventory-item, location, party, user, or resource using it's UUID.</description>
      </define-flag>
      <define-flag name="type" required="yes">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="component">Component</enum>
               <enum value="inventory-item">Inventory Item</enum>
               <enum value="location">Location</enum>
               <enum value="party">Interview Party</enum>
               <enum value="user">User</enum>
               <enum value="resource">Resource or Artifact</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <model>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="prop" min-occurs="0" max-occurs="unbounded">
            <group-as name="props" in-json="ARRAY"/>
         </field>
      </model>
      <remarks>
         <p>The subject reference UUID could point to an item defined in the SSP, AP, or AR.</p>
         <p>Tools should check look for the ID in every file imported directly or indirectly.</p>
      </remarks>
   </define-assembly>
   <define-field name="all">
      <formal-name>All</formal-name>
      <description>A key word to indicate all </description>
   </define-field>
   <!-- ********** ASSET Assembly ********** -->
   <define-assembly name="assets">
      <formal-name>Assessment Assets</formal-name>
      <description>Identifies the assets used to perform this assessment, such as the assessment team, scanning tools, and assumptions.</description>
      <model>
         <assembly ref="tools" min-occurs="0" max-occurs="1"/>
         <assembly ref="origination" min-occurs="0" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <assembly ref="part" min-occurs="0" max-occurs="unbounded">
            <group-as name="parts" in-json="ARRAY"/>
            <remarks>
               <p>Provided to allow content such as assumptions and disclosures.</p>
            </remarks>
         </assembly>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="tools">
      <formal-name>Assessment Assets</formal-name>
      <description>The technology tools used by the assessor to perform the assessment, such as vulnerability scanners. In the assessment plan these are the intended tools. In the assessment results, these are the actual tools used, including any differences from the assessment plan.</description>
      <model>
         <assembly ref="component" min-occurs="0" max-occurs="unbounded">
            <group-as name="components" in-json="BY_KEY"/>
         </assembly>
      </model>
   </define-assembly>
   <define-assembly name="origination">
      <formal-name>Assessment Origination</formal-name>
      <description>Identifies the origination of network-based assessment activities, such as the IP address of the tool performing assessment scans.</description>
      <model>
         <field ref="title" min-occurs="1" max-occurs="1"/>
         <field ref="description" min-occurs="0" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>prop field ... </description>
            <group-as name="properties" in-json="ARRAY"/>
            <define-flag name="name">
               <formal-name>name flag</formal-name>
               <description>name flag ... </description>
               <constraint>
                  <allowed-values allow-other="yes">
                     <enum value="ipv4-address">Internet Protocol Address (Version 4)</enum>
                     <enum value="ipv6-address">Internet Protocol Address (Version 6)</enum>
                     <enum value="fqdn">Fully Qualified Domain Name</enum>
                  </allowed-values>
               </constraint>
            </define-flag>
         </define-field>
      </model>
   </define-assembly>
   <!-- ********** ASSESSMENT ACTIVITIES Assembly ********** -->
   <define-assembly name="assessment-activities">
      <formal-name>Assessment Activities</formal-name>
      <description>Identifies the assessment activities and schedule. In the assessment plan, these are planned activities. In the assessment results, these are the actual activities performed.</description>
      <model>
         <assembly ref="test-method" min-occurs="0" max-occurs="unbounded">
            <group-as name="test-methods" in-json="ARRAY"/>
         </assembly>
         <assembly ref="schedule" min-occurs="0" max-occurs="1"/>
         <assembly ref="include-activity" min-occurs="0" max-occurs="unbounded">
            <group-as name="include-activities" in-json="ARRAY"/>
         </assembly>
         <assembly ref="exclude-activity" min-occurs="0" max-occurs="unbounded">
            <group-as name="exclude-activities" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="test-method">
      <formal-name>Test Method</formal-name>
      <description>Identifies an individual test method.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="0" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="link" min-occurs="0" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </field>
         <assembly ref="test-step" min-occurs="0" max-occurs="unbounded">
            <group-as name="test-steps" in-json="ARRAY"/>
         </assembly>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="compare-to" as-type="string">
      <formal-name>Compare To</formal-name>
      <description>Typically used in when copying content from the assessment plan to the assessment results. The uuid should be changed in the assessment results file, and the compare-to field should be set to the original assessment plan uuid value. This enables the plan and results to be compared later to identify what changed between the two.</description>
   </define-field>
   <define-assembly name="test-step">
      <formal-name>Test Steps</formal-name>
      <description>Identifies an individual test step.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="sequence" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <field ref="role-id" min-occurs="0" max-occurs="unbounded">
            <group-as name="role-ids" in-json="ARRAY"/>
         </field>
         <field ref="party-uuid" min-occurs="0" max-occurs="unbounded">
            <group-as name="party-uuids" in-json="ARRAY"/>
         </field>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="sequence" as-type="integer">
      <formal-name>Sequence Number</formal-name>
      <description>Identifies the sequence number for the test step.</description>
   </define-field>
   <define-assembly name="schedule">
      <formal-name>Schedule</formal-name>
      <description>Identifies the schedule for the assessment activities.</description>
      <flag ref="uuid"/>
      <model>
         <assembly ref="task" min-occurs="1" max-occurs="unbounded">
            <group-as name="tasks" in-json="ARRAY"/>
         </assembly>
      </model>
   </define-assembly>
   <define-assembly name="task">
      <formal-name>Task</formal-name>
      <description>Identifies an individual task.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="0" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="start" min-occurs="0" max-occurs="1"/>
         <field ref="end" min-occurs="0" max-occurs="1"/>
         <field ref="activity-uuid" min-occurs="0" max-occurs="unbounded">
            <group-as name="activity-uuids" in-json="ARRAY"/>
         </field>
         <define-field name="role-id" min-occurs="0" max-occurs="unbounded">
            <formal-name>role-id field</formal-name>
            <description>Identifies roles associated with performing this task.</description>
            <group-as name="role-ids" in-json="ARRAY"/>
         </define-field>
         <define-field name="party-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>party-uuid field</formal-name>
            <description>Identifies people or organizations associated with performing this task.</description>
            <group-as name="party-uuids" in-json="ARRAY"/>
         </define-field>
         <define-field name="location-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>location-uuid field</formal-name>
            <description>Identifies locations associated with performing this task.</description>
            <group-as name="location-uuids" in-json="ARRAY"/>
         </define-field>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="start" as-type="dateTime-with-timezone">
      <formal-name>Start</formal-name>
      <description>Identifies the start of a task.</description>
   </define-field>
   <define-field name="end" as-type="dateTime-with-timezone">
      <formal-name>End</formal-name>
      <description>Identifies the end of a task.</description>
   </define-field>
   <define-field name="activity-uuid" as-type="uuid">
      <formal-name>Activity ID</formal-name>
      <description>Links the task to a defined activity.</description>
   </define-field>
   <define-assembly name="include-activity">
      <formal-name>Included Activity</formal-name>
      <description>Identifies an assessment activity. In the assessment plan, this is an intended/in-scope activity. In the assessment results, this identifies an activity that was actually performed.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <define-field name="role-id" min-occurs="0" max-occurs="unbounded">
            <formal-name>role-id field</formal-name>
            <description>Identifies roles associated with performing this activity.</description>
            <group-as name="role-ids" in-json="ARRAY"/>
         </define-field>
         <define-field name="party-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>party-uuid field</formal-name>
            <description>Identifies people or organizations associated with performing this activity.</description>
            <group-as name="party-uuids" in-json="ARRAY"/>
         </define-field>
         <define-field name="location-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>location-uuid field</formal-name>
            <description>Identifies locations associated with performing this activity.</description>
            <group-as name="location-uuids" in-json="ARRAY"/>
         </define-field>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="exclude-activity">
      <formal-name>Included Activity</formal-name>
      <description>Identifies an activity explicitly excluded from the assessment. In the assessment plan, this clarifies activities that are out-of-scope or prohibited. In the assessment results, this could be used to explicitly identify an activity that was planned, but not performed.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <define-field name="role-id" min-occurs="0" max-occurs="unbounded">
            <formal-name>role-id field</formal-name>
            <description>Identifies roles associated with this activity exclusion.</description>
            <group-as name="role-ids" in-json="ARRAY"/>
         </define-field>
         <define-field name="party-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>party-uuid field</formal-name>
            <description>Identifies people or organizations associated with this activity exclusion.</description>
            <group-as name="party-uuids" in-json="ARRAY"/>
         </define-field>
         <define-field name="location-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>location-uuid field</formal-name>
            <description>Identifies locations associated with this activity exclusion.</description>
            <group-as name="location-uuids" in-json="ARRAY"/>
         </define-field>
         <field ref="compare-to" min-occurs="0" max-occurs="1"/>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <!-- ********** RESULTS Assembly ********** -->
   <define-assembly name="results">
      <formal-name>Assessment Results</formal-name>
      <description>Used by the assessment results and POA&amp;M. In the assessment results, this identifies all of the assessment observations and findings, initial and residual risks, deviations, and disposition. In the POA&amp;M, this identifies initial and residual risks, deviations, and disposition.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="title" min-occurs="1" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <define-field name="start" min-occurs="1" max-occurs="1">
            <formal-name>start field</formal-name>
            <description>Date/time stamp identifying the start of the evidence collection reflected in these results.</description>
         </define-field>
         <define-field name="end" min-occurs="1" max-occurs="1">
            <formal-name>end field</formal-name>
            <description>Date/time stamp identifying the end of the evidence collection reflected in these results. In a continuous motoring scenario, this may contain the same value as start if appropriate.</description>
         </define-field>
         <assembly ref="finding" min-occurs="1" max-occurs="unbounded">
            <group-as name="findings" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="finding">
      <formal-name>Finding</formal-name>
      <description>Describes an individual finding.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="title" min-occurs="1" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
            <remarks>
               <p>For the FedRAMP SAR, must have prop @name='priority' @ns='fedramp', with a numeric value, where '1' is the highest priority.</p>
            </remarks>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <define-field name="date-time-stamp" min-occurs="1" max-occurs="1">
            <formal-name>date-time-stamp field</formal-name>
            <description>Date/time stamp identifying when the finding information was collected.</description>
         </define-field>
         <assembly ref="objective-status" min-occurs="0" max-occurs="1"/>
         <field ref="implementation-statement-uuid" min-occurs="0" max-occurs="1"/>
         <assembly ref="observation" min-occurs="0" max-occurs="unbounded">
            <group-as name="observations" in-json="ARRAY"/>
         </assembly>
         <field ref="threat-id" min-occurs="0" max-occurs="unbounded">
            <group-as name="threat-ids" in-json="ARRAY"/>
         </field>
         <assembly ref="risk" min-occurs="0" max-occurs="unbounded">
            <group-as name="risks" in-json="ARRAY"/>
         </assembly>
         <define-field name="party-uuid" min-occurs="0" max-occurs="unbounded">
            <formal-name>party-uuid field</formal-name>
            <description>The person who collected the evidence or made the observation.</description>
            <group-as name="party-uuids" in-json="ARRAY"/>
         </define-field>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="implementation-statement-uuid" as-type="uuid">
      <formal-name>Implementation Statement UUID</formal-name>
      <description>Identifies the implementation statement in the SSP to which this finding is related. </description>
   </define-field>
   <define-field name="date-time-stamp" as-type="dateTime-with-timezone">
      <formal-name>Date/Time Stamp</formal-name>
      <description>Date/time stamp identifying when the information was collected.</description>
   </define-field>
   <define-assembly name="objective-status">
      <formal-name>Implementation Status</formal-name>
      <description>Captures an assessors conclusions as to whether an objective is fully satisfied.</description>
      <flag ref="objective-id"/>
      <flag ref="control-id"/>
      <model>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="0" max-occurs="1"/>
         <field ref="result" min-occurs="0" max-occurs="1"/>
         <field ref="implementation-status" min-occurs="0" max-occurs="1"/>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="result">
      <formal-name>Result</formal-name>
      <description>A brief indication as to whether the objective is satisfied or not.</description>
      <flag ref="system"/>
   </define-field>
   <define-field name="implementation-status">
      <formal-name>Implementation Status</formal-name>
      <description>Identifies the implementation status of the control or control objective.</description>
      <flag ref="system"/>
   </define-field>
   <define-flag name="system" as-type="uri">
      <formal-name>Assessment System</formal-name>
      <description>Identifies the framework or rules to which this value conforms.</description>
      <constraint>
         <allowed-values allow-other="yes">
            <enum value="https://fedramp.gov">The value conforms to FedRAMP definitions.</enum>
            <enum value="https://www.nist.gov">A value conforms to NIST definitions.</enum>
         </allowed-values>
      </constraint>
   </define-flag>
   <define-assembly name="observation">
      <formal-name>Objective</formal-name>
      <description>Describes an individual observation.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="observation-method" min-occurs="1" max-occurs="unbounded">
            <group-as name="observation-methods" in-json="ARRAY"/>
         </field>
         <field ref="observation-type" min-occurs="0" max-occurs="unbounded">
            <group-as name="observation-types" in-json="ARRAY"/>
         </field>
         <field ref="assessor" min-occurs="0" max-occurs="unbounded">
            <group-as name="assessors" in-json="ARRAY"/>
         </field>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
            <remarks>
               <p>Identifies who was interviewed, or what was tested or inspected.</p>
            </remarks>
         </assembly>
         <define-field name="origin" min-occurs="0" max-occurs="unbounded">
            <formal-name>origin field</formal-name>
            <description>Identifies the source of the finding, such as a tool, interviewed person, or activity.</description>
            <group-as name="origins" in-json="ARRAY"/>
         </define-field>
         <assembly ref="relevant-evidence" min-occurs="0" max-occurs="unbounded">
            <group-as name="evidence-group" in-json="ARRAY"/>
         </assembly>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="relevant-evidence">
      <formal-name>Relevant Evidence</formal-name>
      <description>Links this observation to relevant evidence.</description>
      <flag ref="href" required="no">
         <remarks>
            <p>Links to evidence as URI. May use a URI fragment to point to a resource in the back-matter.</p>
         </remarks>
      </flag>
      <model>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="remarks"
                in-xml="WITH_WRAPPER"
                min-occurs="0"
                max-occurs="1"/>
      </model>
   </define-assembly>
   <define-field name="assessor">
      <formal-name>Assessor</formal-name>
      <description>Identifies an individual who gathered the evidence resulting in the observation or risk identification.</description>
      <define-flag name="party-uuid" required="yes">
         <formal-name>Party UUID</formal-name>
         <description>The UUID of the assessor who collected the evidence or made the observation.</description>
      </define-flag>
   </define-field>
   <define-field name="origin">
      <formal-name>Origin</formal-name>
      <description>Identifies the tool or activity that resulted in the observation.</description>
      <flag ref="uuid-ref" required="yes"/>
      <define-flag name="type" required="yes">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="no">
               <enum value="tool">An assessment tool, defined in the assets section of the assessment plan or results.</enum>
               <enum value="test-method">A test method defined in the assessment-activities section of the assessment plan or results.</enum>
               <enum value="task">A task defined in the schedule of the assessment plan or results.</enum>
               <enum value="included-activity">An assessment activity defined in the assessment-activities section of the assessment plan or results.</enum>
               <enum value="other">The UUID points elsewhere in the this file or an imported file.</enum>
            </allowed-values>
         </constraint>
      </define-flag>
   </define-field>
   <define-flag name="uuid-ref" as-type="uuid">
      <formal-name>UUID Reference</formal-name>
      <description>A pointer to a relevant item, using it's UUID.</description>
   </define-flag>
   <define-field name="observation-method">
      <formal-name>Observation Method</formal-name>
      <description>Identifies how the observation was made.</description>
      <constraint>
         <allowed-values target="." allow-other="yes">
            <enum value="EXAMINE">An inspection was performed.</enum>
            <enum value="INTERVIEW">An interview was performed.</enum>
            <enum value="TEST">A manual or automated test was performed.</enum>
            <enum value="TEST-MANUAL">A manual test was performed.</enum>
            <enum value="TEST-AUTOMATED">An automated test was performed.</enum>
            <enum value="MIXED">Only use for historic conversion of old assessment observations that may include a mix of methods.</enum>
         </allowed-values>
      </constraint>
   </define-field>
   <define-field name="observation-type">
      <formal-name>Observation Type</formal-name>
      <description>Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.</description>
      <constraint>
         <allowed-values target="." allow-other="yes">
            <enum value="ssp-statement-issue">A difference between the SSP implementation statement, and actual implementation.</enum>
            <enum value="control-objective">An observation about the status of a the associated control objective.</enum>
            <enum value="mitigation">A mitigating factor was identified.</enum>
            <enum value="finding">An assessment finding. Used for observations made by tools, penetration testing, and other means.</enum>
            <enum value="historic">An observation from a past assessment, which was converted to OSCAL at a later date.</enum>
         </allowed-values>
      </constraint>
   </define-field>
   <define-field name="threat-id">
      <formal-name>Threat ID</formal-name>
      <description>A pointer, by ID, to an externally-defined threat.</description>
      <define-flag name="system" required="yes">
         <formal-name>Threat Type Identification System</formal-name>
         <description>Specifies the source of the threat information.</description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="https://fedramp.gov">The value conforms to FedRAMP definitions.</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="uri" as-type="uri" required="no">
         <formal-name>URI</formal-name>
         <description>An optional location for the threat data, from which this ID originates.</description>
      </define-flag>
   </define-field>
   <define-assembly name="risk">
      <formal-name>Identified Risk</formal-name>
      <description>An identified risk.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <field ref="title" min-occurs="1" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="risk-metric" min-occurs="0" max-occurs="unbounded">
            <group-as name="risk-metrics" in-json="ARRAY"/>
         </field>
         <field ref="risk-statement" min-occurs="1" max-occurs="1"/>
         <assembly ref="mitigating-factor" min-occurs="0" max-occurs="unbounded">
            <group-as name="mitigating-factors" in-json="ARRAY"/>
         </assembly>
         <assembly ref="remediation" min-occurs="0" max-occurs="unbounded">
            <group-as name="remediation-group" in-json="ARRAY"/>
         </assembly>
         <field ref="risk-status" min-occurs="1" max-occurs="1"/>
         <field ref="closure-actions" min-occurs="0" max-occurs="1"/>
         <assembly ref="remediation-tracking" min-occurs="0" max-occurs="1"/>
         <!-- ** (PROP) PRIORITY NEEDS TO BE ADDRESSED HERE, NOT ELSEWHERE ** -->
         <field ref="party-uuid" min-occurs="0" max-occurs="unbounded">
            <group-as name="party-uuids" in-json="ARRAY"/>
         </field>
      </model>
      <remarks>
         <p>For the FedRAMP SAR, must have prop @name='risk-reduction-auto-approve' @ns='fedramp', with a value of "yes" or "no". If missing, or no value, the default is "no".</p>
      </remarks>
   </define-assembly>
   <define-field name="risk-metric">
      <formal-name>Risk Metric</formal-name>
      <description>An individual risk metric from a specified system.</description>
      <define-flag name="name" required="yes">
         <formal-name>name flag</formal-name>
         <description>name flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="impacted-control">Impacted Control</enum>
               <enum value="vulnerability-id">Vulnerability ID</enum>
               <enum value="source-id">Source ID</enum>
               <!-- Risk Metrics -->
               <enum value="likelihood">Likelihood</enum>
               <enum value="impact">Impact</enum>
               <enum value="risk">Risk</enum>
               <!-- CVSS Metrics Values -->
               <enum value="AV">Access Vector</enum>
               <enum value="AC">Access Complexity</enum>
               <enum value="Au">Authentication</enum>
               <enum value="C">Confidentiality Impact</enum>
               <enum value="I">Integrity Impact</enum>
               <enum value="A">Availability Impact</enum>
               <enum value="RL">Remediation Level</enum>
               <enum value="RC">Report Confidence</enum>
               <enum value="CDP">Collateral Damage Potential</enum>
               <enum value="TD">Target Distribution</enum>
               <enum value="CR">Confidentiality Requirement</enum>
               <enum value="IR">Integrity Requirement</enum>
               <enum value="AR">Availability Requirement</enum>
               <enum value="PR">Privileges Required</enum>
               <enum value="UI">User Interaction</enum>
               <enum value="S">Scope</enum>
               <enum value="E">Exploit Maturity</enum>
               <enum value="MAV">Modified Attack Vector</enum>
               <enum value="MAC">Modified Attack Complexity</enum>
               <enum value="MPR">Modified Privileges Required</enum>
               <enum value="MUI">Modified User Interaction</enum>
               <enum value="MS">Modified Scope</enum>
               <enum value="MC">Modified Confidentiality</enum>
               <enum value="MI">Modified Integrity</enum>
               <enum value="MA">Modified Availability</enum>
               <enum value="access-vector">Access Vector</enum>
               <enum value="access-complexity">Access Complexity</enum>
               <enum value="authentication">Authentication</enum>
               <enum value="confidentiality-impact">Confidentiality Impact</enum>
               <enum value="integrity-impact">Integrity Impact</enum>
               <enum value="availability-impact">Availability Impact</enum>
               <enum value="exploitability">Exploitability</enum>
               <enum value="remediation-level">Remediation Level</enum>
               <enum value="report-confidence">Report Confidence</enum>
               <enum value="collateral-damage-potential">Collateral Damage Potential</enum>
               <enum value="target-distribution">Target Distribution</enum>
               <enum value="confidentiality-requirement">Confidentiality Requirement</enum>
               <enum value="integrity-requirement">Integrity Requirement</enum>
               <enum value="availability-requirement">Availability Requirement</enum>
               <enum value="privileges-required">Privileges Required</enum>
               <enum value="user-interaction">User Interaction</enum>
               <enum value="scope">Scope</enum>
               <enum value="exploit-code-maturity">Exploit Code Maturity</enum>
               <enum value="modified-attack-vector">Modified Attack Vector</enum>
               <enum value="modified-attack-complexity">Modified Attack Complexity</enum>
               <enum value="modified-privileges-required">Modified Privileges Required</enum>
               <enum value="modified-user-interaction">Modified User Interaction</enum>
               <enum value="modified-scope">Modified Scope</enum>
               <enum value="modified-confidentiality">Modified Confidentiality</enum>
               <enum value="modified-integrity">Modified Integrity</enum>
               <enum value="modified-availability">Modified Availability</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="class">
         <formal-name>class flag</formal-name>
         <description>class flag ... </description>
         <constraint>
            <allowed-values allow-other="yes"><!-- For values related to initial and residual (mitigated) risk -->
               <enum value="initial">Initial</enum>
               <enum value="residual">Residual</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <define-flag name="system" as-type="string">
         <formal-name>System</formal-name>
         <description>Specifies the system represented by this risk metric.</description>
         <constraint>
            <allowed-values allow-other="yes"><!-- Other values -->
               <enum value="https://www.nist.gov"/>
               <enum value="https://fedramp.gov"/>
               <enum value="cve"/>
               <!-- To identify which CVSS values to use -->
               <enum value="CVSSv2"/>
               <enum value="CVSSv3"/>
               <enum value="CVSSv3.1"/>
            </allowed-values>
         </constraint>
      </define-flag>
   </define-field>
   <define-assembly name="remediation-tracking">
      <formal-name>Remediation Tracking</formal-name>
      <description>A log of events and actions taken towards the remediation of the associated risk.</description>
      <model>
         <assembly ref="tracking-entry" min-occurs="1" max-occurs="unbounded">
            <group-as name="tracking-entries" in-json="ARRAY"/>
         </assembly>
      </model>
   </define-assembly>
   <define-assembly name="tracking-entry">
      <formal-name>Tracking Entry</formal-name>
      <description>Individual remediation tracking entry, which logs an event or action taken towards the remediation of the associated risk.</description>
      <flag ref="uuid" required="yes"/>
      <define-flag name="type" required="no">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="vendor-check-in">Vendor Check-In</enum>
               <enum value="status-update">Status Update</enum>
               <enum value="milestone-complete">Milestone Complete</enum>
               <enum value="mitigation">Mitigation Implemented</enum>
               <enum value="remediated">Risk is Remediated</enum>
               <enum value="closed">Closed</enum>
               <enum value="dr-submission">Deviation Request Submission</enum>
               <enum value="dr-updated">Deviation Requested Updated</enum>
               <enum value="dr-approved">Deviation Request Approved</enum>
               <enum value="dr-rejected">Deviation Request Rejected</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <model>
         <field ref="date-time-stamp" min-occurs="1" max-occurs="1"/>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="remarks"
                min-occurs="0"
                max-occurs="1"
                in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-assembly name="required">
      <formal-name>Required</formal-name>
      <description>Identifies something required to achieve remediation.</description>
      <flag ref="uuid" required="yes"/>
      <model>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
            <remarks>
               <p>Identifies a subject associated with this requirement, such as a party, system component, or inventory-item.</p>
            </remarks>
         </assembly>
         <field ref="title" min-occurs="0" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <field ref="remarks"
                min-occurs="0"
                max-occurs="1"
                in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-field name="risk-status">
      <formal-name>Status</formal-name>
      <description>Describes the status of the associated risk.</description>
      <constraint>
         <allowed-values target="." allow-other="yes">
            <enum value="open">Open</enum>
            <enum value="closed">Closed</enum>
         </allowed-values>
      </constraint>
   </define-field>
   <define-field name="closure-actions" as-type="markup-multiline">
      <formal-name>Closer Actions</formal-name>
      <description>Describes the actions taken that resulted in the closure of the identified risk.</description>
   </define-field>
   <define-assembly name="mitigating-factor">
      <formal-name>Mitigating Factor</formal-name>
      <description>Describes a mitigating factor with an optional link to an implementation statement in the SSP.</description>
      <flag ref="uuid" required="yes"/>
      <flag ref="implementation-uuid" required="no"/>
      <model>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <assembly ref="subject-reference" min-occurs="0" max-occurs="unbounded">
            <group-as name="subject-references" in-json="ARRAY"/>
            <remarks>
               <p>Links identifiable elements of the system to this mitigating factor, such as an inventory-item or component.</p>
            </remarks>
         </assembly>
      </model>
   </define-assembly>
   <define-assembly name="remediation">
      <formal-name>Remediation</formal-name>
      <description>Describes either recommendation or an actual plan for remediating the risk.</description>
      <flag ref="uuid" required="yes"/>
      <define-flag name="type" required="no">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="recommendation">Recommended Remediation</enum>
               <enum value="planned">Planned Remediation</enum>
            </allowed-values>
         </constraint>
      </define-flag>
      <model>
         <field ref="title" min-occurs="1" max-occurs="1"/>
         <field ref="description" min-occurs="1" max-occurs="1"/>
         <define-field name="prop" min-occurs="0" max-occurs="unbounded">
            <formal-name>prop field</formal-name>
            <description>Provided as means of extending the OSCAL syntax.</description>
            <group-as name="properties" in-json="ARRAY"/>
         </define-field>
         <assembly ref="annotation" min-occurs="0" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
            <remarks>
               <p>Provided as means of extending the OSCAL syntax.</p>
            </remarks>
         </assembly>
         <define-field name="remediation-origin" min-occurs="0" max-occurs="unbounded">
            <formal-name>remediation-origin field</formal-name>
            <description>Points to the source of the recommendation</description>
            <group-as name="origins" in-json="ARRAY"/>
         </define-field>
         <assembly ref="required" min-occurs="0" max-occurs="unbounded">
            <group-as name="requirements" in-json="ARRAY"/>
         </assembly>
         <assembly ref="schedule" min-occurs="0" max-occurs="1"/>
         <field ref="remarks"
                min-occurs="0"
                max-occurs="1"
                in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-field name="remediation-origin">
      <formal-name>Remediation Origin</formal-name>
      <description>Points to the source of the remediation recommendation or plan</description>
      <flag ref="uuid-ref" required="yes"/>
      <define-flag name="type">
         <formal-name>type flag</formal-name>
         <description>type flag ... </description>
         <constraint>
            <allowed-values allow-other="yes">
               <enum value="party">The UUID of the person or organization who made the recommendation</enum>
               <enum value="tool">The UUID of the tool that made the recommendation</enum>
            </allowed-values>
         </constraint>
      </define-flag>
   </define-field>
   <define-field name="risk-statement" as-type="markup-multiline">
      <formal-name>Risk Statement</formal-name>
      <description>Describes the risk.</description>
   </define-field>
   <define-flag name="implementation-uuid" as-type="uuid">
      <formal-name>Implementation UUID</formal-name>
      <description>Points to an implementation statement in the SSP.</description>
   </define-flag>
   <define-flag name="objective-id" as-type="NCName">
      <formal-name>Objective ID</formal-name>
      <description>Points to an assessment objective.</description>
   </define-flag>
</METASCHEMA>
