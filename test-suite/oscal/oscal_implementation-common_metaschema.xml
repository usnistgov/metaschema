<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../toolchains/xslt-M4/validate/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
            xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../toolchains/xslt-M4/validate/metaschema.xsd"
            abstract="yes">
   <schema-name>OSCAL Implementation Common Information</schema-name>
   <schema-version>1.0.0-milestone3</schema-version>
   <short-name>oscal-implementation-common</short-name>
   <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>
   <import href="oscal_metadata_metaschema.xml"/>

   <define-flag name="component-type" as-type="string">
      <formal-name>Component Type</formal-name>
      <description>A category describing the purpose of the component.</description>
      <constraint>
         <allowed-values allow-other="yes">
            <enum value="software">Any software, operating system, or firmware</enum>
            <enum value="hardware"/>
            <enum value="service">A service that may provide APIs.</enum>
            <enum value="interconnection">A connection to something outside this system.</enum>
            <enum value="policy"/>
            <enum value="process"/>
            <enum value="procedure"/>
            <enum value="plan"/>
            <enum value="guidance">Any guideline or recommendation</enum>
            <enum value="standard"/>
            <enum value="validation">An external assessment performed on some other component, that has been validated by a third-party.</enum>
         </allowed-values>
      </constraint>
   </define-flag>
   <define-flag name="source" as-type="uri-reference">
      <formal-name>Source Resource Reference</formal-name>
      <description>A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.</description>
   </define-flag>
   <define-flag name="control-id" as-type="NCName">
      <formal-name>Control Identifier Reference</formal-name>
      <description>A reference to a control identifier.</description>
   </define-flag>
   <define-assembly name="only-statement">
      <formal-name>Specific Statement</formal-name>
      <description>Describes which specific statements are addressed by a requirement, by pointing to a specific requirement statement within a control.</description>
      <json-key flag-name="statement-id"/>
      <flag ref="statement-id" required="yes">
         <remarks>
            <p>A reference to the specific implemented statement.</p>
         </remarks>
      </flag>
      <model>
         <field ref="description"/>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
            <!-- TODO: Model specific link relationships -->
         </field>
         <!--            <assembly ref="using"/>
-->
         <!-- TODO: Implement parameters -->
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-flag name="statement-id" as-type="NCName">
      <formal-name>Control Statement Reference</formal-name>
      <description>A reference to a control statement by its identifier</description>
   </define-flag>
   <define-assembly name="incorporates-component">
      <formal-name>Incorporates Component</formal-name>
      <description>TBD</description>
      <json-key flag-name="component-uuid"/>
      <define-flag required="yes" name="component-uuid" as-type="uuid">
         <formal-name>Component Reference</formal-name>
         <description>A reference to a component by its identifier</description>
      </define-flag>
      <model>
         <field ref="description" min-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="responsible-role">
      <formal-name>Responsible Role</formal-name>
      <description>A reference to one or more roles with responsibility for performing a function relative to the control.</description>
      <json-key flag-name="role-id"/>
      <define-flag required="yes" name="role-id" as-type="NCName">
         <formal-name>Responsible Role ID</formal-name>
         <description>The role that is responsible for the business function.</description>
      </define-flag>
      <model>
         <field ref="property" max-occurs="unbounded">
            <use-name>prop</use-name>
            <group-as name="properties" in-json="ARRAY"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations" in-json="ARRAY"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links" in-json="ARRAY"/>
         </field>
         <field ref="party-uuid" max-occurs="unbounded">
            <group-as name="party-uuids" in-json="ARRAY"/>
         </field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-assembly name="set-parameter">
      <formal-name>Set Parameter Value</formal-name>
      <description>Identifies the parameter that will be set by the enclosed value.</description>
      <json-key flag-name="param-id"/>
      <flag ref="param-id" required="yes"/>
      <model>
         <define-field name="parameter-value" as-type="string" min-occurs="1" max-occurs="unbounded">
            <!-- CHANGED type from "markup-line" to "string" since this is intended to be a scalar value -->
            <formal-name>Parameter Value</formal-name>
            <description>A parameter value or set of values.</description>
            <use-name>value</use-name>
            <group-as name="values" in-json="ARRAY"/>
         </define-field>
      </model>
   </define-assembly>
   <!-- ===== FLAGS ===== -->
   <define-flag name="param-id" as-type="NCName">
      <formal-name>Parameter ID</formal-name>
      <description>A reference to a parameter within a control, who's catalog has been imported into the current implementation context.</description>
      <example>
         <set-param xmlns="http://csrc.nist.gov/ns/oscal/example" param-id="ac-2_prm_2">
            <enum>System ISSO</enum>
         </set-param>
      </example>
   </define-flag>
</METASCHEMA>
