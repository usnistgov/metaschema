<?xml version="1.0" encoding="UTF-8"?>
<!-- OSCAL CATALOG METASCHEMA -->
<!-- validate with XSD and Schematron (linked) -->
<?xml-model href="../../toolchains/xslt-proto-v04/validate/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/css" href="../../support/lib/metaschema-author.css" title="Author" alternate="no"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../support/lib/metaschema.xsd"
   xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
   xmlns:o="http://csrc.nist.gov/ns/oscal/example">
   <schema-name>OSCAL Document Metadata Description</schema-name>
   <schema-version>1.0.0-milestone2</schema-version>
   <short-name>oscal-metadata</short-name>
   <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>

   
   
   <define-assembly name="metadata">
      <formal-name>Publication metadata</formal-name>
      <description>Provides information about the publication and availability of the containing document.</description>
      <root-name>metadata</root-name>
      <model>
         <field ref="title" min-occurs="1"/>
         <field ref="published"/>
         <field ref="last-modified" min-occurs="1"/>
         <field ref="version" min-occurs="1"/>
         <field ref="oscal-version" min-occurs="1"/>
         <assembly ref="revision" max-occurs="unbounded">
            <group-as name="revision-history" in-xml="GROUPED"/>
         </assembly>
         <field ref="doc-id" max-occurs="unbounded">
            <group-as name="document-ids"/>
         </field>
         <define-field name="prop" max-occurs="unbounded">
            <formal-name>Property</formal-name>
            <description>A property or characteristic of the control.</description>
            <group-as name="properties"/>
            <flag ref="id"/>
            <flag ref="ns"/>
            <flag ref="class"/>
            <define-flag name="name">
               <formal-name>Property Name</formal-name>
               <description>Indicates a use, purpose or classification for the property.</description>
               <constraint>
               <allowed-values allow-other="yes">
                  <enum value="keywords">Used to provide a listing of keywords. This is typically used on a <code>prop</code> in the <code>metadata</code> to provide keywords for the document.</enum>
               </allowed-values>
               </constraint>
            </define-flag>
         </define-field>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
         </field>
         <assembly ref="role" max-occurs="unbounded">
            <group-as name="roles"/>
         </assembly>
         <assembly ref="location" max-occurs="unbounded">
            <group-as name="locations"/>
         </assembly>
         <assembly ref="party" max-occurs="unbounded">
            <group-as name="parties"/>
         </assembly>
         <assembly ref="responsible-party" max-occurs="unbounded">
            <group-as name="responsible-parties" in-json="BY_KEY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-assembly name="back-matter">
      <formal-name>Back matter</formal-name>
      <description>A collection of citations and resource references.</description>
      <root-name>back-matter</root-name>
      <model><!--<assemblies named="section"/>-->
         <assembly ref="resource" max-occurs="unbounded">
            <group-as name="resources"/>
         </assembly>
      </model>
      <remarks>
         <p>Provides a collection of identified <code>citation</code> and <code>resource</code> objects that can be referenced by a <code>link</code> with a <code>rel</code> value of "reference" and an <code>href</code> value that is a fragment "#" followed by a reference to a citation identifier. A <code>citation</code> can reference a <code>resource</code> by specifying a local target value using the same fragment-identifier approach.</p>
      </remarks>
      <example>
         <description>Use of link, citation, and resource</description>
         <remarks>
            <p>The following is a contrived example to show the use of link, citation, and
               resource.</p>
         </remarks>
         <o:profile>
            <o:metadata>
              <o:link rel="citation" href="#resource1">My citation</o:link>
            </o:metadata>
            <o:back-matter>
               <o:resource id="resource1">
                  <o:rlink href="https://example.org/some-resource"/>
               </o:resource>
            </o:back-matter>
         </o:profile>
      </example>
   </define-assembly>
   <define-assembly name="revision">
      <formal-name>Revision History Entry</formal-name>
      <description>An entry in a sequential list of revisions to the containing document in reverse chronological order (i.e., most recent previous revision first).</description>
      <model>
         <field ref="title"/>
         <field ref="published"/>
         <field ref="last-modified"/>
         <field ref="version"/>
         <field ref="oscal-version"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
<!-- Here we have an entire local declaration to support a simple constraint on @ref.
         Let's consider instead elements 'constrain field' and 'constrain flag' that would layer
         onto referenced declarations instead of replacing them.
         
         So this would be:
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
            <constrain flag="rel">
              <allowed-values>
                 <enum value="source">Indicates that the href points to the source resource for the revision entry.</enum>
              </allowed-values>
            </constrain>
         </field>
         Such constraints can map straight up to Schematron/JSONatron rules
         
         Then we can extend 'constrain' to support other tests -
         low-hanging fruit for such tests can be found in the old OSCAL declarations logic.
         
         These include
           tests for uniqueness/distinctiveness across scope
           
                  
         
         -->
         <define-field name="link" max-occurs="unbounded">
            <formal-name>Link</formal-name>
            <description>A reference to a local or remote resource</description>
            <json-value-key>text</json-value-key>
            <group-as name="links"/>
            <flag ref="href" required="yes"/>
            <flag ref="media-type"/>
            <define-flag name="rel" as-type="NCName">
               <formal-name>Relation</formal-name>
               <description>Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.</description>
               <constraint>
                  <allowed-values>
                     <enum value="source">Indicates that the href points to the source resource for the revision entry.</enum>
                  </allowed-values>
               </constraint>
               <remarks>
                  <p>TO DO: discuss IANA link relation registry.</p>
               </remarks>
            </define-flag>
         </define-field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
      <remarks>
         <p>While <code>published</code>, <code>last-modified</code>, <code>oscal-version</code>, and <code>version</code> are not required, values for these entries should be provided if the information is known. For a revision entry to be considered valid, at least one of the following items must be provided: <code>published</code>, <code>last-modified</code>, <code>version</code>, or <code>link</code>.</p>
      </remarks>
   </define-assembly>
   <define-field name="link" as-type="markup-line">
      <formal-name>Link</formal-name>
      <description>A reference to a local or remote resource</description>
      <json-value-key>text</json-value-key>
      <flag ref="href" required="yes"/>
      <flag ref="rel"/>
      <flag ref="media-type"/>
      <remarks>
         <p>This is a rough analog to an HTML anchor (<code>a</code>), except this is a line-oriented (block)
        element.</p>
         <p>The <code>href</code> must point to a local or remote resource. If a local resource is used, this will be indicated by a fragment "#" followed by an identifier which references an identified <code>citation</code> or <code>resource</code> in the document's <code>back-matter</code>. If a remote resource is used, the <code>href</code> value will be an absolute or relative URI pointing to the location of the referenced resource. A relative URI can be resolved relative to the location of the document containing the link.</p>
         <p>To provide a cryptographic hash for a remote target resource, a local reference to a <code>resource</code> is needed. The resource allows one or more hash values to be provided using the <code>rlink</code>
            <code>hash</code> object.</p>
         <p>The <code>media-type</code> provides a hint about the content model of the referenced resource. A valid entry from the <a href="https://www.iana.org/assignments/media-types/media-types.xhtml">IANA Media Types registry</a>
         </p>
      </remarks>
      <example>
         <description>Providing for link integrity</description>
         <remarks>
            <p>The following is a contrived example to show the use of link, citation, and resource.</p>
         </remarks>
         <o:oscal>
            <o:link rel="reference" href="#resource1">My Hashed Resource</o:link>
        ...snip...
        <o:back-matter>
               <o:resource id="resource1">
                  <o:rlink href="https://example.org/some-resource">
                     <o:hash algorithm="sha512">C2E9C1..snip..F88D2E</o:hash>
                  </o:rlink>
               </o:resource>
            </o:back-matter>
         </o:oscal>
      </example>
   </define-field>
   <define-field name="published" as-type="dateTime-with-timezone">
      <formal-name>Publication Timestamp</formal-name>
      <description>The date and time this document was published.</description>
      <remarks>
         <p>This value represents the point in time when the OSCAL document was published. The date value must be an ISO 8601 formatted date with full time and time zone indicated. Ordinarily, a date value will be machine generated at time of creation or modification.</p>
         <p>In some cases, an OSCAL document may be derived from some source material in a different format. In such a case, the last-modified-date value should indicate the modification time of the OSCAL document, not the source material. (The nominal publication date of the original source material can be captured as a named property or custom metadata construct.)</p>
         <p>A publisher of OSCAL content can use this data point along with its sibling <code>last-modified</code> to establish commonality across OSCAL instances that are intended to be considered as successive <q>current versions</q> of a given publication.</p>
      </remarks>
   </define-field>
   <define-field name="last-modified" as-type="dateTime-with-timezone">
      <formal-name>Last modified timestamp</formal-name>
      <description>Date and time of last modification.</description>
      <remarks>
         <p>This value represents the point in time when the OSCAL document was last updated. The date value must be an ISO 8601 formatted date with full time and time zone indicated. Ordinarily, a date value will be machine generated at time of creation or modification.</p>
         <p>In some cases, an OSCAL document may be derived from some source material in a different format. In such a case, the last-modified value should indicate the modification time of the OSCAL document, not the source material.</p>
      </remarks>
   </define-field>
   <define-field name="version">
      <formal-name>Document version</formal-name>
      <description>The version of the document content.</description>
      <remarks>
         <p>A string indicating the document's version, by release number, date, or other identifier. This version is typically set by the document owner or by the tool used to maintain the content.</p>
      </remarks>
   </define-field>
   <define-field name="oscal-version">
      <formal-name>OSCAL version</formal-name>
      <description>OSCAL model version.</description>
      <remarks>
         <p>Indicates the version of the OSCAL model to which this data set conforms, for example
      <q>1.0-M1</q>.</p>
      </remarks>
   </define-field>
   <define-field name="doc-id">
      <formal-name>Document Identifier</formal-name>
      <description>A document identifier qualified by an identifier <code>type</code>.</description>
      <json-value-key>identifier</json-value-key>
      <define-flag name="type" required="yes">
         <formal-name>Document Identifier Type</formal-name>
         <description>Qualifies the kind of document identifier.</description>
         <constraint>
         <allowed-values allow-other="yes">
            <enum value="doi">A <a href="https://www.doi.org/hb.html">Digital Object Identifier</a> (DOI); use is preferred, since this allows for retrieval of a full bibliographic record.</enum>
         </allowed-values>
         </constraint>
      </define-flag>
      <remarks>
         <p>A document identifier or name, qualified by a <code>type</code> that indicates the naming system of the identifier. A document identifier may provide a hint to the persistent location of <q>the same</q> or <q>another version</q> of the document.</p>
         <p>Specific usage rules, nomenclatures, and recognized file types (e.g., DOIs, CMS locators, etc.) may be defined at application level. The value of this field may also be a hash or checksum.</p>
      </remarks>
   </define-field>
   <define-flag name="type" as-type="string">
      <formal-name>Type</formal-name>
      <description>Indicating the type of identifier, address, email or other data item.</description>
      <remarks>
         <p>Generally, this flag is used to relate to schemes and taxonomies defined outside the OSCAL application in some public form; i.e. they can be looked up. The values may be constrained to a locally defined list.</p>
      </remarks>
   </define-flag>
   <define-field name="prop">
      <formal-name>Property</formal-name>
      <description>A value with a name, attributed to the containing control, part, or group.</description>
      <json-value-key flag-name="name"/>
      <flag ref="id"/>
      <flag ref="ns"/>
      <flag ref="class"/>
      <define-flag name="name" required="yes">
         <formal-name>Property Name</formal-name>
         <description>Indicates a use, purpose or classification for the property.</description>
         <constraint>
         <allowed-values allow-other="yes">
            <enum value="marking">A label or descriptor that is tied to a sensitivity or classification marking system. An optional class can be used to define the specific marking system used for the associated value.</enum>
         </allowed-values>
         </constraint>
      </define-flag>
      <remarks>
         <p>Properties permit the deployment and management of arbitrary controlled values, with and among control objects (controls, parts, and extensions), for any purpose useful to an application or implementation of those controls. Typically, properties will be used to sort, select, order, and arrange controls or relate them to one another or to class hierarchies, taxonomies, or external authorities.</p>
         <p>The value of a property is a simple scalar value or list of values.</p>
         <p>The lexical composition of properties may be constrained by external
         processes to ensure consistency.</p>
         <p>Because properties are often used as selectors or identifiers for OSCAL operations, their
        values can be expected frequently to be normalized (e.g., with respect to whitespace) in
        use; however, this is application defined.</p>
      </remarks>
   </define-field>
   <define-assembly name="annotation">
      <formal-name>Annotation</formal-name>
      <description>A name/value pair with optional explanatory remarks.</description>
      <!-- TODO: Add support for this -->
<!--      <json-value-key key-flag-name="name" value-flag-name="value" /> -->
      <flag ref="name" required="yes"/>
      <flag ref="id"/>
      <flag ref="ns"/>
      <define-flag name="value" as-type="string">
         <formal-name>Value</formal-name>
         <description>Indicates the value of the characteristic.</description>
      </define-flag>
      <model>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
      <remarks>
         <p>Annotations permit the deployment and management of arbitrary controlled values for any purpose useful to an application or implementation scenario.</p>
         <p>The <code>value</code> (flag) of an annotation is a simple scalar value or list of values. The body of the annotation offers remarks in explanation of or reference to this value.</p>
      </remarks>
   </define-assembly>
   <define-flag name="name" as-type="NCName">
      <formal-name>Name</formal-name>
      <description>Identifying the purpose and intended use of the property, part or other object.</description>
      <remarks>
         <p>This flag is intended to be used as a control point for validation of properties and parts
      with respect to constraints related to local semantics. A name is not necessarily expected to be unique,
      even within the scope of the parent (containing) structure. In some local applications, it is possible for a name to be unique and uniqueness of a name can be validated in such cases.</p>
         <p>The definition of a name is subject to its namespace, offered by an <code>ns</code> flag (q.v.). When <code>ns</code> is not given, the namespace is assumed to be <q>oscal</q> and the name should be one of the recognized values for names
      in OSCAL.</p>
      </remarks>
   </define-flag>
   <define-flag name="ns" as-type="string">
      <formal-name>Namespace</formal-name>
      <description>A namespace qualifying the name.</description>
      <remarks>
         <p>Identifies an organization or compliance regime defining the information needs (requirements) addressed by
      an object. When this attribute is not given, its value should be assumed to be <code>oscal</code> and the name should be a name defined by this specification.</p>
      </remarks>
   </define-flag>
   <define-flag name="class" as-type="NCName">
      <formal-name>Class</formal-name>
      <description>Indicating the type or classification of the containing object</description>
      <remarks>
         <p>A <code>class</code> can be used in validation rules to express extra constraints over items of a specific <code>class</code> value. Some objects where this flag appears also permit a <code>name</code> and a <code>ns</code> to be assigned, which can provide for more rigor in validation.</p>
      </remarks>
   </define-flag>
   <define-assembly name="location">
      <formal-name>Location</formal-name>
      <description>A location, with associated metadata that can be referenced.</description>
      <flag ref="id"/>
      <model>
         <assembly ref="address" min-occurs="1"/>
         <field ref="email" max-occurs="unbounded">
            <group-as name="email-addresses"/>
         </field>
         <field ref="phone" max-occurs="unbounded">
            <group-as name="telephone-numbers"/>
         </field>
         <field ref="url" max-occurs="unbounded">
            <group-as name="URLs"/>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
         </field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-field name="location-id" as-type="NCName">
      <formal-name>Location Reference</formal-name>
      <description>References a <code>location</code> defined in <code>metadata</code>.</description>
   </define-field>
   <define-assembly name="party">
      <formal-name>Party (organization or person)</formal-name>
      <description>A responsible entity, either singular (an organization or person) or collective (multiple persons)</description>
      <flag ref="id"/>
      <model>
         <assembly ref="person" max-occurs="unbounded">
            <group-as name="persons"/>
         </assembly>
         <assembly ref="org"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
         </field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
      <remarks>
         <p>As contents one of <code>org</code> or <code>person</code> is required, or both; there may be only one <code>org</code>, but many <code>person</code>s.</p>
         <p>Note that persons can also be indicated with organizational affiliations by using
        <code>orgname</code> inside <code>person</code>. Contact information in that
        case belongs to the person, not the organization: use <code>org</code> when an
      organization as such serves as a documented party.</p>
      </remarks>
   </define-assembly>
   <define-field name="party-id" as-type="NCName">
      <formal-name>Party Reference</formal-name>
      <description>References a <code>party</code> defined in <code>metadata</code>.</description>
   </define-field>
   <define-assembly name="person">
      <formal-name>Person</formal-name>
      <description>A person, with contact information</description>
      <model>
         <field ref="person-name"/>
         <field ref="short-name"/>
         <field ref="org-name">
            <!--<description>Affiliated organization</description>-->
         </field>
         <field ref="person-id" max-occurs="unbounded">
            <group-as name="person-ids"/>
         </field>
         <field ref="org-id" max-occurs="unbounded">
            <group-as name="organization-ids"/>
         </field>
         <assembly ref="address" max-occurs="unbounded">
            <group-as name="addresses"/>
         </assembly>
         <field ref="location-id" max-occurs="unbounded">
            <group-as name="location-ids"/>
         </field>
         <field ref="email" max-occurs="unbounded">
            <group-as name="email-addresses"/>
         </field>
         <field ref="phone" max-occurs="unbounded">
            <group-as name="telephone-numbers"/>
         </field>
         <field ref="url" max-occurs="unbounded">
            <group-as name="URLs"/>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
         </field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-assembly name="org">
      <formal-name>Organization</formal-name>
      <description>An organization or legal entity (not a person), with contact information</description>
      <model>
         <field ref="org-name" min-occurs="1"/>
         <field ref="short-name"/>
         <field ref="org-id" max-occurs="unbounded">
            <group-as name="organization-ids"/>
         </field>
         <assembly ref="address" max-occurs="unbounded">
            <group-as name="addresses"/>
         </assembly>
         <field ref="location-id" max-occurs="unbounded">
            <group-as name="location-ids"/>
         </field>
         <field ref="email" max-occurs="unbounded">
            <group-as name="email-addresses"/>
         </field>
         <field ref="phone" max-occurs="unbounded">
            <group-as name="telephone-numbers"/>
         </field>
         <field ref="url" max-occurs="unbounded">
            <group-as name="URLs"/>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
         </field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>
   <define-field name="person-id">
      <formal-name>Personal Identifier</formal-name>
      <description>An identifier for a person (such as an ORCID) using a designated scheme.</description>
      <json-value-key>id</json-value-key>
      <flag ref="type"/>
   </define-field>
   <define-field name="org-id">
      <formal-name>Organization Identifier</formal-name>
      <description>An identifier for an organization using a designated scheme.</description>
      <json-value-key>id</json-value-key>
      <flag ref="type"/>
   </define-field>
   <define-assembly name="rlink">
      <formal-name>Resource link</formal-name>
      <description>A pointer to an external copy of a document with optional hash for verification</description>
      <flag ref="href" required="yes"/>
      <flag ref="media-type"/>
      <model>
         <field ref="hash" max-occurs="unbounded">
            <group-as name="hashes"/>
         </field>
      </model>
      <remarks>
         <p>This is different from unstructured <code>link</code>, which makes no provision for a hash or formal title. It is also different from the element of the same name once proposed for HTML.</p>
      </remarks>
   </define-assembly>
   <define-flag name="rel" as-type="NCName">
      <formal-name>Relation</formal-name>
      <description>Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.</description>
      <remarks>
         <p>TO DO: discuss IANA link relation registry.</p>
      </remarks>
   </define-flag>
   <define-flag name="media-type" as-type="string">
      <formal-name>Media type</formal-name>
      <description>Describes the media type of the linked resource</description>
      <remarks>
         <p>TO DO: discuss IANA media type registry.</p>
      </remarks>
   </define-flag>
   <define-field name="person-name">
      <formal-name>Person Name</formal-name>
      <description>Full (legal) name of an individual</description>
   </define-field>
   <define-field name="org-name">
      <formal-name>Organization Name</formal-name>
      <description>Full (legal) name of an organization</description>
      <remarks>
         <p>Only when this element is used directly within <code>org</code> can it be accepted of the name of the thing to which it is attached. This element may also be used directly on <code>person</code> to name an affiliated organization.</p>
         <p>
            <code>href</code> can be used to provide external links or internal links to other elements. The sibling <code>org-id</code> element
        (similarly for <em>affiliated</em> organizations) can also be used to link (for example to organizations listed elsewhere as parties.)</p>
      </remarks>
   </define-field>
   <define-field name="short-name">
      <formal-name>short-name</formal-name>
      <description>A common name, short name or acronym</description>
      <remarks>
         <p>This element is not expected to be used to identify individual persons, but rather an
        organization or system.</p>
      </remarks>
   </define-field>
   <define-assembly name="address">
      <formal-name>Address</formal-name>
      <description>A postal address.</description>
      <define-flag name="type">
         <formal-name>Type</formal-name>
         <description>Indicates the type of address.</description>
         <constraint>
         <allowed-values allow-other="yes">
            <enum value="home">A home address.</enum>
            <enum value="work">A work address.</enum>
         </allowed-values>
         </constraint>
      </define-flag>
      <model>
         <field ref="addr-line" max-occurs="unbounded">
            <group-as name="postal-address"/>
         </field>
         <field ref="city"/>
         <field ref="state"/>
         <field ref="postal-code"/>
         <field ref="country"/>
         <!-- More address stuff -->
      </model>
   </define-assembly>
   <define-field name="addr-line">
      <formal-name>Address line</formal-name>
      <description>A single line of an address.</description>
   </define-field>
   <define-field name="city">
      <formal-name>City</formal-name>
      <description>City, town or geographical region for mailing address</description>
   </define-field>
   <define-field name="state">
      <formal-name>State</formal-name>
      <description>State, province or analogous geographical region for mailing address</description>
   </define-field>
   <define-field name="postal-code">
      <formal-name>Postal Code</formal-name>
      <description>Postal or ZIP code for mailing address</description>
   </define-field>
   <define-field name="country">
      <formal-name>Country</formal-name>
      <description>Country for mailing address</description>
   </define-field>
   <define-field name="email" as-type="email">
      <formal-name>Email</formal-name>
      <description>Email address</description>
   </define-field>
   <define-field name="phone">
      <formal-name>Telephone</formal-name>
      <description>Contact number by telephone</description>
      <json-value-key>number</json-value-key>
      <define-flag name="type">
         <formal-name>Type</formal-name>
         <description>Indicates the type of phone number.</description>
         <constraint>
         <allowed-values allow-other="yes">
            <enum value="home">A home phone number.</enum>
            <enum value="office">An office phone number.</enum>
            <enum value="mobile">A mobile phone number.</enum>
         </allowed-values>
         </constraint>
      </define-flag>
   </define-field>
   <define-field name="url" as-type="uri">
      <formal-name>URL</formal-name>
      <description>URL for web site or Internet presence</description>
   </define-field>
   <define-field name="desc">
      <formal-name>Description</formal-name>
      <description>A short textual description</description>
   </define-field>
   <define-field name="text" as-type="markup-line">
      <formal-name>Text</formal-name>
      <description>A line of textual content whose semantic is determined by the context of use.</description>
   </define-field>
   <define-assembly name="biblio">
      <formal-name>Bibliographic Definition</formal-name>
      <description>A container in which a set of bibliographic information can included. The model of this information is undefined by OSCAL.</description>
      <model>
         <any/>
      </model>
   </define-assembly>
   <define-assembly name="resource">
      <formal-name>Resource</formal-name>
      <description>A resource associated with the present document, which may be a pointer to other data or a citation.</description>
      <flag ref="id" required="yes"/>
      <model>
         <field ref="title"/>
         <field ref="desc"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <field ref="doc-id" max-occurs="unbounded">
            <group-as name="document-ids"/>
         </field>
         <assembly ref="citation"/>
         <assembly ref="rlink" max-occurs="unbounded">
            <group-as name="rlinks"/>
         </assembly>
         <field ref="base64" max-occurs="unbounded">
            <group-as name="attachments" in-xml="UNGROUPED" in-json="SINGLETON_OR_ARRAY"/>
         </field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
         <any/>
      </model>
      <remarks>
         <p>Use of resource allows for information that pertains to, authenticates, or supplements the document it is included in.</p>
         <p>A resource can be used in two ways. 1) it may point to an specific retrievable network resource using a <code>rlink</code>, and 2) be included as an attachment using a <code>base64</code>. A resource may contain multiple <code>rlink</code> and <code>base64</code> entries that represent alternative download locations (rlink) and attachments (base64) for the same resource. Both rlink and base64 allow for a media-type to be specified, which is used to distiguish between different representations of the same resource (e.g., Microsoft Word, PDF). When multiple rlink and base64 entries are included for a given resource, all entries must contain equivalent information. This is extremely important when the entries represent OSCAL content that is represented in alternate formats (i.e., XML, JSON, YAML). A processor must be able to choose a preferred format to process (based on media-type) with the assumption that the same data can be processed from any of the available formats included by entries.</p>
         <p>When a resource is used as a citation, then the <code>title</code> and <code>citation</code> properties must be included.</p>
      </remarks>
   </define-assembly>
   <define-assembly name="citation">
      <formal-name>Citation</formal-name>
      <description>A citation consisting of end note text and optional structured bibliographic data.</description>
      <model>
         <field ref="text" min-occurs="1"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <assembly ref="biblio"/>
      </model>
      <remarks>
         <p>A <code>text</code> is used to define the endnote text, without any explicit bibliographic structure. If structured bibliographic data is needed, then the <code>biblio> can be used for this purpose.</code></p>
         <p>A <code>biblio</code> can be used to capture a structured bibliograpical citation in an appropriate format.</p>
      </remarks>
   </define-assembly>
   <define-field name="hash">
      <formal-name>Hash</formal-name>
      <description>A representation of a cryptographic digest generated over a resource using a hash algorithm.</description>
      <json-value-key>value</json-value-key>
      <flag ref="algorithm" required="yes"/>
      <remarks>
         <p>A hash value can be used to authenticate that a referenced resource is the same resources as was pointed to by the author of the reference.</p>
         <p>When appearing as part of a resource (data object), the hash should apply to the referenced object.</p>
      </remarks>
   </define-field>
   <define-flag name="algorithm" as-type="string">
      <formal-name>Hash algorithm</formal-name>
      <description>Method by which a hash is derived</description>
      <constraint>
      <allowed-values allow-other="yes">
         <enum value="SHA-224"/>
         <enum value="SHA-256"/>
         <enum value="SHA-384"/>
         <enum value="SHA-512"/>
         <enum value="RIPEMD-160"/>
      </allowed-values>
      </constraint>
      <remarks>
         <p>Valid values MUST be a value defined in the W3C <a href="http://www.w3.org/TR/xmlsec-algorithms/#digest-method">XML Security Algorithm Cross-Reference</a> Digest Methods (W3C, April 2013).</p>
      </remarks>
   </define-flag>
   <define-assembly name="role">
      <formal-name>Role</formal-name>
      <description>Defining a role to be assigned to a party</description>
      <flag ref="id" required="yes"/>
      <model>
         <field ref="title" min-occurs="1"/>
         <field ref="short-name"/>
         <field ref="desc"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
         </field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
      <remarks>
         <p>Permissible values to be determined closer to the application (e.g. by a receiving
        authority).</p>
      </remarks>
   </define-assembly>
   <define-assembly name="responsible-party">
      <formal-name>Responsible Party</formal-name>
      <description>A reference to a set of organizations or persons that have responsibility for performing a referenced role relative to the parent context.</description>
      <json-key flag-name="role-id"/>
      <define-flag name="role-id" required="yes" as-type="NCName">
         <formal-name>Responsible Role</formal-name>
         <description>The role that the party is responsible for.</description>
      <constraint>
         <allowed-values allow-other="yes">
            <enum value="prepared-by">Indicates the organization that created this content.</enum>
            <enum value="prepared-for">Indicates the organization for which this content was created.</enum>
            <enum value="content-approver">Indicates the organization responsible for all content represented in the "document".</enum>
         </allowed-values>
      </constraint>
      </define-flag>
      <model>
         <field ref="party-id" min-occurs="1" max-occurs="unbounded">
            <group-as name="party-ids"/>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <assembly ref="annotation" max-occurs="unbounded">
            <group-as name="annotations"/>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
         </field>
         <field ref="remarks" in-xml="WITH_WRAPPER"/>
      </model>
   </define-assembly>

   <define-flag name="href" as-type="uri-reference">
      <formal-name>hypertext reference</formal-name>
      <description>A link to a document or document fragment (actual, nominal or projected)</description>
      <remarks>
         <p>Note in particular that <code>href</code> targets include elements (locations) in
        representations of documents that exist only by virtue of dynamic application, such as (for
        example) the results of profile resolution.</p>
      </remarks>
   </define-flag>
   <define-flag name="id" as-type="NCName">
      <formal-name>Identifier</formal-name>
      <description>Unique identifier of the containing object</description>
      <remarks>
         <p>No mechanism is proposed to ensure that <code>id</code> values do not collide across
        different catalogs. Use profiling without <q>merge</q> to detect such clashes.</p>
      </remarks>
      <example>
         <o:citation id="xyz2">Some <o:strong>citation</o:strong> of some sort</o:citation>
      </example>
   </define-flag>
<!--   <define-field name="role-id" as-type="NCName">
      <formal-name>Role identifier</formal-name>
      <description>References a <code>role</code> element defined in metadata.</description>
      <allowed-values allow-other="yes">
         <enum value="content-creator">Identifies a party responsible for creating the content.</enum>
         <enum value="content-maintainer">Identifies a party responsible for maintaining the content on an ongoing basis.</enum>
         <!-\- TODO: Need to add others -\->
      </allowed-values>
   </define-field>
-->   <define-field name="title" as-type="markup-line">
      <formal-name>Title</formal-name>
      <description>A title for display and navigation</description>
      <remarks>
         <p>A title for the containing object as it should appear in a formatted document.</p>
      </remarks>
   </define-field>
   <define-field name="base64" as-type="base64Binary">
      <formal-name>Base64</formal-name>
      <description/>
      <json-value-key>value</json-value-key>
      <flag ref="filename"/>
      <flag ref="media-type"/>
   </define-field>
   <define-flag name="filename" as-type="uri-reference">
      <formal-name>File Name</formal-name>
      <description>Name of the file before it was encoded as Base64 to be embedded in a <code>resource</code>. This is the name that will be assigned to the file when the file is decoded.</description>
   </define-flag>
   <!--<define-field name="description" as-type="markup-multiline">
      <formal-name>Description</formal-name>
      <description>A description supporting the parent item.</description>
   </define-field>-->

   <define-field name="remarks" as-type="markup-multiline">
      <formal-name>Remarks</formal-name>
      <description>Additional commentary on the parent item.</description>
   </define-field>

</METASCHEMA>
