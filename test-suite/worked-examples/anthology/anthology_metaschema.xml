<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../../toolchains/xslt-M4/validate/metaschema-composition-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/css" href="../../..//metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../../schema/xml/metaschema.xsd"
 xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0">
    <schema-name>Anthology Metaschema</schema-name>
    <schema-version>1.0</schema-version>
    <short-name>anthology</short-name>
    <namespace>http://csrc.nist.gov/metaschema/ns/anthology</namespace>
    <json-base-uri>http://csrc.nist.gov/metaschema/anthology</json-base-uri>
    
   <remarks>
       <p>A <q>mini</q> metaschema produced for testing purposes. Use at your own risk.</p>
   </remarks>
    
   <define-assembly name="anthology">
       <formal-name>Anthology</formal-name>
       <description>A <b>collection</b> of literary excerpts</description>
       <root-name>ANTHOLOGY</root-name>
       <flag ref="id"/>
       <define-flag name="fans" as-type="nonNegativeInteger">
           <formal-name>fans</formal-name>
           <description>How many fans?</description>
       </define-flag>
       <define-flag name="uuid" as-type="uuid">
           <formal-name>UUID</formal-name>
           <description>Identifying this anthology</description>
       </define-flag>
       <model>
           <assembly ref="meta" min-occurs="1" max-occurs="1"/>
           <assembly ref="piece" max-occurs="unbounded" min-occurs="0">
               <group-as name="pieces"/>
           </assembly>
           <assembly ref="back"/>
       </model>
        <constraint>
            <matches id="regex-match" target=".//meta/creator/@who" regex="#(\S+)"/>
            <index-has-key name="creators-index" target=".//meta/creator[matches(@who,'\S')]" id="creators-index-ref">
                <key-field target="@who" pattern="#(\S+)"/>
            </index-has-key>
        </constraint>
   </define-assembly>
    
    <define-field name="redundant">
        <formal-name>Extra</formal-name>
        <description>Discard me</description>
    </define-field>
    
    <define-flag name="id" as-type="token">
        <formal-name>Identifier</formal-name>
        <description>A distinct code</description>
    </define-flag>
    
    <define-assembly name="meta">
        <formal-name>Front matter / metadata</formal-name>
        <description>Metadata for the anthology as a ^whole, or for a single piece within it</description>
        <model>
            <field ref="creator" max-occurs="unbounded">
                <group-as name="creators"/>
            </field>
            <field ref="date"/>
            <field ref="title" max-occurs="1"/>
            <define-field name="keyword" max-occurs="unbounded">
                <formal-name>Key word</formal-name>
                <description>A string</description>
                <group-as name="keywords"/>
            </define-field>
            <field ref="remarks"/>
        </model>
        <constraint>
            <is-unique id="distinct-keyword" target="keyword">
                <key-field target="."/>
            </is-unique>
            <allowed-values id="type-check" target="@type">
                <enum value="YYYY">Four-digit year (CE)</enum>
            </allowed-values>
            <matches id="when-yyyy-regex-check" target=".[@type='YYYY']/@date" regex="[1-9]\d?\d?\d?"/>
        </constraint>
    </define-assembly>
    
    <define-field name="title" as-type="markup-line">
        <formal-name>Title</formal-name>
        <description>As represented</description>
    </define-field>
        
    <define-field name="date">
        <formal-name>Date</formal-name>
        <description>As represented</description>
        <define-flag name="type">
            <formal-name>Type of date representation</formal-name>
            <description>May be given as a formatting code, e.g. 'YYYY' for year only. It is up to implementations to implement logic.</description>
        </define-flag>
    </define-field>
    
    <define-field name="creator">
        <formal-name>Creator (author or editor)</formal-name>
        <description>The text contents should name the person; the optional <code>who</code> flag links it to the index.</description>
        <define-flag name="role" required="yes">
            <formal-name>Role</formal-name>
            <description>Contribution of the creator</description>
            <constraint>
                <allowed-values id="creator-type-check">
                    <enum value="author">Author</enum>
                    <enum value="editor">Editor</enum>
                    <enum value="translator">Translator</enum>
                </allowed-values>
            </constraint>
        </define-flag>
        <define-flag name="who">
            <formal-name>Person identifier</formal-name>
            <description>Relates a person to the biographical index</description>
        </define-flag>
    </define-field>
    
    <define-field name="remarks" as-type="markup-multiline">
        <formal-name>Remarks</formal-name>
        <description>Pertinent information of any kind.</description>
    </define-field>
    
    <define-assembly name="piece">
        <formal-name>Piece</formal-name>
        <description>A single anthologized piece; poetry or prose, entire or excerpted</description>
        <model>
            <assembly ref="meta" min-occurs="0"/>
            <choice>
                <assembly ref="verse"/>
                <field ref="prose" in-xml="WITH_WRAPPER"/>
            </choice>
            <assembly ref="translated" max-occurs="unbounded">
                <group-as name="translations" in-json="BY_KEY"/>                
            </assembly>
        </model>
    </define-assembly>
    
    <define-assembly name="translated">
        <formal-name>Translation</formal-name>
        <description>A single translation of the text given in the piece.</description>
        <json-key flag-ref="lang"/>
        <define-flag name="lang" as-type="token">
            <formal-name>Language</formal-name>
            <description>An ISO code in lower case, e.g. 'en', 'de', 'jp'</description>
        </define-flag>
        <model>
            <choice>
                <assembly ref="verse"/>
                <field ref="prose" in-xml="WITH_WRAPPER"/>
            </choice>
        </model>
        <constraint>
            <!-- the name of an element child must be the same as the name of a sibling -->
            <expect test="child::*/name() = ../child::name()" target=".">
                <message>In a translation, a child must be of the same type of the main contents of the piece.</message>
            </expect>
        </constraint>
    </define-assembly>
    <define-assembly name="verse">
        <formal-name>Verse</formal-name>
        <description>A composition in lines, or an excerpt from such a composition</description>
        <flag ref="type"/>
        <model>
            <choice>
                <field ref="line" max-occurs="unbounded">
                    <group-as name="lines"/>
                </field>
                <assembly ref="stanza" max-occurs="unbounded">
                    <group-as name="stanzas"/>
                </assembly>
            </choice>
        </model>
        <constraint>
            <has-cardinality id="quatrain-cardinality-check" target=".[@type='quatrain']/line" max-occurs="4" min-occurs="4"/>
        </constraint>
    </define-assembly>
    
    <define-flag name="type">
        <formal-name>Verse type</formal-name>
        <description>Any specialized form such as Byronic, terza rima, sestina, sonnet</description>
    </define-flag>

    <define-field name="line" as-type="markup-line">
        <formal-name>Line of verse</formal-name>
        <description>May be metrical</description>
        <flag ref="feet"/>
        <flag ref="base"/>
        
    </define-field>
    
    <define-flag name="base">
        <formal-name>Base meter</formal-name>
        <description>Identifies the base metrical type, if any</description>
        <constraint>
            <allowed-values id="versetype-enumerations-check" allow-other="no">
                <enum value="dactyl">Dactylic</enum>
                <enum value="anapest">Anapestic</enum>
                <enum value="trochee">Trochaic</enum>
                <enum value="iamb">Iambic</enum>
                <enum value="mixed">Mixed</enum>
            </allowed-values>
        </constraint>
    </define-flag>
    
    <define-flag name="feet" as-type="integer">
        <formal-name>Meter count(feet)</formal-name>
        <description>Count of metrical feet (dimeter, trimeter, tetrameter etc) represented as a natural number</description>
        <constraint>
            <matches id="foot-count-regex-check" regex="[1-9]">
                <remarks>
                    <p>A regex check on an integer - so 001 is not valid, nor 11. Expressed as a regex this could also be expressed as an <code>expect</code> with a value test.</p>
                </remarks>
            </matches>
        </constraint>
    </define-flag>   
    
    <define-assembly name="stanza">
        <formal-name>Stanza</formal-name>
        <description>A group of lines within a verse</description>
        <flag ref="type"/>
        <flag ref="feet"/>
        <flag ref="base"/>
        <model>
            <field ref="line" max-occurs="unbounded">
                <group-as name="lines"/>
            </field>
        </model>
    </define-assembly>
    
    <define-field name="prose" as-type="markup-multiline">
        <formal-name>Prose</formal-name>
        <description>Short prose or an excerpt</description>
    </define-field>
    
    <define-assembly name="back">
        <formal-name>Back matter</formal-name>
        <description>Indexes and appurtenances</description>
        <model>
            <assembly ref="author-index"/>
        </model>
    </define-assembly>
    
    <define-assembly name="author-index">
        <formal-name>Author index</formal-name>
        <description>Information about authors cited in the anthology</description>
        <model>
            <assembly ref="author" max-occurs="unbounded">
                <!-- hard to validate: when in-json="BY_KEY"
                     is there an applicable uniqueness check -->
                <group-as name="authors" in-json="BY_KEY"/>                
            </assembly>
        </model>
        
        <constraint>
            <index id="creators-index" name="creators-index" target="author">
                <key-field target="@id"/>
            </index>
        </constraint>
    </define-assembly>
    
    <define-assembly name="author">
        <formal-name>Author</formal-name>
        <description>A single author cited in the anthology, with relevant info</description>
        <json-key flag-ref="id"/>
        <flag ref="id" required="yes"/>
        <model>
            <field    ref="name"/>
            <assembly ref="dates"/>
            <field ref="publication" max-occurs="unbounded" min-occurs="0">
                <group-as name="publications"/>
            </field>
            <assembly ref="bio"/>
            <any/>
        </model>
    </define-assembly>
    
    <define-field name="name" as-type="string">
        <formal-name>Name</formal-name>
        <description>A personal or place name</description>
    </define-field>
    
    <define-assembly name="bio">
        <formal-name>Biographical info</formal-name>
        <description>Gives basic facts or colorful detail.</description>
        <model>
            <field ref="name" max-occurs="unbounded">
                <group-as name="also-known-as"/>
            </field>
            <define-assembly name="facts" max-occurs="3">
                <formal-name>Facts</formal-name>
                <description>Structured data</description>
                <group-as name="fact-statements"/>
                <model>
                    <assembly ref="dates"/>
                    <define-assembly name="residence" max-occurs="unbounded">
                        <formal-name>Residency</formal-name>
                        <description>A range of values in time-space</description>
                        <group-as name="residences"/>
                        <model>
                            <define-assembly name="dates">
                                <formal-name>Dates</formal-name>
                                <description>Start to end</description>
                                <define-flag name="start" as-type="date">
                                    <formal-name>Start</formal-name>
                                    <description>When initiated</description></define-flag>
                                <define-flag name="end" as-type="date">
                                    <formal-name>End</formal-name>
                                    <description>When concluded or abandoned</description>
                                </define-flag>
                            </define-assembly>
                            <!--<assembly ref="address"/>-->
                        </model>
                    </define-assembly>
                </model>
            </define-assembly>
            <define-assembly name="colorful-details">
                <formal-name>Colorful details</formal-name>
                <description>Unstructured data</description>
                <model>
                    <define-field name="dates" as-type="string">
                        <formal-name>Dates</formal-name>
                        <description>This time, a string, so "Lincoln's Birthday" is a date.</description>
                    </define-field>
                    <field ref="remarks"/>
                </model>
            </define-assembly>
        </model>
    </define-assembly>
    
    <define-assembly name="dates">
        <formal-name>Dates</formal-name>
        <description>As a range (birth-death) or floruit</description>
        <!--nb: the Schematron does not presently validate datatypes on definitions only on constraint/matches-->
        <define-flag name="birth">
            <formal-name>Birth date</formal-name>
            <description>If only the year is known use June 30.</description>
        </define-flag>
        <!-- validate: after birth date, if given? -->
        <define-flag name="death">
            <formal-name>Death date</formal-name>
            <description>If only the year is known use July 1.</description>
        </define-flag>
        <define-flag name="floruit">
            <formal-name>Floruit date</formal-name>
            <description>Do not use along with both birth and death</description>
        </define-flag>
        <constraint>
            <!--if floruit is given, birth and death should not be?-->
            <matches id="birth-matches-date-datatype" target="@birth" level="WARNING" datatype="date"/>
            <matches id="death-matches-date-datatype" target="@death" level="WARNING" datatype="date"/>
            <!--<expect id="chronology-check" target="." test="@birth &lt; @death"/>-->
        </constraint>
    </define-assembly>
    
    <define-field name="publication">
        <formal-name>Publication</formal-name>
        <description>A publication attributed to an author</description>
        <define-flag name="date" as-type="date">
            <formal-name>Publication date</formal-name>
            <description>Date of (first) publication</description>
        </define-flag>
    </define-field>
    
    
</METASCHEMA>