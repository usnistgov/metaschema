<xs:schema xmlns="http://csrc.nist.gov/ns/metaschema/unit-test/datatypes-dateTime"
   xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   targetNamespace="http://csrc.nist.gov/ns/metaschema/unit-test/datatypes-dateTime"
   elementFormDefault="qualified"
   vc:minVersion="1.0"
   vc:maxVersion="1.1"
   version="1.0-milestone1">
   <xs:annotation>
      <xs:appinfo>
         <schema-name>Metaschema Unit Test: datatypes-dateTime</schema-name>
         <schema-version>1.0-milestone1</schema-version>
         <short-name>metaschema-datatypes-dateTime</short-name>
      </xs:appinfo>
   </xs:annotation>
   <xs:element name="examples" type="MetaschemaDatatypesDatetimeExamplesAssemblyType"/>
   <xs:complexType name="MetaschemaDatatypesDatetimeExamplesAssemblyType">
      <xs:annotation>
         <xs:appinfo>
            <formal-name>Examples</formal-name>
            <description>Some character strings of different sorts</description>
         </xs:appinfo>
         <xs:documentation>
            <p>
               <b>Examples</b>: Some character strings of different sorts</p>
         </xs:documentation>
      </xs:annotation>
      <!--AssemblyDefinitionComplexType MetaschemaDatatypesDatetimeExamplesAssemblyType: inline(false:false)-->
      <xs:sequence>
         <xs:element name="charstring"
            minOccurs="0"
            maxOccurs="unbounded"
            type="StringDatatype">
            <xs:annotation>
               <xs:appinfo>
                  <formal-name>Character string</formal-name>
                  <description>String of characters</description>
               </xs:appinfo>
               <xs:documentation>
                  <p>
                     <b>Character string</b>: String of characters</p>
               </xs:documentation>
            </xs:annotation>
            <!--NamedModelInstance MetaschemaDatatypesDatetimeCharstringFieldType: inline(false:false)-->
         </xs:element>
         <xs:element name="markupline"
            minOccurs="0"
            maxOccurs="unbounded"
            type="MarkupLineDatatype">
            <xs:annotation>
               <xs:appinfo>
                  <formal-name>Markup line</formal-name>
                  <description>Characters, and more</description>
               </xs:appinfo>
               <xs:documentation>
                  <p>
                     <b>Markup line</b>: Characters, and more</p>
               </xs:documentation>
            </xs:annotation>
            <!--NamedModelInstance MetaschemaDatatypesDatetimeMarkuplineFieldType: inline(false:false)-->
         </xs:element>
      </xs:sequence>
   </xs:complexType>
   <!--FieldDefinitionComplexType MetaschemaDatatypesDatetimeCharstringFieldType: inline(false:false)-->
   <!--FieldDefinitionComplexType MetaschemaDatatypesDatetimeMarkuplineFieldType: inline(false:false)-->
   <!-- ===================== -->
   <!-- core metaschema types -->
   <!-- ===================== -->
   <xs:simpleType name="StringDatatype">
      <xs:annotation>
         <xs:documentation>A string, but not empty and not whitespace-only
            (whitespace is U+9, U+10, U+32 or [ \n\t]+ )</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:annotation>
            <xs:documentation>The OSCAL 'string' datatype restricts the XSD type by prohibiting leading 
               and trailing whitespace, and something (not only whitespace) is required.</xs:documentation>
         </xs:annotation>
         <xs:whiteSpace value="preserve"/>
         <xs:pattern value="\S(.*\S)?">
            <xs:annotation>
               <xs:documentation>A trimmed string, at least one character with no
                  leading or trailing whitespace.</xs:documentation>
            </xs:annotation>
         </xs:pattern>
      </xs:restriction>
   </xs:simpleType>
   <!-- ====================== -->
   <!-- markup multiline types -->
   <!-- ====================== -->
   <!-- ================= -->
   <!-- markup line types -->
   <!-- ================= -->
   <xs:complexType name="MarkupLineDatatype" mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
         <xs:group ref="inlineMarkupGroup"/>
      </xs:choice>
   </xs:complexType>
   <!-- ================ -->
   <!-- prose base types -->
   <!-- ================ -->
   <xs:group name="inlineMarkupGroup">
      <xs:choice>
         <xs:element name="a" type="anchorType"/>
         <xs:element name="insert" type="insertType"/>
         <xs:group ref="phraseMarkupGroup"/>
         <xs:group ref="imageMarkupGroup"/>
      </xs:choice>
   </xs:group>
   <xs:group name="imageMarkupGroup">
      <xs:choice>
         <xs:element name="img" type="imageType"/>
      </xs:choice>
   </xs:group>
   <xs:group name="phraseMarkupGroup">
      <xs:choice>
         <xs:element name="code" type="inlineMarkupType" minOccurs="1"/>
         <xs:element name="em" type="inlineMarkupType" minOccurs="1"/>
         <xs:element name="i" type="inlineMarkupType" minOccurs="1"/>
         <xs:element name="b" type="inlineMarkupType" minOccurs="1"/>
         <xs:element name="strong" type="inlineMarkupType" minOccurs="1"/>
         <xs:element name="sub" type="inlineMarkupType" minOccurs="1"/>
         <xs:element name="sup" type="inlineMarkupType" minOccurs="1"/>
         <xs:element name="q" type="inlineMarkupType" minOccurs="1"/>
      </xs:choice>
   </xs:group>
   <xs:complexType name="inlineMarkupType" mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
         <xs:group ref="inlineMarkupGroup"/>
      </xs:choice>
   </xs:complexType>
   <xs:complexType name="imageType">
      <xs:attribute name="alt" type="xs:string"/>
      <xs:attribute name="src" use="required" type="xs:anyURI"/>
   </xs:complexType>
   <xs:complexType name="anchorType" mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
         <xs:group ref="phraseMarkupGroup"/>
         <xs:group ref="imageMarkupGroup"/>
      </xs:choice>
      <xs:attribute name="href" type="xs:anyURI"/>
   </xs:complexType>
   <xs:complexType name="insertType">
      <xs:annotation>
         <xs:documentation>An insert can be used to identify a placeholder for dynamically inserting text related to a specific object, which is referenced by the object's identifier using an <code xmlns="">id-ref</code>. This insert mechanism allows the selection of which text value from the object to dynamically include based on the application's display requirements.</xs:documentation>
      </xs:annotation>
      <xs:attribute name="type" use="required" type="xs:NCName">
         <xs:annotation>
            <xs:documentation>The type of object to include from (e.g., parameter, control, component, role, etc.)</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id-ref" use="required" type="xs:NCName">
         <xs:annotation>
            <xs:documentation>The identity of the object to insert a value for. The identity will be selected from the index of objects of the specified <code xmlns="">type</code>. The specific value to include is based on the application's display requirements, which will likely use a specific data element associated with the <code xmlns="">type</code> (e.g., title, identifier, value, etc.) that is appropriate for the application.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
</xs:schema>
