<?xml version="1.0" encoding="UTF-8"?>
<x:description 
    xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:m="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
    xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0/supermodel"
    stylesheet="../../../toolchains/xslt-M4/converter-gen/markdown-to-supermodel-xml-converter.xsl"
    run-as="external">

<x:scenario label="When converting markdown to markup">
    
    <x:scenario label="to show it works on a simple line of content">
        <x:call template="parse-markdown">
            <x:param name="markdown-str" select="'Here''s some *paragraph* content.'" />
            <x:param name="each-word" select="true()" />
        </x:call>
        <x:expect label="expressed as markup" select=".">
            <p>Here's some <em>paragraph</em> content.</p>
        </x:expect>
    </x:scenario>
    
    <x:scenario label="and also working on a couple of lines">
        <x:variable name="in" as="xs:string" xml:space="preserve">
Here's some *paragraph* content.

And a **second** paragraph.

</x:variable>
        <x:call template="parse-markdown">
            <x:param name="markdown-str" select="$in" />
        </x:call>
        <x:expect label="expressed as markup" select=".">
            <p>Here's some <em>paragraph</em> content.</p>
            <p>And a <strong>second</strong> paragraph.</p>
        </x:expect>
    </x:scenario>
    
    <x:scenario label="reproducing OSCAL Issue #1151">
        <!-- note in this example extra initial indenting can perturb the inferencing -->
        <!-- we should split this into two, one for nesting, the other for superfluous indent-->
        <!-- but also test under Commonmark  etc.! https://babelmark.github.io/ note that superfluous indents are not handled by many Markdown processors -->
        <x:variable name="in" as="xs:string" xml:space="preserve">    * list item one
    * list item two
    * list item three
    * list item four
      - item 4 subitem 1
      - item 4 subitem 2</x:variable>
        <x:call template="parse-markdown">
            <x:param name="markdown-str" select="$in" />
        </x:call>
        <x:expect label="expressed as markup" select=".">
            <ul>
                <li>list item one</li>
                <li>list item two</li>
                <li>list item three</li>
                <li>list item four<ul>
                    <li>item 4 sub 1</li>
                    <li>item 4 sub 2</li></ul>
                </li>
            </ul>
        </x:expect>
    </x:scenario>

    <x:scenario label="OSCAL Issue #1151 but left flush, no gratuitous indenting">
        <x:variable name="in" as="xs:string" xml:space="preserve">* list item one
* list item two
* list item three
* list item four
  - item 4 subitem 1
  - item 4 subitem 2</x:variable>
        <x:call template="parse-markdown">
            <x:param name="markdown-str" select="$in" />
        </x:call>
        <x:expect label="expressed as markup" select=".">
            <ul>
                <li>list item one</li>
                <li>list item two</li>
                <li>list item three</li>
                <li>list item four<ul>
                    <li>item 4 sub 1</li>
                    <li>item 4 sub 2</li></ul>
                </li>
            </ul>
        </x:expect>
    </x:scenario>
</x:scenario>
</x:description>
