<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="qualified"
  xmlns:oscal="http://csrc.nist.gov/ns/oscal/1.0"
  xmlns:m="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
  targetNamespace="http://csrc.nist.gov/ns/oscal/metaschema/1.0">

  <!-- Import any OSCAL schemas needed for samples... -->
  <!--<xs:import namespace="http://csrc.nist.gov/ns/oscal/1.0"
    schemaLocation="../../../schema/xml/oscal-catalog-schema.xsd"/>-->
  <xs:element name="METASCHEMA">
    <xs:annotation>
      <xs:documentation>Root element of an OSCAL Metaschema metaschema. Defines a family of data
        structures.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="m:schema-name"/>
        <xs:element ref="m:schema-version" minOccurs="0"/>
        <xs:element ref="m:short-name"/>
        <xs:element ref="m:namespace" minOccurs="1"/>
        <xs:element ref="m:remarks" minOccurs="0"/>
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="m:import"/>
          <xs:element name="define-assembly" type="m:global-assembly-definition"/>
          <xs:element name="define-field"    type="m:global-field-definition"/>
          <xs:element name="define-flag"     type="m:global-flag-definition"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="module" type="xs:anyURI"/>
      <xs:attribute name="abstract">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
            <xs:enumeration value="no"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <xs:complexType name="global-assembly-definition">
    <xs:annotation>
      <xs:documentation>An element with structured element content in XML; in JSON, an object with
        properties. Defined globally, an assembly can be assigned to appear in the <code>model</code> of any assembly (another assembly type, or itself), by <code>assembly</code> reference.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="m:formal-name"/>
      <xs:element minOccurs="0" ref="m:description"/>
      <xs:choice>
        <xs:element minOccurs="0" name="root-name" type="xs:NCName"/>
        <xs:element minOccurs="0" name="use-name" type="xs:NCName"/>
      </xs:choice>
      <xs:element minOccurs="0" maxOccurs="1"         ref="m:json-key"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:flag"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="define-flag" type="m:local-flag-definition"/>
      <xs:element name="model" minOccurs="0"          type="m:assembly-model"/>
      <xs:element minOccurs="0" name="constraint"     type="m:constraint"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"/>
    </xs:sequence>
    <xs:attribute name="name" use="required" type="xs:NCName"/>
    <xs:attribute name="module" type="xs:anyURI"/>
  </xs:complexType>

  <xs:complexType name="assembly-model">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="m:assembly"/>
        <xs:element ref="m:field"/>
        <xs:element name="define-assembly" type="m:local-assembly-definition"/>
        <xs:element name="define-field"    type="m:local-field-definition"/>
        <xs:element ref="m:choice"/>
      </xs:choice>
      <xs:element ref="m:any" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  
  <xs:complexType name="global-field-definition">
    <xs:annotation>
      <xs:documentation>In JSON, an object with a nominal string value (potentially with internal
        inline - not fully structured - markup). In XML, an element with string or mixed
        content. Defined globally, a field can be assigned to appear in the <code>model</code> of any assembly by <code>field</code> reference.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="m:formal-name"/>
      <xs:element minOccurs="0" ref="m:description"/>
      <xs:element minOccurs="0" name="use-name" type="xs:NCName"/>
      <xs:element minOccurs="0" maxOccurs="1" ref="m:json-key"/>
      <xs:element minOccurs="0" maxOccurs="1" ref="m:json-value-key"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:flag"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="define-flag" type="m:local-flag-definition"/>
      <xs:element minOccurs="0" name="constraint" type="m:constraint"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"/>
    </xs:sequence>
    <xs:attribute name="as-type" type="m:field-types" default="string"/>
    <xs:attribute name="collapsible" type="m:boolean" default="yes"/>
    <xs:attribute name="name" use="required" type="xs:NCName"/>
    <xs:attribute name="module" type="xs:anyURI"/>
  </xs:complexType>


  <xs:complexType name="global-flag-definition">
    <xs:annotation>
      <xs:documentation>A data point to be expressed as an attribute in the XML or a name/value pair
        in the JSON. A flag may also be defined implicitly with the assembly or field to which it
        applies. Defined globally, a flag can be assigned to any field or assembly by <code>flag</code> reference.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="m:formal-name"/>
      <xs:element minOccurs="0" ref="m:description"/>
      <xs:element minOccurs="0" name="use-name" type="xs:NCName"/>
      <xs:element name="constraint" minOccurs="0" type="m:constraint"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"/>
    </xs:sequence>
    <xs:attribute name="name" use="required" type="xs:NCName"/>
    <!-- datatype should default to 'string' -->
    <xs:attribute name="as-type" type="m:simple-datatypes" default="string"/>
    <!-- defined for composed (compiled) metaschemas -->
    <xs:attribute name="module" type="xs:anyURI"/>
  </xs:complexType>
  
  <xs:complexType name="local-assembly-definition">
    <xs:annotation>
      <xs:documentation>In JSON, an object with a nominal string value (potentially with internal
        inline - not fully structured - markup). In XML, an element with string or mixed
        content. A local definition describes and constrains the appearance of the field only in this (assembly) context.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="m:formal-name"/>
      <xs:element minOccurs="0" ref="m:description"/>
      <xs:element minOccurs="0" name="use-name"/>
      <xs:element minOccurs="0" maxOccurs="1" ref="m:json-key"/>
      <xs:element minOccurs="0" maxOccurs="1" ref="m:json-value-key"/>
      <xs:element minOccurs="0" ref="m:group-as"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:flag"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="define-flag" type="m:local-flag-definition"/>
      <xs:element name="model" minOccurs="0"          type="m:assembly-model"/>
      <!--<xs:element minOccurs="0" name="constraint" type="m:constraint"/>-->
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"/>
    </xs:sequence>
    <xs:attribute name="as-type" type="m:field-types" default="string"/>
    <xs:attribute name="collapsible" type="m:boolean" default="yes"/>
    <xs:attributeGroup ref="m:cardinality-specification"/>
    <xs:attribute name="name" use="required" type="xs:NCName"/>
    <xs:attribute name="module" type="xs:anyURI"/>
  </xs:complexType>
  
  
  <xs:complexType name="local-field-definition">
    <xs:annotation>
      <xs:documentation>In JSON, an object with a nominal string value (potentially with internal
        inline - not fully structured - markup). In XML, an element with string or mixed
        content. A local definition describes and constrains the appearance of the field only in this (assembly) context.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="m:formal-name"/>
      <xs:element minOccurs="0" ref="m:description"/>
      <xs:element minOccurs="0" name="use-name"/>
      <xs:element minOccurs="0" maxOccurs="1" ref="m:json-key"/>
      <xs:element minOccurs="0" maxOccurs="1" ref="m:json-value-key"/>
      <xs:element minOccurs="0" ref="m:group-as"/>
      <!--<xs:choice maxOccurs="unbounded" minOccurs="0">
          <xs:element name="flag" type="m:local-flag-definition"/>
          <xs:element name="flag" type="m:named-flag"/>
        </xs:choice>-->
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:flag"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="define-flag" type="m:local-flag-definition"/>
      <xs:element minOccurs="0" name="constraint" type="m:constraint"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"/>
    </xs:sequence>
    <xs:attribute name="as-type" type="m:field-types" default="string"/>
    <xs:attribute name="collapsible" type="m:boolean" default="yes"/>
    <xs:attributeGroup ref="m:cardinality-specification"/>
    <xs:attribute name="name" use="required" type="xs:NCName"/>
    <xs:attribute name="module" type="xs:anyURI"/>
    <xs:attribute name="in-xml" default="WITH_WRAPPER">
      <xs:annotation>
        <xs:documentation>A field with assigned datatype 'markup-multiline' may be designated for representation with or without a containing (wrapper) element
          in XML.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="WITH_WRAPPER">
            <xs:annotation>
              <xs:documentation>Any paragraph or block contents of a markup-multiline field will be represented with a containing (wrapper) element in the XML.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="UNWRAPPED">
            <xs:annotation>
              <xs:documentation>With in-xml='UNWRAPPED', a field contents will be represented in the XML with no wrapper, so the field will be implicit. Among sibling fields in a given model, only one of them may be designated as UNWRAPPED.</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    
  </xs:complexType>
  
  <xs:complexType name="local-flag-definition">
    <xs:annotation>
      <xs:documentation>A data point to be expressed as an attribute in the XML or a name/value pair in the JSON. A local definition describes and constrains the appearance of the flag only in its parent (assembly or field) context.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="m:formal-name"/>
      <xs:element minOccurs="0" ref="m:description"/>
      <xs:element name="constraint" minOccurs="0" type="m:constraint"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:remarks"/>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:example"/>
    </xs:sequence>
    <xs:attribute name="name" use="required" type="xs:NCName"/>
    <!-- datatype should default to 'string' -->
    <xs:attribute name="as-type" type="m:simple-datatypes" default="string"/>    
    <xs:attribute name="required" type="m:boolean" default="no"/>
    <!-- defined for composed (compiled) metaschemas -->
    <xs:attribute name="module" type="xs:anyURI"/>
  </xs:complexType>
  
  <xs:element name="formal-name" type="xs:string">
    <xs:annotation>
      <xs:documentation>A formal name for the data construct, to be presented in documentation. It
        is permissible for a formal name to provide nothing but an expanson of what is already given
        by a tag (for example, this element could have formal name "Formal name") but it should at
        the very least confirm the intended semantics for the user, not confuse them.</xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="namespace" type="xs:anyURI">
    <xs:annotation>
      <xs:documentation>The XML namespace governing the names of elements in XML documents, which
        expect to be conformant to the schemas expressed by this metaschema. By using this
        namespace, documents and document fragments used in mixed-format environments may be
        distinguished from neighbor XML formats using other namespaces. NB this is only for the
        convenience of XML users; this value is not reflected in OSCAL JSON, and OSCAL applications
        should not rely on namespaces alone to disambiguate or resolve semantics.</xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:group name="markup-elements">
    <xs:sequence>
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:a"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:code"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:q"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:em"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:strong"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  
  <xs:element name="description">
    <xs:annotation>
      <xs:documentation>A short description of the data construct, to be inserted into
        documentation. Unlike 'formal-name' this should not simply repeat what is readily
        discernible from a tag (element name or JSON label), but say a little more about
        it.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:group ref="m:markup-elements"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="remarks">
    <xs:annotation>
      <xs:documentation>Any explanatory or helpful information to be provided in the
      documentation of an assembly, field or flag.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="m:p"/>
      </xs:sequence>
      <xs:attribute name="class" type="xs:NMTOKENS">
        <xs:annotation>
          <xs:documentation>Mark as 'XML' for XML-only or 'JSON' for JSON-only remarks.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="module" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="schema-name">
    <xs:annotation>
      <xs:documentation>The name of the information model to be represented by derived schemas.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:choice maxOccurs="unbounded">
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:code"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="m:q"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="schema-version">
    <xs:annotation>
      <xs:documentation>The version of the information model to be represented by derived schemas.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true"/>
  </xs:element>
  
  <xs:element name="short-name">
    <xs:annotation>
      <xs:documentation>A short (code) name to be used for the metaschema, for example as a constituent of names assigned to
        derived artifacts such as schemas and conversion utilities.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true"/>
  </xs:element>
  
  <xs:element name="import">
    <xs:annotation>
      <xs:documentation>To import a set of declarations from an out-of-line schema, supporting reuse of common information structures.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attribute name="href" type="xs:anyURI" use="required">
        <xs:annotation>
          <xs:documentation>A relative or absolute URI for retrieving an out-of-line metaschema module.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="assembly">
    <xs:annotation>
      <xs:documentation>Referencing an assembly definition to include an assembly or assemblies of a given type in a model.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="use-name" type="xs:NCName"/>
        <xs:element minOccurs="0" ref="m:group-as"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
      </xs:sequence>
      <xs:attribute name="ref" use="required" type="xs:NCName"/>
      <xs:attributeGroup ref="m:cardinality-specification"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="field">
    <xs:annotation>
      <xs:documentation>Referencing a field definition to include a field or fields of a given type in a model.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="use-name" type="xs:NCName"/>
        <xs:element minOccurs="0" ref="m:group-as"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
      </xs:sequence>
      <xs:attribute name="ref" use="required" type="xs:NCName"/>
      <xs:attributeGroup ref="m:cardinality-specification"/>
      <xs:attribute name="in-xml" default="WITH_WRAPPER">
        <xs:annotation>
          <xs:documentation>A field with assigned datatype 'markup-multiline' may be designated for representation with or without a containing (wrapper) element
            in XML.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="WITH_WRAPPER">
              <xs:annotation>
                <xs:documentation>Any paragraph or block contents of a markup-multiline field will be represented with a containing (wrapper) element in the XML.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="UNWRAPPED">
              <xs:annotation>
                <xs:documentation>With in-xml='UNWRAPPED', a field contents will be represented in the XML with no wrapper, so the field will be implicit. Among sibling fields in a given model, only one of them may be designated as UNWRAPPED.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <xs:attributeGroup name="cardinality-specification">
    <xs:attribute name="min-occurs" type="xs:nonNegativeInteger" default="0">
      <xs:annotation>
        <xs:documentation>Minimum occurrence of assemblies within a valid model. The default value is 0, for an optional occurrence.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="max-occurs"
      type="m:natural-number-or-unbounded" default="1">
      <xs:annotation>
        <xs:documentation>Maximum occurrence of assemblies within a valid model. The default value is 1, for a single occurrence. 'unbounded' permits any number of assemblies of the designated type.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  
  <xs:simpleType name="natural-number-or-unbounded">
    <xs:union memberTypes="xs:positiveInteger">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="unbounded"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>
  
  <xs:complexType name="allowed-values-type">
    <xs:annotation>
      <xs:documentation>Indicates a set of values to be recognized for a flag or field, with semantics asserted by a metaschema enumeration (enum).</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element maxOccurs="unbounded" ref="m:enum"/>
    </xs:sequence>
    <xs:attribute name="allow-other" type="m:boolean" default="no">
      <xs:annotation>
        <xs:documentation>The given enumerated value or values are inclusive of other values ('yes') or not ('no', the default)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
 
  <xs:element name="enum">
    <xs:annotation>
      <xs:documentation>An enumerated value for a flag or field. The value is indicated by the 'value' attribute while the element contents describe the intended semantics for documentation.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:group ref="m:markup-elements"/>
      <xs:attribute name="value" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>A value recognized for a flag or field.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="p">
    <xs:annotation>
      <xs:documentation>A paragraph or paragraph fragment, in documentation.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:group ref="m:markup-elements"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="a">
    <xs:complexType mixed="true">
      <xs:attribute name="href"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="q" type="xs:string"/>
  <xs:element name="code" type="xs:string"/>
  <xs:element name="em" type="xs:string"/>
  <xs:element name="strong" type="xs:string"/>
  
  <xs:element name="flag">
    <xs:complexType>
      <xs:sequence>        
        <xs:element name="use-name" minOccurs="0" type="xs:NCName"/>
        <xs:element name="constraint" minOccurs="0" maxOccurs="unbounded" type="m:constraint"/>
      </xs:sequence>
      <xs:attribute name="ref" use="required" type="xs:NCName"/>
      <xs:attribute name="required" type="m:boolean" default="no"/>
    </xs:complexType>
  </xs:element>
  
  <xs:complexType name="constraint">
    <xs:sequence>
      <xs:element minOccurs="0" ref="m:remarks"/>
      <xs:choice>
        <xs:element minOccurs="0" name="allowed-values">
          <xs:complexType>
            <xs:complexContent>
              <xs:extension base="m:allowed-values-type">
                <xs:attribute name="extends" type="m:boolean" default="yes"/>
              </xs:extension>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="matches">
           <xs:complexType>
             <xs:attribute name="regex"/>
             <xs:attribute name="as-type"  type="m:simple-datatypes"/>
           </xs:complexType>
        </xs:element>
        <xs:element name="is-distinct">
          <xs:complexType/>
        </xs:element>
        <xs:element name="equals">
          <xs:complexType>
            <xs:attribute name="select"/>
            <xs:attribute name="occurrence">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="empty" />
                  <xs:enumeration value="markup-line"/>
                  <xs:enumeration value="markup-multiline"/>
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" maxOccurs="unbounded" name="require">
          <xs:complexType>
            <xs:complexContent>
              <xs:extension base="m:constraint">
                <xs:attribute name="when"/>
              </xs:extension>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
      </xs:choice>

    </xs:sequence>
    <xs:attribute name="scope" default="."/>
    <xs:attribute name="required" type="m:boolean" default="no"/>
  </xs:complexType>
  
  <xs:element name="choice">
    <xs:annotation>
      <xs:documentation>Within a model, indicates that only one of a set of fields or assemblies, referenced in the choice, may occur in valid instances.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element ref="m:assembly"/>
        <xs:element ref="m:field"/>
        <xs:element name="define-assembly" type="m:local-assembly-definition"/>
        <xs:element name="define-field"    type="m:local-field-definition"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="any">
    <xs:annotation>
      <xs:documentation>Within a model, a foreign element may be permitted here..</xs:documentation>
    </xs:annotation>
  </xs:element>
  
  <xs:element name="example">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="m:description"/>
        <xs:element minOccurs="0" ref="m:remarks"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:any namespace="##other" processContents="lax"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="href" type="xs:anyURI"/>
      <xs:attribute name="path" type="xs:string"/>
      <xs:attribute name="module" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="json-key">
    <xs:annotation>
      <xs:documentation>In the XML, produces an attribute with the given name, whose value is used as a key value (aka object property name) in the JSON, enabling objects to be 'lifted' out of arrays when such values are distinct. Implies that siblings will never share values. Overloading with datatype 'ID' and naming the key 'id' is legitimate and useful. Even without ID validation, uniqueness of these values among siblings is validable.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="flag-name" type="xs:NCName"/>
      <!-- do not have to flag if required; it always will be <xs:attribute name="required" type="xs:NCName"/>-->
    </xs:complexType>
  </xs:element>
  
  <xs:element name="group-as">
    <xs:annotation>
      <xs:documentation>When a given referenced field or assembly must be wrapped in an outer grouping, these settings apply, including a name for the group, and how to express the grouping in the respective formats. Not necessary when a field or assembly has max-occurs='1'</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" type="xs:NCName" use="required"/>
      <xs:attribute name="in-json" type="m:json-group-behavior" use="optional" default="SINGLETON_OR_ARRAY">
        <xs:annotation>
          <xs:documentation>How to represent a grouping in JSON</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="in-xml" type="m:xml-group-behavior" use="optional" default="UNGROUPED">
        <xs:annotation>
          <xs:documentation>Whether to represent a grouping explicitly in XML</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  
  <xs:simpleType name="json-group-behavior">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ARRAY">
        <xs:annotation>
          <xs:documentation>Always use an array</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SINGLETON_OR_ARRAY">
        <xs:annotation>
          <xs:documentation>Produce a singleton for a single member (field or assembly) or an array for multiple members</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BY_KEY">
        <xs:annotation>
          <xs:documentation>For any group (one or more members) produce an object with properties for each member, using a designated flag for their key (label) values, which must be distinct</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="xml-group-behavior">
    <xs:restriction base="xs:string">
      <xs:enumeration value="GROUPED">
        <xs:annotation>
          <xs:documentation>Use a wrapper element</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="UNGROUPED">
        <xs:annotation>
          <xs:documentation>Do not use a wrapper element</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  
  <!-- a value-key provides a literal to be used in JSON as a key for the field value;
     when given as a child of a flag (reference), designates that flag's value to serve as
     the key (JSON property label) for the field's value. Inside flag this element
     must be empty.  -->
  <xs:element name="json-value-key">
    <xs:annotation>
      <xs:documentation>Used inside a field definition, designates
        a flag to be used as a label (key) to be used for the field value in the JSON on
        the field being defined. When a flag-name is provided, indicates that the value of the field
        is to be labeled in the JSON with the value of the flag.</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attribute name="flag-name" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  
  <xs:simpleType name="simple-datatypes">
    <xs:restriction base="xs:string">
      <xs:enumeration value="boolean" />
      <xs:enumeration value="string" />
      <xs:enumeration value="NCName" />
      <xs:enumeration value="decimal" />
      <!-- Not supporting float or double -->
      <!--<xs:enumeration value="float" />
      <xs:enumeration value="double" />-->
      <xs:enumeration value="integer" />
      <xs:enumeration value="nonNegativeInteger"/>
      <xs:enumeration value="positiveInteger"/>
      <xs:enumeration value="dateTime"/>
      <xs:enumeration value="date"/>
      <xs:enumeration value="base64Binary"/>
      
      <!-- specialized datatypes -->
      <xs:enumeration value="dateTime-with-timezone"/>
      <xs:enumeration value="date-with-timezone"/>
      <!--<xs:enumeration value="percent"/>-->
      <xs:enumeration value="email"/>
      <xs:enumeration value="hostname"/>
      <xs:enumeration value="ip-v4-address"/>
      <xs:enumeration value="ip-v6-address"/>
      <xs:enumeration value="uri"/>
      <xs:enumeration value="uri-reference"/>
    </xs:restriction>   
  </xs:simpleType>
  
  <xs:simpleType name="field-types">
    <xs:union memberTypes="m:simple-datatypes">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="empty" />
          <xs:enumeration value="markup-line"/>
          <xs:enumeration value="markup-multiline"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>

  <!-- TODO: check if both forms are handled. In some cases only 'yes' is handled, and 'true' is not. -->
  <xs:simpleType name="boolean">
    <xs:restriction base="xs:NCName">
      <xs:enumeration value="yes"/>
      <xs:enumeration value="no"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
