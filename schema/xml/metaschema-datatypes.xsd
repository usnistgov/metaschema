<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified">

	<xs:simpleType name="Base64Datatype">
		<xs:annotation>
			<xs:documentation>Binary data encoded using the Base64 encoding algorithm
				as defined by RFC4648.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:base64Binary">
			<xs:pattern value="[0-9A-Za-z+/]+={0,2}"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="BooleanDatatype">
		<xs:annotation>
			<xs:documentation>A binary value that is either: true (or 1) or false (or 0).</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:boolean">
			<xs:pattern value="true|1|false|0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="DateDatatype">
		<xs:annotation>
			<xs:documentation>A string representing a 24-hour period with an optional timezone.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:date">
			<xs:pattern value="(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))(Z|[+-][0-9]{2}:[0-9]{2})?"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="DateWithTimezoneDatatype">
		<xs:annotation>
			<xs:documentation>A string representing a 24-hour period with a required timezone.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="DateDatatype">
			<xs:pattern value="(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))(Z|[+-][0-9]{2}:[0-9]{2})"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="DateTimeDatatype">
		<xs:annotation>
			<xs:documentation>A string representing a point in time with an optional timezone.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:dateTime">
			<xs:pattern value="(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|(-((0[0-9]|1[0-2]):00|0[39]:30)|\+((0[0-9]|1[0-4]):00|(0[34569]|10):30|(0[58]|12):45)))?"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="DateTimeWithTimezoneDatatype">
		<xs:annotation>
			<xs:documentation>A string representing a point in time with a required timezone.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="DateTimeDatatype">
			<xs:pattern value="(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|(-((0[0-9]|1[0-2]):00|0[39]:30)|\+((0[0-9]|1[0-4]):00|(0[34569]|10):30|(0[58]|12):45)))"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="DayTimeDurationDatatype">
		<xs:annotation>
			<xs:documentation>An amount of time quantified in days, hours, minutes, and seconds.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:duration">
			<xs:pattern value="-?P([0-9]+D(T(([0-9]+H([0-9]+M)?(([0-9]+|[0-9]+(\.[0-9]+)?)S)?)|([0-9]+M(([0-9]+|[0-9]+(\.[0-9]+)?)S)?)|([0-9]+|[0-9]+(\.[0-9]+)?)S))?)|T(([0-9]+H([0-9]+M)?(([0-9]+|[0-9]+(\.[0-9]+)?)S)?)|([0-9]+M(([0-9]+|[0-9]+(\.[0-9]+)?)S)?)|([0-9]+|[0-9]+(\.[0-9]+)?)S)"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="DecimalDatatype">
		<xs:annotation>
			<xs:documentation>A real number expressed using a whole and optional fractional part
				separated by a period.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal">
			<xs:pattern value="\S(.*\S)?">
				<xs:annotation>
					<xs:documentation>This pattern ensures that leading and trailing whitespace is
						disallowed. This helps to even the user experience between implementations
						related to whitespace.</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="EmailAddressDatatype">
		<xs:annotation>
			<xs:documentation>An email address string formatted according to RFC 6531.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="StringDatatype">
			<xs:pattern value=".+@.+">
				<!-- TODO: Need a better pattern. -->
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="HostnameDatatype">
		<xs:annotation>
			<xs:documentation>A host name</xs:documentation>
		</xs:annotation>
		<xs:restriction base="StringDatatype">
			<!-- TODO: Need a good hostname pattern -->
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="IntegerDatatype">
		<xs:annotation>
			<xs:documentation>A whole number value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:integer">
			<xs:pattern value="\S(.*\S)?">
				<xs:annotation>
					<xs:documentation>This pattern ensures that leading and trailing whitespace is
						disallowed. This helps to even the user experience between implementations
						related to whitespace.</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="IPV4AddressDatatype">
		<xs:annotation>
			<xs:documentation>An Internet Protocol version 4 address represented using
				dotted-quad syntax as defined in section 3.2 of RFC2673.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="StringDatatype">
			<xs:pattern value="((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])" />
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="IPV6AddressDatatype">
		<xs:annotation>
			<xs:documentation>An Internet Protocol version 6 address represented using
				the syntax defined in section 2.2 of RFC3513.</xs:documentation>
			<xs:documentation>This is based on the pattern provided here:
				https://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
				with some customizations.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="StringDatatype">
			<xs:pattern
				value="(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|[fF][eE]80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::([fF]{4}(:0{1,4}){0,1}:){0,1}((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]).){3,3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="NonNegativeIntegerDatatype">
		<xs:annotation>
			<xs:documentation>An integer value that is equal to or greater than 0.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:nonNegativeInteger">
			<xs:pattern value="\S(.*\S)?">
				<xs:annotation>
					<xs:documentation>This pattern ensures that leading and trailing whitespace is
						disallowed. This helps to even the user experience between implementations
						related to whitespace.</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="PositiveIntegerDatatype">
		<xs:annotation>
			<xs:documentation>An integer value that is greater than 0.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:positiveInteger">
			<xs:pattern value="\S(.*\S)?">
				<xs:annotation>
					<xs:documentation>This pattern ensures that leading and trailing whitespace is
						disallowed. This helps to even the user experience between implementations
						related to whitespace.</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="StringDatatype">
		<xs:annotation>
			<xs:documentation>A non-empty string of Unicode characters with leading and trailing whitespace
				disallowed. Whitespace is: U+9, U+10, U+32 or [ \n\t]+</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:annotation>
				<xs:documentation>The 'string' datatype restricts the XSD type by prohibiting leading 
					and trailing whitespace, and something (not only whitespace) is required.</xs:documentation>
			</xs:annotation>
			<xs:whiteSpace value="preserve" />
			<xs:pattern value="\S(.*\S)?">
				<xs:annotation>
					<xs:documentation>This pattern ensures that leading and trailing whitespace is
						disallowed. This helps to even the user experience between implementations
						related to whitespace.</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="TokenDatatype">
		<xs:annotation>
			<!--<xs:documentation>Matching XSD NCName, except whitespace is not collapsed.</xs:documentation> -->
			<xs:documentation>A non-empty, non-colonized name as defined by XML Schema Part 2: Datatypes
				Second Edition (https://www.w3.org/TR/xmlschema11-2/#NCName), with leading and trailing
				whitespace disallowed.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="StringDatatype">
			<xs:pattern value="(\p{L}|_)(\p{L}|\p{N}|[.\-_])*">
				<xs:annotation>
					<!--<xs:documentation>An XML initial character (but not colon), followed 
						by any XML name character (but not colon).</xs:documentation> -->
					<xs:documentation>A single token may not contain whitespace.
					</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="URIDatatype">
		<xs:annotation>
			<xs:documentation>A universal resource identifier (URI) formatted according to RFC3986.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:anyURI">
			<xs:pattern value="[a-zA-Z][a-zA-Z0-9+\-.]+:.*\S">
				<xs:annotation>
					<xs:documentation>Requires a scheme with colon per RFC 3986.</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="URIReferenceDatatype">
		<xs:annotation>
			<xs:documentation>A URI Reference, either a URI or a relative-reference, formatted according to section 4.1 of RFC3986.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:anyURI">
			<xs:pattern value="\S(.*\S)?">
				<xs:annotation>
					<xs:documentation>This pattern ensures that leading and trailing whitespace is
						disallowed. This helps to even the user experience between implementations
						related to whitespace.</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="UUIDDatatype">
		<xs:annotation>
			<xs:documentation>A type 4 ('random' or 'pseudorandom') or type 5 UUID per RFC
				4122.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="StringDatatype">
			<xs:pattern value="[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}">
				<xs:annotation>
					<xs:documentation>A sequence of 8-4-4-4-12 hex digits, with extra
						constraints in the 13th and 17-18th places for version 4 and 5
					</xs:documentation>
				</xs:annotation>
			</xs:pattern>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="YearMonthDurationDatatype">
		<xs:restriction base="xs:duration">
			<xs:pattern value="-?P([0-9]+Y([0-9]+M)?)|[0-9]+M"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
